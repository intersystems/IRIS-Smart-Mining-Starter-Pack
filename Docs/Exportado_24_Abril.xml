<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="ASPMining.CanonicalModel.Equipment.Equipment">
<Super>%Persistent</Super>

<Property name="Id">
<Description>
documentation</Description>
<Type>%String</Type>
</Property>

<Property name="EquipmentCategory">
<Description>
documentation</Description>
<Type>EquipmentCategory</Type>
</Property>

<Property name="EquipmentModel">
<Description>
documentation</Description>
<Type>EquipmentModel</Type>
</Property>

<Property name="Name">
<Description>
documentation</Description>
<Type>%String</Type>
</Property>

<Property name="Capacity">
<Type>%Float</Type>
</Property>

<Index name="EquipmentIndex">
<Properties>Id</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ASPMining.CanoniF845.EquipmentD</DataLocation>
<DefaultData>EquipmentDefaultData</DefaultData>
<IdLocation>^ASPMining.CanoniF845.EquipmentD</IdLocation>
<IndexLocation>^ASPMining.CanoniF845.EquipmentI</IndexLocation>
<StreamLocation>^ASPMining.CanoniF845.EquipmentS</StreamLocation>
<Data name="EquipmentDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Id</Value>
</Value>
<Value name="3">
<Value>Category</Value>
</Value>
<Value name="4">
<Value>Name</Value>
</Value>
<Value name="5">
<Value>Capacity</Value>
</Value>
<Value name="6">
<Value>EquipmentCategory</Value>
</Value>
<Value name="7">
<Value>EquipmentModel</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="ASPMining.CanonicalModel.Equipment.EquipmentCategory">
<Super>%Persistent</Super>

<Property name="Name">
<Description>
documentation e.g: Truck, Shovel, etc.</Description>
<Type>%String</Type>
</Property>

<Property name="Description">
<Description>
documentation </Description>
<Type>%String</Type>
</Property>

<Index name="EquipmentCategoryIndex">
<Properties>Name</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ASPMiningF845.EquipmentCa2CAAD</DataLocation>
<DefaultData>EquipmentCategoryDefaultData</DefaultData>
<IdLocation>^ASPMiningF845.EquipmentCa2CAAD</IdLocation>
<IndexLocation>^ASPMiningF845.EquipmentCa2CAAI</IndexLocation>
<StreamLocation>^ASPMiningF845.EquipmentCa2CAAS</StreamLocation>
<Data name="EquipmentCategoryDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Id</Value>
</Value>
<Value name="3">
<Value>Name</Value>
</Value>
<Value name="4">
<Value>Description</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="ASPMining.CanonicalModel.Equipment.EquipmentModel">
<Description>
Information about brand and model of equipment</Description>
<Super>%Persistent</Super>

<Property name="Model">
<Description>
documentation</Description>
<Type>%String</Type>
</Property>

<Property name="Brand">
<Description>
documentation</Description>
<Type>%String</Type>
</Property>

<Property name="NominalCapacityTons">
<Description>
documentation</Description>
<Type>%Float</Type>
</Property>

<Index name="EquipmentModelIndex">
<Properties>Model</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ASPMining.CF845.EquipmentModelD</DataLocation>
<DefaultData>EquipmentModelDefaultData</DefaultData>
<IdLocation>^ASPMining.CF845.EquipmentModelD</IdLocation>
<IndexLocation>^ASPMining.CF845.EquipmentModelI</IndexLocation>
<StreamLocation>^ASPMining.CF845.EquipmentModelS</StreamLocation>
<Data name="EquipmentModelDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Model</Value>
</Value>
<Value name="3">
<Value>Brand</Value>
</Value>
<Value name="4">
<Value>NominalCapacityTons</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="ASPMining.CanonicalModel.HWMonitoring.OEMEvent">
<Description>
History of all OEM Events</Description>
<Super>%Persistent</Super>

<Property name="OEMEventType">
<Description>
documentation</Description>
<Type>OEMEventType</Type>
</Property>

<Property name="OEMInterface">
<Description>
documentation</Description>
<Type>OEMInterface</Type>
</Property>

<Property name="Shift">
<Description>
documentation</Description>
<Type>ASPMining.CanonicalModel.Planning.Shift</Type>
</Property>

<Property name="Location">
<Description>
documentation</Description>
<Type>ASPMining.CanonicalModel.Mine.Location</Type>
</Property>

<Property name="ReadTime">
<Description>
documentation</Description>
<Type>%DateTime</Type>
</Property>

<Property name="Value">
<Description>
documentation</Description>
<Type>%Float</Type>
</Property>

<Property name="Latitude">
<Description>
documentation</Description>
<Type>%Float</Type>
</Property>

<Property name="Longitude">
<Description>
documentation</Description>
<Type>%Float</Type>
</Property>

<Property name="EquipmentId">
<Description>
Local value of EquipmentId, not reference to an EquipmentId, in case it changes to a different equipment</Description>
<Type>%Integer</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ASPMining.CanonicE4E6.OEMEventD</DataLocation>
<DefaultData>OEMEventDefaultData</DefaultData>
<IdLocation>^ASPMining.CanonicE4E6.OEMEventD</IdLocation>
<IndexLocation>^ASPMining.CanonicE4E6.OEMEventI</IndexLocation>
<StreamLocation>^ASPMining.CanonicE4E6.OEMEventS</StreamLocation>
<Data name="OEMEventDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>OEMEventType</Value>
</Value>
<Value name="3">
<Value>OEMInterface</Value>
</Value>
<Value name="4">
<Value>Shift</Value>
</Value>
<Value name="5">
<Value>Location</Value>
</Value>
<Value name="6">
<Value>ReadTime</Value>
</Value>
<Value name="7">
<Value>Value</Value>
</Value>
<Value name="8">
<Value>Latitude</Value>
</Value>
<Value name="9">
<Value>Longitude</Value>
</Value>
<Value name="10">
<Value>EquipmentId</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="ASPMining.CanonicalModel.HWMonitoring.OEMEventType">
<Super>%Persistent</Super>

<Property name="Description">
<Description>
documentation</Description>
<Type>%String</Type>
</Property>

<Property name="Other">
<Description>
documentation</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ASPMining.CanE4E6.OEMEventTypeD</DataLocation>
<DefaultData>OEMEventTypeDefaultData</DefaultData>
<IdLocation>^ASPMining.CanE4E6.OEMEventTypeD</IdLocation>
<IndexLocation>^ASPMining.CanE4E6.OEMEventTypeI</IndexLocation>
<StreamLocation>^ASPMining.CanE4E6.OEMEventTypeS</StreamLocation>
<Data name="OEMEventTypeDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Description</Value>
</Value>
<Value name="3">
<Value>Other</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="ASPMining.CanonicalModel.HWMonitoring.OEMInterface">
<Super>%Persistent</Super>

<Property name="Name">
<Description>
documentation</Description>
<Type>%String</Type>
</Property>

<Property name="Brand">
<Description>
documentation</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ASPMining.CanE4E6.OEMInterfaceD</DataLocation>
<DefaultData>OEMInterfaceDefaultData</DefaultData>
<IdLocation>^ASPMining.CanE4E6.OEMInterfaceD</IdLocation>
<IndexLocation>^ASPMining.CanE4E6.OEMInterfaceI</IndexLocation>
<StreamLocation>^ASPMining.CanE4E6.OEMInterfaceS</StreamLocation>
<Data name="OEMInterfaceDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Brand</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="ASPMining.CanonicalModel.HWMonitoring.OEMInterfaceMap">
<Super>%Persistent</Super>

<Property name="OEMInterface">
<Description>
documentation</Description>
<Type>OEMInterface</Type>
</Property>

<Property name="Equipment">
<Description>
documentation</Description>
<Type>ASPMining.CanonicalModel.Equipment.Equipment</Type>
</Property>

<Index name="OEMInterfaceIndex">
<Properties>OEMInterface</Properties>
<Unique>1</Unique>
</Index>

<Index name="EquipmentIndex">
<Properties>OEMInterface</Properties>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ASPMiningE4E6.OEMInterfac774FD</DataLocation>
<DefaultData>OEMInterfaceMapDefaultData</DefaultData>
<IdLocation>^ASPMiningE4E6.OEMInterfac774FD</IdLocation>
<IndexLocation>^ASPMiningE4E6.OEMInterfac774FI</IndexLocation>
<StreamLocation>^ASPMiningE4E6.OEMInterfac774FS</StreamLocation>
<Data name="OEMInterfaceMapDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>OEMInterface</Value>
</Value>
<Value name="3">
<Value>Equipment</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="ASPMining.CanonicalModel.Mine.Location">
<Description>
Narrow area inside a Site where events are generated from, e.g: Loading spot inside Site A.</Description>
<Super>%Persistent</Super>

<Property name="Grade">
<Description>
documentation</Description>
<Type>%Float</Type>
</Property>

<Property name="Site">
<Description>
documentation</Description>
<Type>Site</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ASPMining.Canonica2AE.LocationD</DataLocation>
<DefaultData>LocationDefaultData</DefaultData>
<IdLocation>^ASPMining.Canonica2AE.LocationD</IdLocation>
<IndexLocation>^ASPMining.Canonica2AE.LocationI</IndexLocation>
<StreamLocation>^ASPMining.Canonica2AE.LocationS</StreamLocation>
<Data name="LocationDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Grade</Value>
</Value>
<Value name="3">
<Value>Site</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="ASPMining.CanonicalModel.Mine.Site">
<Super>%Persistent</Super>

<Property name="Name">
<Description>
documentation</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ASPMining.CanonicalMod2AE.SiteD</DataLocation>
<DefaultData>SiteDefaultData</DefaultData>
<IdLocation>^ASPMining.CanonicalMod2AE.SiteD</IdLocation>
<IndexLocation>^ASPMining.CanonicalMod2AE.SiteI</IndexLocation>
<StreamLocation>^ASPMining.CanonicalMod2AE.SiteS</StreamLocation>
<Data name="SiteDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="ASPMining.CanonicalModel.Operation.StatusEvent">
<Description>
History of status changes of equipment or other elements</Description>
<Super>%Persistent</Super>

<Property name="Equipment">
<Description>
documentation</Description>
<Type>ASPMining.CanonicalModel.Equipment.Equipment</Type>
</Property>

<Property name="StatusReason">
<Description>
documentation</Description>
<Type>StatusReason</Type>
</Property>

<Property name="StatusType">
<Description>
documentation</Description>
<Type>StatusType</Type>
</Property>

<Property name="StartTime">
<Description>
documentation</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="EndTime">
<Description>
documentation</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="Duration">
<Description>
documentation</Description>
<Type>%Integer</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ASPMining.CanoB953.StatusEventD</DataLocation>
<DefaultData>StatusEventDefaultData</DefaultData>
<IdLocation>^ASPMining.CanoB953.StatusEventD</IdLocation>
<IndexLocation>^ASPMining.CanoB953.StatusEventI</IndexLocation>
<StreamLocation>^ASPMining.CanoB953.StatusEventS</StreamLocation>
<Data name="StatusEventDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Equipment</Value>
</Value>
<Value name="3">
<Value>StatusReason</Value>
</Value>
<Value name="4">
<Value>StatusType</Value>
</Value>
<Value name="5">
<Value>StartTime</Value>
</Value>
<Value name="6">
<Value>EndTime</Value>
</Value>
<Value name="7">
<Value>Duration</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="ASPMining.CanonicalModel.Operation.StatusReason">
<Description>
List of all possible status change code reasons</Description>
<Super>%Persistent</Super>

<Property name="Reason">
<Description>
documentation</Description>
<Type>%String</Type>
</Property>

<Property name="StatusType">
<Type>StatusType</Type>
</Property>

<Property name="Description">
<Type>%String</Type>
</Property>

<Index name="ReasonIndex">
<Properties>Reason</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ASPMining.CanB953.StatusReasonD</DataLocation>
<DefaultData>StatusReasonDefaultData</DefaultData>
<IdLocation>^ASPMining.CanB953.StatusReasonD</IdLocation>
<IndexLocation>^ASPMining.CanB953.StatusReasonI</IndexLocation>
<StreamLocation>^ASPMining.CanB953.StatusReasonS</StreamLocation>
<Data name="StatusReasonDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Reason</Value>
</Value>
<Value name="3">
<Value>Description</Value>
</Value>
<Value name="4">
<Value>StatusType</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="ASPMining.CanonicalModel.Operation.StatusType">
<Description>
Type of the status: Operative/Standby/Downtime/Delay</Description>
<Super>%Persistent</Super>

<Property name="Type">
<Description>
documentation</Description>
<Type>%String</Type>
</Property>

<Property name="Description">
<Type>%String</Type>
</Property>

<Index name="TypeIndex">
<Properties>Type</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ASPMining.CanonB953.StatusTypeD</DataLocation>
<DefaultData>StatusTypeDefaultData</DefaultData>
<IdLocation>^ASPMining.CanonB953.StatusTypeD</IdLocation>
<IndexLocation>^ASPMining.CanonB953.StatusTypeI</IndexLocation>
<StreamLocation>^ASPMining.CanonB953.StatusTypeS</StreamLocation>
<Data name="StatusTypeDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Type</Value>
</Value>
<Value name="3">
<Value>Description</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="ASPMining.CanonicalModel.Personnel.Crew">
<Description>
A crew is a label used for referencing Operator groups</Description>
<Super>%Persistent</Super>

<Property name="Name">
<Description>
documentation</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ASPMining.CanonicalMo1320.CrewD</DataLocation>
<DefaultData>CrewDefaultData</DefaultData>
<IdLocation>^ASPMining.CanonicalMo1320.CrewD</IdLocation>
<IndexLocation>^ASPMining.CanonicalMo1320.CrewI</IndexLocation>
<StreamLocation>^ASPMining.CanonicalMo1320.CrewS</StreamLocation>
<Data name="CrewDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Id</Value>
</Value>
<Value name="3">
<Value>Name</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="ASPMining.CanonicalModel.Personnel.CrewRegistry">
<Description>
Historic registry of all crews that have existed in the past and the Operators it had. This way, in case of a temporary change of operator in some Crew, this data will stay here.</Description>
<Super>%Persistent</Super>

<Property name="Crew">
<Description>
documentation</Description>
<Type>Crew</Type>
</Property>

<Property name="OperatorList">
<Description>
documentation</Description>
<Type>%Library.ArrayOfObjects</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ASPMining.Can1320.CrewRegistryD</DataLocation>
<DefaultData>CrewRegistryDefaultData</DefaultData>
<IdLocation>^ASPMining.Can1320.CrewRegistryD</IdLocation>
<IndexLocation>^ASPMining.Can1320.CrewRegistryI</IndexLocation>
<StreamLocation>^ASPMining.Can1320.CrewRegistryS</StreamLocation>
<Data name="CrewRegistryDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Id</Value>
</Value>
<Value name="3">
<Value>OperatorList</Value>
</Value>
<Value name="4">
<Value>Crew</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="ASPMining.CanonicalModel.Personnel.Operator">
<Super>%Persistent</Super>

<Property name="Crew">
<Description>
documentation</Description>
<Type>Crew</Type>
</Property>

<Property name="FirstName">
<Description>
documentation</Description>
<Type>%String</Type>
</Property>

<Property name="LastName">
<Description>
documentation</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ASPMining.Canonic1320.OperatorD</DataLocation>
<DefaultData>OperatorDefaultData</DefaultData>
<IdLocation>^ASPMining.Canonic1320.OperatorD</IdLocation>
<IndexLocation>^ASPMining.Canonic1320.OperatorI</IndexLocation>
<StreamLocation>^ASPMining.Canonic1320.OperatorS</StreamLocation>
<Data name="OperatorDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Id</Value>
</Value>
<Value name="3">
<Value>Crew</Value>
</Value>
<Value name="4">
<Value>OperatorName</Value>
</Value>
<Value name="5">
<Value>FirstName</Value>
</Value>
<Value name="6">
<Value>LastName</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="ASPMining.CanonicalModel.Planning.Shift">
<Super>%Persistent</Super>

<Property name="Date">
<Description>
documentation</Description>
<Type>%DateTime</Type>
</Property>

<Property name="ShiftType">
<Description>
documentation</Description>
<Type>ShiftType</Type>
</Property>

<Property name="StartTime">
<Description>
documentation</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="Year">
<Description>
documentation</Description>
<Type>%Integer</Type>
</Property>

<Property name="Month">
<Description>
documentation</Description>
<Type>%Integer</Type>
</Property>

<Property name="Day">
<Description>
documentation</Description>
<Type>%Integer</Type>
</Property>

<Property name="DayNight">
<Description>
documentation</Description>
<Type>%Integer</Type>
</Property>

<Property name="Crew">
<Description>
documentation</Description>
<Type>ASPMining.CanonicalModel.Equipment.Equipment</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ASPMining.CanonicalMB953.ShiftD</DataLocation>
<DefaultData>ShiftDefaultData</DefaultData>
<IdLocation>^ASPMining.CanonicalMB953.ShiftD</IdLocation>
<IndexLocation>^ASPMining.CanonicalMB953.ShiftI</IndexLocation>
<StreamLocation>^ASPMining.CanonicalMB953.ShiftS</StreamLocation>
<Data name="ShiftDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ShiftId</Value>
</Value>
<Value name="3">
<Value>StartTime</Value>
</Value>
<Value name="4">
<Value>Year</Value>
</Value>
<Value name="5">
<Value>Month</Value>
</Value>
<Value name="6">
<Value>Day</Value>
</Value>
<Value name="7">
<Value>DayNight</Value>
</Value>
<Value name="8">
<Value>Crew</Value>
</Value>
<Value name="9">
<Value>Id</Value>
</Value>
<Value name="10">
<Value>Date</Value>
</Value>
<Value name="11">
<Value>ShiftType</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="ASPMining.CanonicalModel.Planning.ShiftType">
<Description>
Types of shifts have a basic schedule day/night, and can have some extra information like holyday information</Description>
<Super>%Persistent</Super>

<Property name="Type">
<Description>
documentation</Description>
<Type>%String</Type>
</Property>

<Property name="Other">
<Description>
documentation</Description>
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ASPMining.CanoniFD10.ShiftTypeD</DataLocation>
<DefaultData>ShiftTypeDefaultData</DefaultData>
<IdLocation>^ASPMining.CanoniFD10.ShiftTypeD</IdLocation>
<IndexLocation>^ASPMining.CanoniFD10.ShiftTypeI</IndexLocation>
<StreamLocation>^ASPMining.CanoniFD10.ShiftTypeS</StreamLocation>
<Data name="ShiftTypeDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Type</Value>
</Value>
<Value name="3">
<Value>Other</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="ASPMining.CanonicalModel.Production.DumpEvent">
<Super>%Persistent</Super>

<Property name="Shift">
<Description>
documentation</Description>
<Type>ASPMining.CanonicalModel.Planning.Shift</Type>
</Property>

<Property name="Location">
<Description>
documentation</Description>
<Type>ASPMining.CanonicalModel.Mine.Location</Type>
</Property>

<Property name="EquipmentTruck">
<Description>
documentation</Description>
<Type>ASPMining.CanonicalModel.Equipment.Equipment</Type>
</Property>

<Property name="EquipmentExcav">
<Description>
documentation</Description>
<Type>ASPMining.CanonicalModel.Equipment.Equipment</Type>
</Property>

<Property name="OperatorTruck">
<Description>
documentation</Description>
<Type>ASPMining.CanonicalModel.Personnel.Operator</Type>
</Property>

<Property name="OperatorExcav">
<Description>
documentation</Description>
<Type>ASPMining.CanonicalModel.Personnel.Operator</Type>
</Property>

<Property name="Latitude">
<Description>
documentation</Description>
<Type>%Float</Type>
</Property>

<Property name="Longitude">
<Description>
documentation</Description>
<Type>%Float</Type>
</Property>

<Property name="MeasuredTons">
<Description>
documentation</Description>
<Type>%Float</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ASPMining.Canoni4037.DumpEventD</DataLocation>
<DefaultData>DumpEventDefaultData</DefaultData>
<IdLocation>^ASPMining.Canoni4037.DumpEventD</IdLocation>
<IndexLocation>^ASPMining.Canoni4037.DumpEventI</IndexLocation>
<StreamLocation>^ASPMining.Canoni4037.DumpEventS</StreamLocation>
<Data name="DumpEventDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Shift</Value>
</Value>
<Value name="3">
<Value>Location</Value>
</Value>
<Value name="4">
<Value>EquipmentTruck</Value>
</Value>
<Value name="5">
<Value>EquipmentExcav</Value>
</Value>
<Value name="6">
<Value>OperatorTruck</Value>
</Value>
<Value name="7">
<Value>OperatorExcav</Value>
</Value>
<Value name="8">
<Value>Latitude</Value>
</Value>
<Value name="9">
<Value>Longitude</Value>
</Value>
<Value name="10">
<Value>MeasuredTons</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="ASPMining.CanonicalModel.Production.LoadEvent">
<Super>%Persistent</Super>

<Property name="Shift">
<Description>
documentation</Description>
<Type>ASPMining.CanonicalModel.Planning.Shift</Type>
</Property>

<Property name="Location">
<Description>
documentation</Description>
<Type>ASPMining.CanonicalModel.Mine.Location</Type>
</Property>

<Property name="EquipmentTruck">
<Description>
documentation</Description>
<Type>ASPMining.CanonicalModel.Equipment.Equipment</Type>
</Property>

<Property name="EquipmentExcav">
<Description>
documentation</Description>
<Type>ASPMining.CanonicalModel.Equipment.Equipment</Type>
</Property>

<Property name="OperatorTruck">
<Description>
documentation</Description>
<Type>ASPMining.CanonicalModel.Personnel.Operator</Type>
</Property>

<Property name="OperatorExcav">
<Description>
documentation</Description>
<Type>ASPMining.CanonicalModel.Personnel.Operator</Type>
</Property>

<Property name="Latitude">
<Description>
documentation</Description>
<Type>%Float</Type>
</Property>

<Property name="Longitude">
<Description>
documentation</Description>
<Type>%Float</Type>
</Property>

<Property name="MeasuredTons">
<Description>
documentation</Description>
<Type>%Float</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ASPMining.Canoni4037.LoadEventD</DataLocation>
<DefaultData>LoadEventDefaultData</DefaultData>
<IdLocation>^ASPMining.Canoni4037.LoadEventD</IdLocation>
<IndexLocation>^ASPMining.Canoni4037.LoadEventI</IndexLocation>
<StreamLocation>^ASPMining.Canoni4037.LoadEventS</StreamLocation>
<Data name="LoadEventDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Shift</Value>
</Value>
<Value name="3">
<Value>Location</Value>
</Value>
<Value name="4">
<Value>EquipmentTruck</Value>
</Value>
<Value name="5">
<Value>EquipmentExcav</Value>
</Value>
<Value name="6">
<Value>OperatorTruck</Value>
</Value>
<Value name="7">
<Value>OperatorExcav</Value>
</Value>
<Value name="8">
<Value>Latitude</Value>
</Value>
<Value name="9">
<Value>Longitude</Value>
</Value>
<Value name="10">
<Value>MeasuredTons</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="IRISAnalytics.Task.SaveFiles">
<IncludeCode>%sySystem</IncludeCode>
<Super>IRISDemo.Util.BaseTask,%SYS.Task.Definition</Super>

<Parameter name="TaskName">
<Default>Save IRIS Analytics Pivots and Dashboards to external volume</Default>
</Parameter>

<Property name="Folder">
<Type>%String</Type>
<InitialExpression>"/tmp/iris-analytics"</InitialExpression>
</Property>

<Method name="OnTaskExecution">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		Set tSC = $$$OK
		Try
		{
			Set tFile = ##class(%File).NormalizeFilename("iris-analytics-artifacts.xml", ..Folder)
			
            Do ..Log("Saving IRIS analytics files to "_tFile)
            Set tSC=$system.OBJ.Export("*.DFI", tFile)
            Quit:$$$ISERR(tSC)
		}
		Catch(Exception)
		{
			Set tSC = Exception.AsStatus()
		}
		
        If $System.Status.IsError(tSC)
        {
             Do ..LogStatus(tSC, "OnTaskExecution")
        }

		Quit $$$OK // I don't want my task to stop because of an error that may be temporary
]]></Implementation>
</Method>
</Class>
<Class name="IRISConfig.Installer">
<IncludeCode>%occInclude</IncludeCode>
<Super>IRISConfig.InstallerBase</Super>

<Method name="CreateCredentials">
<Description>
This method will create an Interoperability credential meant to be used on Interoperability Productions.
It will use the standard SuperUser/sys password for demos.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pNamespace:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try
	{
		Set tNS=$Namespace
		ZN pNamespace
		
		Set tSC = ##class(Ens.Config.Credentials).SetCredential("SampleDispatch", "SuperUser", "sys", 1)
		Set tSC2 = ##class(Ens.Config.Credentials).SetCredential("MineCareCredentials", "SA", "Minecare1", 1)
		Set tSC3 = ##class(Ens.Config.Credentials).SetCredential("PowerViewCredentials", "iris", "oee", 1)
		Quit:$System.Status.IsError(tSC)
	}
	Catch (oException)
	{
		Set tSC = oException.AsStatus()
	}
	
	ZN tNS
	
	Quit tSC 
]]></Implementation>
</Method>

<Method name="LoadTransactionalData">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNamespace:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try
	{
		ZN pNamespace
				
		//Do ##class(IRISDemo.Data.Utils).LoadData()
		
		Do ##class(SampleDispatch.Utils).LoadEverything()
		
		/// All possible events that were triggered when we loaded the demo data
		/// must be deleted. 
		//Kill ^IRISDemo.BS.AppTrigger.Service
		
		/// The production will be started automatically when this image is started as a normal container.
	}
	Catch (oException)
	{
		Set tSC = oException.AsStatus()
	}
	
	ZN "%SYS"
	
	Quit tSC 
]]></Implementation>
</Method>

<Method name="BuildCubeAndEnableCubeRegistry">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNamespace:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try
	{
		ZN pNamespace
			
		Set tSC = ##class(%DeepSee.CubeManager.Utils).SetActiveRegistry("OEE.Cube.Registry", 1)
		Quit:$$$ISERR(tSC)
		
		Set tSC = ##class(%DeepSee.CubeManager.Utils).BuildAllRegisteredGroups()
	}
	Catch (oException)
	{
		Set tSC = oException.AsStatus()
	}
	
	ZN "%SYS"
	
	Quit tSC 
]]></Implementation>
</Method>

<XData name="Install">
<Description>
You can customize this to run code during docker build</Description>
<XMLNamespace>INSTALLER</XMLNamespace>
<Data><![CDATA[
<Manifest>
	<Namespace Name="${Namespace}" Create="no"> 
		<IfDef Var="SourceDir">
            <Log Text="SourceDir defined - offline install from ${SourceDir}" Level="0"/>
            <Import File="${SourceDir}" Recurse="true"/>
            
			<Log Text="Creating Task to save IRIS Analytic files to external volume..." Level="0"/>
			<Invoke Class="IRISAnalytics.Task.SaveFiles" Method="Create" CheckStatus="true"/>

        </IfDef>
                
	</Namespace>
	
	<Log Text="Loading transactional data..." Level="0"/>
	<Invoke Class="IRISConfig.Installer" Method="LoadTransactionalData" CheckStatus="true">
		<Arg name="pNamespace" Value="${Namespace}"/>
	</Invoke>
	
	<Log Text="Creating credentials..." Level="0"/>
	<Invoke Class="IRISConfig.Installer" Method="CreateCredentials" CheckStatus="true">
		<Arg name="pNamespace" Value="${Namespace}"/>
	</Invoke>
	
	<Log Text="Building cube and enabling cube registry..." Level="0"/>
	<Invoke Class="IRISConfig.Installer" Method="BuildCubeAndEnableCubeRegistry" CheckStatus="true">
		<Arg name="pNamespace" Value="${Namespace}"/>
	</Invoke>
	
</Manifest>]]></Data>
</XData>
</Class>
<Class name="IRISDemo.Cube.TimeSlice">
<Description>
</Description>
<Super>%DeepSee.CubeDefinition</Super>
<DependsOn>IRISDemo.Data.TimeSlice</DependsOn>

<XData name="Cube">
<Description>
Cube definition from Architect.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube xmlns="http://www.intersystems.com/deepsee" name="TimeSlice" displayName="TimeSlice" disabled="false" abstract="false" sourceClass="IRISDemo.Data.TimeSlice" countMeasureName="%COUNT" countMeasureCaption="Number of Timeslice records" bucketSize="8" bitmapChunkInMemory="false" precompute="0" disableListingGroups="false" enableSqlRestrict="false">
  <dimension name="StartTime" disabled="false" hasAll="false" allCaption="All StartTime" allDisplayName="StartTime" sourceProperty="StartTime" type="time" calendar="gregorian" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false" hidden="false">
      <level name="StartMonth" disabled="false" timeFunction="MonthYear" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
      <level name="StartDate" disabled="false" timeFunction="DayMonthYear" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
      <level name="StartHour" disabled="false" timeFunction="HourNumber" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
    </hierarchy>
  </dimension>
  <dimension name="ItemCode" disabled="false" hasAll="false" allCaption="All ItemCode" allDisplayName="ItemCode" type="data" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false" hidden="false">
      <level name="ItemCode" disabled="false" sourceProperty="ItemMaster.ItemCode" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
    </hierarchy>
  </dimension>
  <dimension name="ProductionOrder" disabled="false" hasAll="false" allCaption="All ProductionOrder" allDisplayName="ProductionOrder" type="data" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false" hidden="false">
      <level name="ProductionOrder" disabled="false" sourceProperty="ProductionOrder.ProductionOrder" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
    </hierarchy>
  </dimension>
  <dimension name="Downtime" disabled="false" hasAll="false" allCaption="All ReasonCategory" allDisplayName="ReasonCategory" type="data" calendar="gregorian" iKnowType="entity" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false" hidden="false">
      <level name="ReasonCategory" disabled="false" sourceProperty="DowntimeEvent.ReasonCategory" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
      <level name="ReasonCode" disabled="false" sourceProperty="DowntimeEvent.ReasonCode" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
    </hierarchy>
  </dimension>
  <measure name="WasteCount" disabled="false" sourceProperty="WasteCounts.WasteCount" aggregate="SUM" type="number" hidden="false" searchable="false">
  </measure>
  <measure name="ProductionCount" disabled="false" sourceProperty="ProductionCounts.ProductionCount" aggregate="SUM" type="number" hidden="false" searchable="false">
  </measure>
  <measure name="FaultTime" disabled="false" sourceProperty="FaultTime" aggregate="SUM" type="number" hidden="false" searchable="false">
  </measure>
  <measure name="UnavailableTime" disabled="false" sourceProperty="UnavailableTime" aggregate="SUM" type="number" hidden="false" searchable="false">
  </measure>
  <measure name="OutsideAreaTime" disabled="false" sourceProperty="OutsideAreaTime" aggregate="SUM" type="number" hidden="false" searchable="false">
  </measure>
  <measure name="CalendarTime" disabled="false" sourceProperty="CalendarTime" aggregate="SUM" type="number" hidden="false" searchable="false">
  </measure>
  <measure name="ItemRate" disabled="false" sourceProperty="ItemMaster.ItemRate" aggregate="SUM" type="number" hidden="false" searchable="false">
  </measure>
  <calculatedMember name="OperatingTime" disabled="false" dimension="Measures" valueExpression="[Measures].[LoadedTime] - [Measures].[FaultTime]" hidden="false">
  </calculatedMember>
  <calculatedMember name="Availability" disabled="false" dimension="Measures" valueExpression="([Measures].[OperatingTime]/[Measures].[LoadedTime])" formatString="##.##%" hidden="false">
  </calculatedMember>
  <calculatedMember name="LoadedTime" disabled="false" dimension="Measures" valueExpression="[Measures].[CalendarTime] - [Measures].[UnavailableTime] - [Measures].[OutsideAreaTime]" hidden="false">
  </calculatedMember>
  <calculatedMember name="Quality" disabled="false" dimension="Measures" valueExpression="([Measures].[ProductionCount]/( [Measures].[ProductionCount] +  [Measures].[WasteCount]))" formatString="##.##%" hidden="false">
  </calculatedMember>
  <listing name="Availability Details" disabled="false" listingType="table" fieldList="StartTime,EndTime,FaultTime,CalendarTime,OutsideAreaTime,UnavailableTime" orderBy="StartTime ASC">
  </listing>
</cube>]]></Data>
</XData>

<Parameter name="DOMAIN">
</Parameter>
</Class>
<Class name="IRISDemo.Data.DowntimeEvents">
<Super>%Persistent</Super>

<Property name="ProductionOrder">
<Type>ProductionOrderChange</Type>
<Required>1</Required>
</Property>

<ForeignKey name="ProductionOrderFK">
<Properties>ProductionOrder</Properties>
<ReferencedClass>ProductionOrderChange</ReferencedClass>
</ForeignKey>

<Property name="StartTime">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="ReasonCode">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="ReasonCategory">
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode> Set {*}=##class(IRISDemo.Data.DowntimeEvents).ComputeCategory({ReasonCode})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="EndTime">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Index name="StartTimeIDX">
<Properties>StartTime</Properties>
</Index>

<Index name="EndTimeIDX">
<Properties>EndTime</Properties>
</Index>

<Trigger name="UpdateCube">
<Code>
	set downtimeID={ID}
	set sql="SELECT ID FROM TimeSlice where DowntimeEvent=?"
	set rs=##class(%SQL.Statement).%ExecDirect(,sql,downtimeID)
	while rs.%Next()
	{
		do ##class(%DeepSee.Utils).%ProcessFact("TimeSlice",rs.%Get("ID"))
		
		/*
	
		Alternatively add the IDs to the list of things to be done
		which will be picked up on the next Cube synchronization (configurable)
	
		do ##class(%DeepSee.Utils).%SetDSTime("IRISDemo.Data.TimeSlice",rs.%Get("ID"),0)
	
		*/
		
	}
</Code>
<Event>UPDATE</Event>
<Time>AFTER</Time>
<Foreach>row/object</Foreach>
</Trigger>

<Method name="ComputeCategory">
<ClassMethod>1</ClassMethod>
<FormalSpec>pReasonCode:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
		Set tCat = $Case(pReasonCode, "Blocked":"Unit Restraint",
									  "Fallen Material":"Performance",
									  "Holiday":"Unavailable",
									  "No Electricity":"Unit Restraint",
									  "No Orders":"Unavailable",
									  "Not Scheduled":"Unavailable",
									  "Starved":"Unit Restraint",
									  :"Fault")
		
		Quit tCat
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^IRISDemo.Data.DowntimeEventsD</DataLocation>
<DefaultData>DowntimeEventsDefaultData</DefaultData>
<IdLocation>^IRISDemo.Data.DowntimeEventsD</IdLocation>
<IndexLocation>^IRISDemo.Data.DowntimeEventsI</IndexLocation>
<StreamLocation>^IRISDemo.Data.DowntimeEventsS</StreamLocation>
<Data name="DowntimeEventsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ProductionOrder</Value>
</Value>
<Value name="3">
<Value>StartTime</Value>
</Value>
<Value name="4">
<Value>ReasonCode</Value>
</Value>
<Value name="5">
<Value>EndTime</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="IRISDemo.Data.ItemMaster">
<Super>%Persistent</Super>

<Property name="ItemCode">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Index name="ItemCodeIndex">
<Properties>ItemCode</Properties>
<Unique>1</Unique>
</Index>

<Property name="ItemRate">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^IRISDemo.Data.ItemMasterD</DataLocation>
<DefaultData>ItemMasterDefaultData</DefaultData>
<IdLocation>^IRISDemo.Data.ItemMasterD</IdLocation>
<IndexLocation>^IRISDemo.Data.ItemMasterI</IndexLocation>
<StreamLocation>^IRISDemo.Data.ItemMasterS</StreamLocation>
<Data name="ItemMasterDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ItemCode</Value>
</Value>
<Value name="3">
<Value>ItemRate</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="IRISDemo.Data.ProductionCounts">
<Super>%Persistent</Super>

<Property name="ProductionOrder">
<Type>ProductionOrderChange</Type>
<Required>1</Required>
</Property>

<ForeignKey name="ProductionOrderFK">
<Properties>ProductionOrder</Properties>
<ReferencedClass>ProductionOrderChange</ReferencedClass>
</ForeignKey>

<Property name="ProductionCount">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="StartTime">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="EndTime">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Index name="StartTimeIDX">
<Properties>StartTime</Properties>
</Index>

<Index name="EndTimeIDX">
<Properties>EndTime</Properties>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^IRISDemo.Data.ProductionCA81DD</DataLocation>
<DefaultData>ProductionCountsDefaultData</DefaultData>
<IdLocation>^IRISDemo.Data.ProductionCA81DD</IdLocation>
<IndexLocation>^IRISDemo.Data.ProductionCA81DI</IndexLocation>
<StreamLocation>^IRISDemo.Data.ProductionCA81DS</StreamLocation>
<Data name="ProductionCountsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>StartTime</Value>
</Value>
<Value name="3">
<Value>EndTime</Value>
</Value>
<Value name="4">
<Value>ProductionCount</Value>
</Value>
<Value name="5">
<Value>ProductionOrder</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="IRISDemo.Data.ProductionOrderChange">
<IncludeCode>DEMOMACROS</IncludeCode>
<Super>%Persistent</Super>

<Property name="ProductionOrder">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="ItemMaster">
<Type>ItemMaster</Type>
<Required>1</Required>
</Property>

<ForeignKey name="ItemMasterFK">
<Properties>ItemMaster</Properties>
<ReferencedClass>ItemMaster</ReferencedClass>
</ForeignKey>

<Property name="StartTime">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="EndTime">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Index name="StartTimeIDX">
<Properties>StartTime</Properties>
</Index>

<Index name="EndTimeIDX">
<Properties>EndTime</Properties>
</Index>

<Method name="FindByTimeInterval">
<ClassMethod>1</ClassMethod>
<FormalSpec>pStartTime:%TimeStamp,pEndTime:%TimeStamp</FormalSpec>
<ReturnType>IRISDemo.Data.ProductionOrderChange</ReturnType>
<Implementation><![CDATA[
		Set id=""
		
		&SQL(select ID into :id from ProductionOrderChange where :pStartTime>=StartTime and :pEndTime<=EndTime)
		$$$ThrowSQLExceptionIfError("ProductionOrderChangeFindByTimeIntervalException")
		
		Quit ..%OpenId(id)
]]></Implementation>
</Method>

<Method name="CreateFake">
<ClassMethod>1</ClassMethod>
<FormalSpec>pStartTime:%TimeStamp,pEndTime:%TimeStamp</FormalSpec>
<ReturnType>IRISDemo.Data.ProductionOrderChange</ReturnType>
<Implementation><![CDATA[
		Set obj = ..%New()
		Set obj.StartTime = pStartTime
		Set obj.EndTime = pEndTime
		Set obj.ProductionOrder=-$Increment(^Fake.ProductionOrderChange)
		Set obj.ItemMaster = ##class(IRISDemo.Data.ItemMaster).ItemCodeIndexOpen("-1")
		If obj.ItemMaster=""
		{
			Set obj.ItemMaster = ##class(IRISDemo.Data.ItemMaster).%New()
			Set obj.ItemMaster.ItemCode=-1
			Set obj.ItemMaster.ItemRate=0
		}
		
		Set tSC = obj.%Save(1)
		$$$ThrowStatusExceptionIfError(tSC, "CreateFakeSaveException")
		
		Quit obj
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^IRISDemo.Data.ProductionOBD74D</DataLocation>
<DefaultData>ProductionOrderChangeDefaultData</DefaultData>
<IdLocation>^IRISDemo.Data.ProductionOBD74D</IdLocation>
<IndexLocation>^IRISDemo.Data.ProductionOBD74I</IndexLocation>
<StreamLocation>^IRISDemo.Data.ProductionOBD74S</StreamLocation>
<Data name="ProductionOrderChangeDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>StartTime</Value>
</Value>
<Value name="3">
<Value>EndTime</Value>
</Value>
<Value name="4">
<Value>ProductionOrder</Value>
</Value>
<Value name="5">
<Value>ItemMaster</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="IRISDemo.Data.TimeSlice">
<Super>%Persistent</Super>

<Parameter name="DSTIME">
<Default>AUTO</Default>
</Parameter>

<Property name="StartTime">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="EndTime">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="ProductionCounts">
<Type>ProductionCounts</Type>
</Property>

<Property name="WasteCounts">
<Type>WasteCounts</Type>
</Property>

<Property name="DowntimeEvent">
<Type>DowntimeEvents</Type>
</Property>

<Property name="ItemMaster">
<Type>ItemMaster</Type>
<Calculated>1</Calculated>
<SqlComputeCode> Set {*}=##class(IRISDemo.Data.TimeSlice).ComputeItemMaster({ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="ProductionOrder">
<Type>ProductionOrderChange</Type>
<Calculated>1</Calculated>
<SqlComputeCode> Set {*}=##class(IRISDemo.Data.TimeSlice).ComputeProductionOrder({ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<ForeignKey name="ProductionCountsFK">
<Properties>ProductionCounts</Properties>
<ReferencedClass>ProductionCounts</ReferencedClass>
</ForeignKey>

<ForeignKey name="WasteCountsFK">
<Properties>WasteCounts</Properties>
<ReferencedClass>WasteCounts</ReferencedClass>
</ForeignKey>

<ForeignKey name="DowntimeEventFK">
<Properties>DowntimeEvent</Properties>
<ReferencedClass>DowntimeEvents</ReferencedClass>
</ForeignKey>

<ForeignKey name="ItemMasterFK">
<Properties>ItemMaster</Properties>
<ReferencedClass>ItemMaster</ReferencedClass>
</ForeignKey>

<ForeignKey name="ProductionOrderFK">
<Properties>ProductionOrder</Properties>
<ReferencedClass>ProductionOrderChange</ReferencedClass>
</ForeignKey>

<Property name="CalendarTime">
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode> 	
		Set {*} = ##class(IRISDemo.Data.TimeSlice).ComputeCalendarTime({StartTime}, {EndTime})
		</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="FaultTime">
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode> 	
		Set {*} = ##class(IRISDemo.Data.TimeSlice).ComputeFaultTime({ID})
		</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="UnavailableTime">
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode> 	
		Set {*} = ##class(IRISDemo.Data.TimeSlice).ComputeUnavailableTime({ID})
		</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="OutsideAreaTime">
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode> 	
		Set {*} = ##class(IRISDemo.Data.TimeSlice).ComputeOutsideAreaTime({ID})
		</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Index name="DowntimeEventIndex">
<Properties>DowntimeEvent</Properties>
</Index>

<Method name="ComputeFaultTime">
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
		Set obj = ..%OpenId(pID)
		Set iDuration=0

		If (obj.DowntimeEvent'="") && (obj.DowntimeEvent.ReasonCategory="Fault")
		{
			Set iDuration=$System.SQL.DATEDIFF("ss", obj.StartTime, obj.EndTime)
		}
		
		Quit iDuration
]]></Implementation>
</Method>

<Method name="ComputeOutsideAreaTime">
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
		Set obj = ..%OpenId(pID)
		Set iDuration=0

		If (obj.DowntimeEvent'="") && (obj.DowntimeEvent.ReasonCategory="Unit Restraint")
		{
			Set iDuration=$System.SQL.DATEDIFF("ss", obj.StartTime, obj.EndTime)
		}
		
		Quit iDuration
]]></Implementation>
</Method>

<Method name="ComputeCalendarTime">
<ClassMethod>1</ClassMethod>
<FormalSpec>pStartDate:%TimeStamp,pEndDate:%TimeStamp</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
		Set iDuration=$System.SQL.DATEDIFF("ss", pStartDate, pEndDate)
		
		Quit iDuration
]]></Implementation>
</Method>

<Method name="ComputeUnavailableTime">
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
		Set obj = ..%OpenId(pID)
		Set iDuration=0

		If (obj.DowntimeEvent'="") && (obj.DowntimeEvent.ReasonCategory="Unavailable")
		{
			Set iDuration=$System.SQL.DATEDIFF("ss", obj.StartTime, obj.EndTime)
		}
		
		Quit iDuration
]]></Implementation>
</Method>

<Method name="ComputeItemMaster">
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
		Set obj = ..%OpenId(pID)
		If obj.ProductionCounts'="" Quit obj.ProductionCounts.ProductionOrder.ItemMaster.%Id()
		If obj.WasteCounts'="" Quit obj.WasteCounts.ProductionOrder.ItemMaster.%Id()
		If obj.DowntimeEvent'="" Quit obj.DowntimeEvent.ProductionOrder.ItemMaster.%Id()
		
		Quit ""
]]></Implementation>
</Method>

<Method name="ComputeProductionOrder">
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
		Set obj = ..%OpenId(pID)
		If obj.ProductionCounts'="" Quit obj.ProductionCounts.ProductionOrder.%Id()
		If obj.WasteCounts'="" Quit obj.WasteCounts.ProductionOrder.%Id()
		If obj.DowntimeEvent'="" Quit obj.DowntimeEvent.ProductionOrder.%Id()
		
		Quit ""
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^IRISDemo.Data.TimeSliceD</DataLocation>
<DefaultData>TimeSliceDefaultData</DefaultData>
<IdLocation>^IRISDemo.Data.TimeSliceD</IdLocation>
<IndexLocation>^IRISDemo.Data.TimeSliceI</IndexLocation>
<StreamLocation>^IRISDemo.Data.TimeSliceS</StreamLocation>
<Data name="TimeSliceDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>StartTime</Value>
</Value>
<Value name="3">
<Value>EndTime</Value>
</Value>
<Value name="4">
<Value>ProductionCounts</Value>
</Value>
<Value name="5">
<Value>WasteCounts</Value>
</Value>
<Value name="6">
<Value>DowntimeEvent</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="IRISDemo.Data.Utils">
<IncludeCode>DEMOMACROS</IncludeCode>

<Method name="LoadData">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
		Do ..LoadItemMaster()
		
		Do ..LoadProductionOrderChanges()
		
		Do ..LoadProductionCounts()
		
		Do ..LoadWasteCounts()
		
		Do ..LoadDowntimeEvents()
		
		Do ..ConfigEnvironment()


]]></Implementation>
</Method>

<Method name="LoadItemMaster">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
		#Dim objRs As %Library.ResultSet
		#Dim objPatient As Patient
		
		set objRs = ##class(%Library.ResultSet).%New("IRISDemo.Util.FileReader:CSV")

		Set tSC = objRs.Execute("/tmp/ItemMaster.csv") 
		$$$ThrowStatusExceptionIfError(tSC, "LoadItemMasterFileException")
		
		While objRs.Next() 
		{
			Do ..CreateItemMaster(objRs.Get("ItemCode"), objRs.Get("ItemRate"))
		}
]]></Implementation>
</Method>

<Method name="CreateItemMaster">
<ClassMethod>1</ClassMethod>
<FormalSpec>pItemCode:%String,pItemRate:%Integer</FormalSpec>
<Implementation><![CDATA[
		set obj = ##class(IRISDemo.Data.ItemMaster).%New()
		
		Set obj.ItemCode = pItemCode
		Set obj.ItemRate = pItemRate
		
		Set tSC = obj.%Save()
		$$$ThrowStatusExceptionIfError(tSC, "ItemMasterSaveException")
]]></Implementation>
</Method>

<Method name="LoadProductionOrderChanges">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
		#Dim objRs As %Library.ResultSet
		#Dim objPatient As Patient
		
		set objRs = ##class(%Library.ResultSet).%New("IRISDemo.Util.FileReader:CSV")

		Set tSC = objRs.Execute("/tmp/ProductionOrderChanges.csv") 
		$$$ThrowStatusExceptionIfError(tSC, "LoadItemMasterFileException")
		
		While objRs.Next() 
		{
			set obj = ##class(IRISDemo.Data.ProductionOrderChange).%New()
			
			Set obj.StartTime = ..FixTimeStamp(objRs.Get("StartTime"))
			Set obj.EndTime = ..FixTimeStamp(objRs.Get("EndTime"))
			Set obj.ProductionOrder = objRs.Get("ProductionOrder")
			Set obj.ItemMaster = ##class(IRISDemo.Data.ItemMaster).ItemCodeIndexOpen(objRs.Get("ItemCode"))
			
			If obj.ItemMaster="" 
			{
				Write !!,"WARNING: ItemCode not found: "_objRs.Get("ItemCode")_". Creating ItemMaster",!!
				
				Do ..CreateItemMaster(objRs.Get("ItemCode") , -1)
				
				Set obj.ItemMaster = ##class(IRISDemo.Data.ItemMaster).ItemCodeIndexOpen(objRs.Get("ItemCode"))
			}
			
			Set tSC = obj.%Save()
			$$$ThrowStatusExceptionIfError(tSC, "ProductionOrderChangesSaveException")
		}
]]></Implementation>
</Method>

<Method name="LoadProductionCounts">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
		#Dim objRs As %Library.ResultSet
		#Dim objPatient As Patient
		
		set objRs = ##class(%Library.ResultSet).%New("IRISDemo.Util.FileReader:CSV")

		Set tSC = objRs.Execute("/tmp/ProductionCounts.csv") 
		$$$ThrowStatusExceptionIfError(tSC, "LoadProductionCountsFileException")
		
		While objRs.Next() 
		{
			set obj = ##class(IRISDemo.Data.ProductionCounts).%New()
			
			Set obj.StartTime = ..FixTimeStamp(objRs.Get("StartTime"))
			Set obj.EndTime = ..FixTimeStamp(objRs.Get("EndTime"))
			Set obj.ProductionCount = objRs.Get("ProductionCount")
			Set obj.ProductionOrder = ##class(IRISDemo.Data.ProductionOrderChange).FindByTimeInterval(obj.StartTime, obj.EndTime)
			
			If obj.ProductionOrder=""
			{
				Write !!,"WARNING: Could not find a production order change for loading this PRODUCTION for this time interval: '"_obj.StartTime_ "' and '"_obj.EndTime_"'"
				Write !,$Char(9),"Creating fake Production Order... "
				
				Set obj.ProductionOrder = ##class(IRISDemo.Data.ProductionOrderChange).CreateFake(obj.StartTime, obj.EndTime)
				
				If obj.ProductionOrder=""
				{
					Write "Could not create a fake one! Skipping this record.",!
					Continue
				}
				Else
				{
					Write "Done!",!
				}
			}
						
			Set tSC = obj.%Save()
			$$$ThrowStatusExceptionIfError(tSC, "ProductionCountsSaveException")
			
			Set objTimeSlice = ##class(IRISDemo.Data.TimeSlice).%New()
			Set objTimeSlice.ProductionCounts = obj
			Set objTimeSlice.StartTime = obj.StartTime
			Set objTimeSlice.EndTime = obj.EndTime
			
			Set tSC = objTimeSlice.%Save()
			$$$ThrowStatusExceptionIfError(tSC, "ProductionTimeSliceSaveException")
		}
]]></Implementation>
</Method>

<Method name="LoadWasteCounts">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
		#Dim objRs As %Library.ResultSet
		#Dim objPatient As Patient
		
		set objRs = ##class(%Library.ResultSet).%New("IRISDemo.Util.FileReader:CSV")

		Set tSC = objRs.Execute("/tmp/WasteCounts.csv") 
		$$$ThrowStatusExceptionIfError(tSC, "LoadWasteCountsFileException")
		
		While objRs.Next() 
		{
			set obj = ##class(IRISDemo.Data.WasteCounts).%New()
			
			Set obj.StartTime = ..FixTimeStamp(objRs.Get("StartTime"))
			Set obj.EndTime = ..FixTimeStamp(objRs.Get("EndTime"))
			Set obj.WasteCount = +objRs.Get("WasteCount")
			Set obj.ProductionOrder = ##class(IRISDemo.Data.ProductionOrderChange).FindByTimeInterval(obj.StartTime, obj.EndTime)
			
			If obj.ProductionOrder=""
			{
				Write !!,"WARNING: Could not find a production order change for loading this WASTE for this time interval: '"_obj.StartTime_ "' and '"_obj.EndTime_"'",!!
				Write !,$Char(9),"Creating fake Production Order... "
				
				Set obj.ProductionOrder = ##class(IRISDemo.Data.ProductionOrderChange).CreateFake(obj.StartTime, obj.EndTime)
				
				If obj.ProductionOrder=""
				{
					Write "Could not create a fake one! Skipping this record.",!
					Continue
				}
				Else
				{
					Write "Done!",!
				}
			}
						
			Set tSC = obj.%Save()
			$$$ThrowStatusExceptionIfError(tSC, "WasteCountsSaveException")
			
			Set objTimeSlice = ##class(IRISDemo.Data.TimeSlice).%New()
			Set objTimeSlice.WasteCounts = obj
			Set objTimeSlice.StartTime = obj.StartTime
			Set objTimeSlice.EndTime = obj.EndTime
			
			Set tSC = objTimeSlice.%Save()
			$$$ThrowStatusExceptionIfError(tSC, "WasteTimeSliceSaveException")
		}
]]></Implementation>
</Method>

<Method name="LoadDowntimeEvents">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
		#Dim objRs As %Library.ResultSet
		#Dim objPatient As Patient
		
		set objRs = ##class(%Library.ResultSet).%New("IRISDemo.Util.FileReader:CSV")

		Set tSC = objRs.Execute("/tmp/DowntimeEvents.csv") 
		$$$ThrowStatusExceptionIfError(tSC, "LoadDowntimeEventsFileException")
		
		Set iDowntimeCount=0
		While objRs.Next() 
		{
			Set iDowntimeCount=iDowntimeCount+1
			
			Set tOriginalStartTime = ..FixTimeStamp(objRs.Get("StartTime"))
			Set tOriginalEndTime = ..FixTimeStamp(objRs.Get("EndTime"))
			
			Set tReasonCode = objRs.Get("ReasonCode")
			
			set obj = ##class(IRISDemo.Data.DowntimeEvents).%New()
			
			Set obj.StartTime = tOriginalStartTime
			Set obj.EndTime = tOriginalEndTime
			Set obj.ReasonCode = tReasonCode
			
			
			Set obj.ProductionOrder = ##class(IRISDemo.Data.ProductionOrderChange).FindByTimeInterval(obj.StartTime, obj.EndTime)
			
			If obj.ProductionOrder=""
			{
				Write !!,"WARNING: Could not find a production order change for loading this DOWNTIME for this time interval: '"_obj.StartTime_ "' and '"_obj.EndTime_"'",!!
				Continue
			}
						
			Set tSC = obj.%Save()
			$$$ThrowStatusExceptionIfError(tSC, "DowntimeEventsSaveException")

			// FRAGMENTATION into Time Slice table
			
			Set tTimeSliceStartTime = tOriginalStartTime
			Set bFinished=0
			Do 
			{
				Set tStartDate=$Piece(tTimeSliceStartTime, " ")
				Set tStartTime=$Piece(tTimeSliceStartTime, " ", 2)
				
				Set tNextHour=$Piece(tStartTime, ":")+1
				//If tNextHour=24 Set tNextHour="00"
				Set tNextTime=$S($L(tNextHour)=1:"0"_tNextHour, 1:tNextHour)_":00:00"
				Set tTimeSliceEndTime = tStartDate_" "_tNextTime
				
				If (tTimeSliceEndTime ]] tOriginalEndTime) || (tTimeSliceEndTime = tOriginalEndTime)
				{
					Set tTimeSliceEndTime = tOriginalEndTime
					Set bFinished = 1
				}
				
				Write !,"Fragmenting downtime "_iDowntimeCount_" between "_tTimeSliceStartTime_" and "_tTimeSliceEndTime
				
				Do ..CreateDowntimeEvent(obj, tTimeSliceStartTime, tTimeSliceEndTime, tReasonCode)
				
				Set tTimeSliceStartTime=tTimeSliceEndTime
			}
			While 'bFinished
		}
]]></Implementation>
</Method>

<Method name="CreateDowntimeEvent">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDownTimeEvent:IRISDemo.Data.DowntimeEvents,pStartTime:%TimeStamp,pEndTime:%TimeStamp,pReasonCode:%String</FormalSpec>
<Implementation><![CDATA[
		
		Set objTimeSlice = ##class(IRISDemo.Data.TimeSlice).%New()
		Set objTimeSlice.DowntimeEvent = pDownTimeEvent
		Set objTimeSlice.StartTime = pStartTime
		Set objTimeSlice.EndTime = pEndTime
		
		Set tSC = objTimeSlice.%Save()
		$$$ThrowStatusExceptionIfError(tSC, "DowntimeEventsTimeSliceSaveException")
]]></Implementation>
</Method>

<Method name="FixTimeStamp">
<ClassMethod>1</ClassMethod>
<FormalSpec>pCSVTimeStamp:%String</FormalSpec>
<ReturnType>%TimeStamp</ReturnType>
<Implementation><![CDATA[
		//KMB - adding ,,,6 to the $ZDATEH call to put the data in the 21st century
		//Can also be done by calling ##class(%SYS.NLS.Format).SetFormatItem("YearOption",6)
		//Should this be a new default?
		
		Set tDate = $ZDate($ZDateH($Piece(pCSVTimeStamp,"  "),,,6),3)
		Set tTime = $Piece(pCSVTimeStamp,"  ",2)
		Quit tDate_" "_tTime
]]></Implementation>
</Method>

<Method name="ConfigEnvironment">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	do $SYSTEM.SQL.SetDefaultSchema("IRISDemo_Data")  //Sets a new default schema so we don't have to type it for every query
	s sc = ##class(%DeepSee.Utils).%BuildCube("Timeslice",1,0) //Build the TimeSlice cube
	$$$ThrowStatusExceptionIfError(sc,"TimeSliceBuildException")

]]></Implementation>
</Method>
</Class>
<Class name="IRISDemo.Data.WasteCounts">
<Super>%Persistent</Super>

<Property name="ProductionOrder">
<Type>ProductionOrderChange</Type>
<Required>1</Required>
</Property>

<ForeignKey name="ProductionOrderFK">
<Properties>ProductionOrder</Properties>
<ReferencedClass>ProductionOrderChange</ReferencedClass>
</ForeignKey>

<Property name="WasteCount">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="StartTime">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="EndTime">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Index name="StartTimeIDX">
<Properties>StartTime</Properties>
</Index>

<Index name="EndTimeIDX">
<Properties>EndTime</Properties>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^IRISDemo.Data.WasteCountsD</DataLocation>
<DefaultData>WasteCountsDefaultData</DefaultData>
<IdLocation>^IRISDemo.Data.WasteCountsD</IdLocation>
<IndexLocation>^IRISDemo.Data.WasteCountsI</IndexLocation>
<StreamLocation>^IRISDemo.Data.WasteCountsS</StreamLocation>
<Data name="WasteCountsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>StartTime</Value>
</Value>
<Value name="3">
<Value>EndTime</Value>
</Value>
<Value name="4">
<Value>WasteCount</Value>
</Value>
<Value name="5">
<Value>ProductionOrder</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="IRISDemo.PivotAndDashboard">
<IncludeCode>%DeepSee</IncludeCode>
<ProcedureBlock>0</ProcedureBlock>
<Super>%DeepSee.UserLibrary.Container</Super>

<XData name="Contents">
<Description>
Items Exported From Folder Manager.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<items><dashboard xmlns="http://www.intersystems.com/deepsee/library" name="QualityAvailabilityKPI" folderName="IRISDemo" title="" description="" keywords="" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2019-03-01T15:11:24.332Z" createdBy="_SYSTEM" category="" bookCover="" scheme="" worklistCount="0" snapTo="true" snapGrid="true" gridRows="10" gridCols="10" canResize="true" canModify="true" showTitleBar="true" titleBarOpacity="" titleBarColor="" selectedTitleBarOpacity="" selectedTitleBarColor="" titleBarTextColor="" selectedTitleBarTextColor="" titleBarFont="" companyName="" companyLogo="" companyStyle="" backgroundColor="white" backgroundImage="none" backgroundRepeat="no-repeat" backgroundSize="100% 100%" backgroundOpacity="1" widgetBorders="1px solid #F0F0F0" widgetBordersSwitch="edit" widgetBordersColor="#F0F0F0" widgetBordersStyle="solid" widgetBordersWidth="1" widgetBordersToggle="true">
  <widget name="KPI Chart" type="pivot" subtype="comboChart" subtypeClass="comboChart" title="" dataSource="IRISDemo/QualityAvailabiltyKPI.pivot" dataLink="" drillDownDataSource="" width="200" height="200" sidebarContent="" showSidebar="false" sidebarWidth="" maximized="true" homeRowL="0" homeColL="0" colSpanL="4" rowSpanL="4" showToolbar="true" showToolbarBottomBorder="true" showToolbarOnlyWhenMaximized="false" colorToolbar="#F0F0F0" opacityToolbar="1" backgroundColor="#F0F0F0" opacity="1" theme="" dataColorList="">
    <control name="" action="refresh" target="" targetProperty="[ProductionOrder].[H1].[ProductionOrder]" location="widget" type="auto" controlClass="" label="" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
    <control name="" action="applyFilter" target="" targetProperty="[ProductionOrder].[H1].[ProductionOrder]" location="widget" type="auto" controlClass="" label="ProductionOrder" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
    <control name="" action="applyFilter" target="" targetProperty="[ItemCode].[H1].[ItemCode]" location="widget" type="auto" controlClass="" label="ItemCode" title="" value="" text="" readOnly="false" valueList="" displayList="" activeWhen="">
      <valueRequired>false</valueRequired>
    </control>
    <property name="chartToggle">none</property>
    <property name="drillDown">1</property>
    <override name="comboChart">{legendVisible:'false',markersVisible:true,xAxis:{_type:'axis'},yAxisList:[{axisType:'percent',maxValue:1,minorGridLines:true,title:'Percentage',_type:'axis'}],seriesTypes:'bar,bar,line',_type:'comboChart'}</override>
  </widget>
</dashboard>
<pivot xmlns="http://www.intersystems.com/deepsee/library" name="QualityAvailabiltyKPI" folderName="IRISDemo" title="" description="" keywords="" owner="" shared="true" public="true" locked="false" resource="" timeCreated="2019-02-25T14:06:19.093Z" createdBy="_SYSTEM" category="" bookCover="" mdx="" cellWidth="120" columnHeaderStyle="" rowHeaderStyle="" cellStyle="" rowLabelSpan="true" columnLabelSpan="true" cellHeight="22" showEmptyRows="false" showEmptyColumns="false" cubeName="TIMESLICE" caption="" listing="" listingRows="" showStatus="true" pageSize="100" colorScale="" rowTotals="false" columnTotals="false" rowTotalAgg="sum" columnTotalAgg="sum" rowTotalSource="page" showZebra="false" showRowCaption="true" printTitle="" printSubtitle="" printSubtitleOn="" showUser="" printPageSize="" printOrientation="1" printMarginTop="" printMarginLeft="" printMarginRight="" printMarginBottom="" printLabelWidth="" printCellWidth="" autoExecute="true" previewMode="false" manualMode="false" userMDX="" chartMarginTop="" chartMarginLeft="" chartMarginRight="" chartMarginBottom="" maxRows="" borderLeftCell="" borderRightCell="" borderTopCell="" borderBottomCell="" borderLeftCol="" borderRightCol="" borderTopCol="" borderBottomCol="" borderLeftRow="" borderRightRow="" borderTopRow="" borderBottomRow="" fontFamilyCell="" fontSizeCell="" fontFamilyCol="" fontSizeCol="" fontFamilyRow="" fontSizeRow="" showFilters="" showListingFilters="" showDate="" listingFontSize="" showZebraStripes="" filterTableStyle="" filterTableCaptionStyle="" filterTableItemStyle="" nowDisplayFormat="" measureLocation="columns" hideMeasures="1" backgroundImage="" backgroundOpacity=".12">
  <rowAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="" enabled="true">
  </rowAxisOptions>
  <columnAxisOptions spec="" key="" value="" text="" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="" enabled="true">
  </columnAxisOptions>
  <rowLevel spec="[StartTime].[H1].[StartDate].Members" key="" value="" text="StartDate" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="" enabled="true">
  </rowLevel>
  <sqlRestriction></sqlRestriction>
  <measure spec="[MEASURES].[QUALITY]" key="" value="" text="Quality" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="" enabled="true">
  </measure>
  <measure spec="[MEASURES].[AVAILABILITY]" key="" value="" text="Availability" headEnabled="false" headCount="" filterEnabled="false" filterExpression="" orderEnabled="false" orderExpression="" orderDirection="BDESC" aggEnabled="false" aggFunction="" aggFunctionParm="" levelCaption="" levelFormat="" levelSummary="" levelType="" drillLevel="0" advanced="false" levelStyle="" levelHeaderStyle="" suppress8020="false" drilldownSpec="" enabled="true">
  </measure>
</pivot>
</items>]]></Data>
</XData>
</Class>
<Class name="IRISDemo.Production">
<Super>IRISDemo.BaseProduction</Super>

<XData name="ProductionDefinition">
<Data><![CDATA[
<Production Name="IRISDemo.Production" TestingEnabled="true" LogGeneralTraceEvents="true">
  <Description></Description>
  <ActorPoolSize>2</ActorPoolSize>
  <!--
  <Item Name="PMML File Loader" Category="" ClassName="ML.PMML.BS.Loader.File.Service" PoolSize="1" Enabled="false" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="FilePath">/common_shared/pmml/</Setting>
    <Setting Target="Adapter" Name="FileSpec">*.pmml</Setting>
    <Setting Target="Adapter" Name="ArchivePath">/common_shared/imported_pmml/</Setting>
  </Item>
  -->
  <Item Name="Java Gateway Service" Category="Datalake" ClassName="EnsLib.JavaGateway.Service" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <!--
  <Item Name="Sample Dispatch Event Service" Category="" ClassName="SampleDispatch.BS.Event.Service" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Adapter" Name="DSN">jdbc:IRIS://localhost:51773/APPINT</Setting>
    <Setting Target="Adapter" Name="Credentials">SampleDispatch</Setting>
    <Setting Target="Adapter" Name="JDBCDriver">com.intersystems.jdbc.IRISDriver</Setting>
    <Setting Target="Adapter" Name="JGService">Java Gateway Service</Setting>
    <Setting Target="Adapter" Name="Parameters"></Setting>
    <Setting Target="Adapter" Name="Query">select 1</Setting>
    <Setting Target="Adapter" Name="KeyFieldName"></Setting>
  </Item>
    <Item Name="MineCare SQL Event Service" Category="" ClassName="SampleDispatch.BS.Event.MineCareService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Adapter" Name="DSN">jdbc:sqlserver://devsl.xompass.com:1401</Setting>
    <Setting Target="Adapter" Name="Credentials">MineCareCredentials</Setting>
    <Setting Target="Adapter" Name="JGService">Java Gateway Service</Setting>
    <Setting Target="Adapter" Name="Parameters"></Setting>
    <Setting Target="Adapter" Name="Query">SELECT TOP 1 * from dbo.Activity</Setting>
    <Setting Target="Adapter" Name="JDBCDriver">com.microsoft.sqlserver.jdbc.SQLServerDriver</Setting>
    <Setting Target="Adapter" Name="JDBCClasspath">/tmp/mssql-jdbc-7.4.1.jre8.jar</Setting>
    <Setting Target="Adapter" Name="ConnectionAttributes">databaseName=MineCare;user=SA;password=Modular1;</Setting>
    <Setting Target="Adapter" Name="KeyFieldName"></Setting>
  </Item>
  -->
  <Item Name="PowerView SQL Event Service" Category="" ClassName="SampleDispatch.BS.Event.PowerViewService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
    <Setting Target="Adapter" Name="DSN">jdbc:sqlserver://dev.austekchile.cl:1433</Setting>
    <Setting Target="Adapter" Name="Credentials">PowerViewCredentials</Setting>
    <Setting Target="Adapter" Name="JGService">Java Gateway Service</Setting>
    <Setting Target="Adapter" Name="Parameters"></Setting>
    <Setting Target="Adapter" Name="Query">SELECT TOP 1 * from dbo.hist_statusevents</Setting>
    <Setting Target="Adapter" Name="JDBCDriver">com.microsoft.sqlserver.jdbc.SQLServerDriver</Setting>
    <Setting Target="Adapter" Name="JDBCClasspath">/tmp/mssql-jdbc-7.4.1.jre8.jar</Setting>
    <Setting Target="Adapter" Name="ConnectionAttributes">databaseName=PowerView;user=iris;password=oee;</Setting>
    <Setting Target="Adapter" Name="KeyFieldName"></Setting>
  </Item>
  <Item Name="PowerView Event Operation" Category="" ClassName="SampleDispatch.BO.Event.Operation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
</Production>]]></Data>
</XData>
</Class>
<Class name="OEE.Cube.MiningOEE">
<Description>
</Description>
<Super>%DeepSee.CubeDefinition</Super>
<DependsOn>OEE.Data.OEETimeSlice</DependsOn>

<XData name="Cube">
<Description>
Cube definition from Architect.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube xmlns="http://www.intersystems.com/deepsee" name="MiningOEE" displayName="Mining OEE" disabled="false" abstract="false" sourceClass="OEE.Data.OEETimeSlice" countMeasureName="%COUNT" bucketSize="8" bitmapChunkInMemory="false" precompute="0" disableListingGroups="false" enableSqlRestrict="false">
  <dimension name="StartTime" disabled="false" hasAll="false" allCaption="All StartTime" allDisplayName="StartTime" sourceProperty="StartTime" type="time" calendar="gregorian" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false" hidden="false">
      <level name="StartTimeMonth" disabled="false" timeFunction="MonthYear" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
      <level name="StartTimeDay" disabled="false" timeFunction="DayMonthYear" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
      <level name="StartTimeHour" disabled="false" timeFunction="HourNumber" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
    </hierarchy>
  </dimension>
  <dimension name="Equipment" disabled="false" hasAll="false" allCaption="All Equipment" allDisplayName="Equipment" type="data" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false" hidden="false">
      <level name="Equipment" disabled="false" sourceProperty="Equipment" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
    </hierarchy>
  </dimension>
  <measure name="Tons" disabled="false" sourceProperty="Dump.Tons" aggregate="SUM" type="number" hidden="false" searchable="false">
  </measure>
  <measure name="IdleTime" disabled="false" sourceProperty="IdleTime" aggregate="SUM" type="number" hidden="false" searchable="false">
  </measure>
  <measure name="DumpTime" disabled="false" sourceProperty="DumpTime" aggregate="SUM" type="number" hidden="false" searchable="false">
  </measure>
  <measure name="DowntimeTime" disabled="false" sourceProperty="DowntimeTime" aggregate="SUM" type="number" hidden="false" searchable="false">
  </measure>
  <measure name="DelayTime" disabled="false" sourceProperty="DelayTime" aggregate="SUM" type="number" hidden="false" searchable="false">
  </measure>
  <measure name="TotalTime" disabled="false" sourceProperty="TotalTime" aggregate="SUM" type="number" hidden="false" searchable="false">
  </measure>
  <calculatedMember name="OperatingTime" disabled="false" dimension="Measures" valueExpression="[MEASURES].[AVAILABLETIME]- [Measures].[IdleTime]" hidden="false">
  </calculatedMember>
  <calculatedMember name="OEE" disabled="false" dimension="Measures" valueExpression="[MEASURES].[PRODUCTION EFFICENCY]* [MEASURES].[AVAILABILITY]* [MEASURES].[UTILIZATION]" formatString="#.##%;;;;" hidden="false">
  </calculatedMember>
  <calculatedMember name="Production Efficency" disabled="false" dimension="Measures" valueExpression="[Measures].[Tons]/( [MEASURES].[OPERATINGTIME]*0.13)" formatString="##.##%" hidden="false">
  </calculatedMember>
  <calculatedMember name="Utilization" disabled="false" dimension="Measures" valueExpression="[MEASURES].[OPERATINGTIME]/ [MEASURES].[AVAILABLETIME]" formatString="##.##%" hidden="false">
  </calculatedMember>
  <calculatedMember name="Availability" disabled="false" dimension="Measures" valueExpression="[MEASURES].[AVAILABLETIME]/ [Measures].[TotalTime]" formatString="##.##%" hidden="false">
  </calculatedMember>
  <calculatedMember name="AvailableTime" disabled="false" dimension="Measures" valueExpression="[Measures].[TotalTime]- [Measures].[DowntimeTime]" hidden="false">
  </calculatedMember>
  <listing name="Detail" disabled="false" listingType="table" fieldList="StartTime,EndTime,Equipment,Dump-&gt;Tons">
  </listing>
</cube>]]></Data>
</XData>

<Parameter name="DOMAIN">
</Parameter>
</Class>
<Class name="OEE.Cube.Registry">
<Description><![CDATA[
Cube Registry storage.<br/>
THIS IS A GENERATED CLASS, DO NOT EDIT.<br/>
Generated by the Cube Manager.<br/>
Last saved 2019-12-20 19:27:32.]]></Description>
<ProcedureBlock>0</ProcedureBlock>
<Super>%DeepSee.CubeManager.RegistryDefinitionSuper</Super>
<GeneratedBy>%DeepSee.CubeManager.Utils</GeneratedBy>

<XData name="Registry">
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<RegistryMap Disabled="false" IndependentSync="false" SerialUpdates="true">
  <Groups>
    <RegistryMapGroup GroupName="Group 1" IsRegistered="true" IsValid="true" Disabled="false" BuildAsynch="true">
      <Cubes>
        <RegistryMapCube CubeKey="MININGOEE" CubeDisplayName="Mining OEE" Disabled="false" DSTimeEnabled="true" BuildAsynch="true">
          <NaturalGroup>1</NaturalGroup>
          <CustomBuildOrder>1</CustomBuildOrder>
          <NaturalBuildOrder>1</NaturalBuildOrder>
          <UpdatePlan>BuildSynch</UpdatePlan>
          <BuildFrequency>1</BuildFrequency>
          <BuildTimeUnit>Day</BuildTimeUnit>
          <BuildDayOfWeek>1</BuildDayOfWeek>
          <BuildDayOfMonth>1</BuildDayOfMonth>
          <SynchFrequency>1</SynchFrequency>
          <SynchTimeUnit>Minute</SynchTimeUnit>
        </RegistryMapCube>
      </Cubes>
      <UpdatePlan>BuildSynch</UpdatePlan>
      <BuildFrequency>1</BuildFrequency>
      <BuildTimeUnit>Day</BuildTimeUnit>
      <BuildDayOfWeek>1</BuildDayOfWeek>
      <BuildDayOfMonth>1</BuildDayOfMonth>
      <SynchFrequency>1</SynchFrequency>
      <SynchTimeUnit>Minute</SynchTimeUnit>
    </RegistryMapGroup>
  </Groups>
  <BuildStartHour>21</BuildStartHour>
  <BuildStartMinute>00</BuildStartMinute>
</RegistryMap>]]></Data>
</XData>
</Class>
<Class name="OEE.Data.Dump">
<Super>%Persistent</Super>

<Property name="EquipmentId">
<Description>
documentation</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="StartTime">
<Description>
documentation</Description>
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="EndTime">
<Type>%TimeStamp</Type>
</Property>

<Property name="Tons">
<Type>%Float</Type>
<Required>1</Required>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^OEE.Data.DumpD</DataLocation>
<DefaultData>DumpDefaultData</DefaultData>
<IdLocation>^OEE.Data.DumpD</IdLocation>
<IndexLocation>^OEE.Data.DumpI</IndexLocation>
<StreamLocation>^OEE.Data.DumpS</StreamLocation>
<Data name="DumpDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>EquipmentId</Value>
</Value>
<Value name="3">
<Value>StartTime</Value>
</Value>
<Value name="4">
<Value>EndTime</Value>
</Value>
<Value name="5">
<Value>Tons</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="OEE.Data.EventChange">
<IncludeCode>DEMOMACROS</IncludeCode>
<Super>%Persistent</Super>

<Property name="EquipmentId">
<Description>
documentation</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="StartTime">
<Description>
documentation</Description>
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="Duration">
<Type>%Integer</Type>
</Property>

<Property name="EndTime">
<Type>%TimeStamp</Type>
</Property>

<Property name="SessionIds">
<Type>%String</Type>
</Property>

<Property name="NewStatusCode">
<Description>
documentation</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Index name="EquipmentIdAndStartTimeIndex">
<Description>
We can map this to ISO Status Codes, but need to enable a lookup table to match custom codes with ISO codes</Description>
<Properties>EquipmentId,StartTime,EndTime</Properties>
</Index>

<Method name="GetLastEventChangeForEquipment">
<ClassMethod>1</ClassMethod>
<FormalSpec>pEquipmentId:%String,pNewEventTime:%TimeStamp</FormalSpec>
<ReturnType>EventChange</ReturnType>
<Implementation><![CDATA[
		#Dim rs As %SQL.StatementResult
		Set obj = ""
		
		// Find the last event for the same equipment, that happend just before (the highest StartTime that 
		// is lower than the new event's StarTime. It also must have the EndTime null
		Set rs = ##class(%SQL.Statement).%ExecDirect(,"select ID from OEE_Data.EventChange where EquipmentId=? and StartTime<? and EndTime is null order by StartTime desc", pEquipmentId, pNewEventTime)
		$$$ThrowSQLExceptionIfResultError(rs, "GetLastEventChangeForEquipmentException")
		
		If rs.%Next()
		{
			Set obj = ..%OpenId(rs.%GetData(1))
		}
		
		Return obj
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^OEE.Data.EventChangeD</DataLocation>
<DefaultData>EventChangeDefaultData</DefaultData>
<IdLocation>^OEE.Data.EventChangeD</IdLocation>
<IndexLocation>^OEE.Data.EventChangeI</IndexLocation>
<StreamLocation>^OEE.Data.EventChangeS</StreamLocation>
<Data name="EventChangeDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>EquipmentId</Value>
</Value>
<Value name="3">
<Value>StartTime</Value>
</Value>
<Value name="4">
<Value>EndTime</Value>
</Value>
<Value name="5">
<Value>NewStatusCode</Value>
</Value>
<Value name="6">
<Value>SessionIds</Value>
</Value>
<Value name="7">
<Value>Duration</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="OEE.Data.OEETimeSlice">
<Super>%Persistent</Super>

<Parameter name="DSTIME">
<Default>AUTO</Default>
</Parameter>

<Property name="StartTime">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="EndTime">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="Dump">
<Description>
Sparse</Description>
<Type>OEE.Data.Dump</Type>
</Property>

<Property name="EventChange">
<Description>
Sparse</Description>
<Type>EventChange</Type>
</Property>

<Property name="Equipment">
<Description>
Always be here (coming from Dump or EventChange)</Description>
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode>
	 
	 	Set {Equipment}=##class(OEE.Data.OEETimeSlice).ComputeEquipment({ID})
	 
	 </SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="DumpTime">
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode> 	
		
			Set {*} = $Select({Dump}'="":##class(OEE.Data.OEETimeSlice).ComputeCalendarTime({StartTime}, {EndTime}), 1:0)
		</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="IdleTime">
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode> 	
		Set {*} = ##class(OEE.Data.OEETimeSlice).ConditionalComputeEventChangeTime({ID},200)
		</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="DelayTime">
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode> 	
		Set {*} = ##class(OEE.Data.OEETimeSlice).ConditionalComputeEventChangeTime({ID},300)
		</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="DowntimeTime">
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode> 	
		Set {*} = ##class(OEE.Data.OEETimeSlice).ConditionalComputeEventChangeTime({ID},400)
		</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="TotalTime">
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode> 	
		Set {*} = ##class(OEE.Data.OEETimeSlice).ConditionalComputeEventChangeTime({ID},"")
		</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<ForeignKey name="DumpFK">
<Description>
Not really necessary for this to work. It is here just so that our xDBC 
dictionary metadata will reflect that Dump is a foreing key</Description>
<Properties>Dump</Properties>
<ReferencedClass>Dump</ReferencedClass>
</ForeignKey>

<ForeignKey name="EventChangeFK">
<Description>
The same as above.</Description>
<Properties>EventChange</Properties>
<ReferencedClass>EventChange</ReferencedClass>
</ForeignKey>

<Method name="ComputeEquipment">
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
		Set obj = ..%OpenId(pID)
		
		If obj.Dump'="" Quit obj.Dump.EquipmentId
		If obj.EventChange'="" Quit obj.EventChange.EquipmentId
		
		Quit ""
]]></Implementation>
</Method>

<Method name="ConditionalComputeEventChangeTime">
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String,pStatusCode:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
		Set obj = ..%OpenId(pID)
		Set iDuration=0

		If (obj.EventChange'="") && ((obj.EventChange.NewStatusCode=pStatusCode) || (pStatusCode=""))
		{
			Set iDuration=$System.SQL.DATEDIFF("ss", obj.StartTime, obj.EndTime)
		}
		
		Quit iDuration
]]></Implementation>
</Method>

<Method name="ComputeCalendarTime">
<ClassMethod>1</ClassMethod>
<FormalSpec>pStartDate:%TimeStamp,pEndDate:%TimeStamp</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Return $System.SQL.DATEDIFF("ss", pStartDate, pEndDate)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^OEE.Data.OEETimeSliceD</DataLocation>
<DefaultData>OEETimeSliceDefaultData</DefaultData>
<IdLocation>^OEE.Data.OEETimeSliceD</IdLocation>
<IndexLocation>^OEE.Data.OEETimeSliceI</IndexLocation>
<StreamLocation>^OEE.Data.OEETimeSliceS</StreamLocation>
<Data name="OEETimeSliceDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>StartTime</Value>
</Value>
<Value name="3">
<Value>EndTime</Value>
</Value>
<Value name="4">
<Value>Dump</Value>
</Value>
<Value name="5">
<Value>EventChange</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="SampleDispatch.Adapter.SQL.PeriodicInboundAdapter">
<Description>
This is a periodic SQL adapter. It has a fixed query string that will just "select 1" every call interval which
will trigger ProcessInput. The idea is that OnProcessInput will now run the queries we want to run.
This adapter will hide parameters that we don't want people to change such as Query, Parameters, DeleteQuery and KeyFieldName</Description>
<Super>EnsLib.SQL.InboundAdapter</Super>

<Parameter name="SETTINGS">
<Description>
Hiding parameters</Description>
<Default>-Query:Data,-Parameters:Data,-DeleteQuery:Data,-KeyFieldName:Data</Default>
</Parameter>

<Property name="Query">
<Description>
Setting InitialExpression to "select 1"</Description>
<Type>%String</Type>
<InitialExpression>"select 1"</InitialExpression>
<Required>1</Required>
<Parameter name="MAXLEN"/>
</Property>

<Property name="KeyFieldName">
<Description>
Setting InitialExpression to ""</Description>
<Type>%String</Type>
</Property>
</Class>
<Class name="SampleDispatch.Adapter.SQL.PeriodicInboundAdapterMC">
<Super>EnsLib.SQL.InboundAdapter</Super>

<Property name="Query">
<Description>
Hiding parameters
Setting InitialExpression to "select 1"</Description>
<Type>%String</Type>
<InitialExpression>"select 1"</InitialExpression>
<Required>1</Required>
<Parameter name="MAXLEN"/>
</Property>

<Property name="KeyFieldName">
<Description>
Setting InitialExpression to ""</Description>
<Type>%String</Type>
</Property>
</Class>
<Class name="SampleDispatch.BO.Event.CompleteEvent">
<Super>%Persistent</Super>

<Property name="Id">
<Type>%Integer</Type>
</Property>

<Property name="ShiftId">
<Type>%Integer</Type>
</Property>

<Property name="EquipmentId">
<Type>%String</Type>
</Property>

<Property name="StartTime">
<Type>%TimeStamp</Type>
</Property>

<Property name="EndTime">
<Type>%TimeStamp</Type>
</Property>

<Property name="Duration">
<Type>%Integer</Type>
</Property>

<Property name="StatusReasonId">
<Type>%Integer</Type>
</Property>

<Property name="StatusReasonDescription">
<Description>
documentation</Description>
<Type>%String</Type>
</Property>

<Property name="StatusTypeId">
<Type>%Integer</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^SampleDispat51FA.CompleteEventD</DataLocation>
<DefaultData>CompleteEventDefaultData</DefaultData>
<IdLocation>^SampleDispat51FA.CompleteEventD</IdLocation>
<IndexLocation>^SampleDispat51FA.CompleteEventI</IndexLocation>
<StreamLocation>^SampleDispat51FA.CompleteEventS</StreamLocation>
<Data name="CompleteEventDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>EquipmentId</Value>
</Value>
<Value name="3">
<Value>StartTime</Value>
</Value>
<Value name="4">
<Value>EndTime</Value>
</Value>
<Value name="5">
<Value>StatusCode</Value>
</Value>
<Value name="6">
<Value>ReasonCode</Value>
</Value>
<Value name="7">
<Value>Duration</Value>
</Value>
<Value name="8">
<Value>Id</Value>
</Value>
<Value name="9">
<Value>ShiftId</Value>
</Value>
<Value name="10">
<Value>StatusReasonId</Value>
</Value>
<Value name="11">
<Value>StatusTypeId</Value>
</Value>
<Value name="12">
<Value>StatusReasonDescription</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="SampleDispatch.BO.Event.CompletedDumpEvent">
<Description>
A completed dump has an EndTime and all the information about that dump</Description>
<Super>%Persistent,Ens.Request</Super>

<Property name="EquipmentId">
<Description>
documentation</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="StartTime">
<Description>
documentation</Description>
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="EndTime">
<Description>
documentation</Description>
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="Tons">
<Description>
documentation</Description>
<Type>%Float</Type>
<Required>1</Required>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^SampleDisp51FA.CompletedDumA00D</DataLocation>
<DefaultData>CompletedDumpEventDefaultData</DefaultData>
<IdLocation>^SampleDisp51FA.CompletedDumA00D</IdLocation>
<IndexLocation>^SampleDisp51FA.CompletedDumA00I</IndexLocation>
<StreamLocation>^SampleDisp51FA.CompletedDumA00S</StreamLocation>
<Data name="CompletedDumpEventDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>EquipmentId</Value>
</Value>
<Value name="3">
<Value>StartTime</Value>
</Value>
<Value name="4">
<Value>EndTime</Value>
</Value>
<Value name="5">
<Value>Tons</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="SampleDispatch.BO.Event.Operation">
<IncludeCode>DEMOMACROS</IncludeCode>
<Super>Ens.BusinessOperation</Super>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="StatusChangeEvent">
<FormalSpec>pInput:SampleDispatch.BO.Event.StatusChangeEvent,*pOutput:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#Dim eventChange As OEE.Data.EventChange
	#Dim previousChange As OEE.Data.EventChange
	Set sc=$$$OK
	
	Try
	{
		Set previousChange = ##class(OEE.Data.EventChange).GetLastEventChangeForEquipment(pInput.EquipmentId, pInput.EventTime)
		
		If previousChange'=""
		{
			Set previousChange.EndTime = pInput.EventTime
			Set previousChange.SessionIds=previousChange.SessionIds_","_..%SessionId
			Set sc = previousChange.%Save()
			Quit:$$$ISERR(sc)
			
			// Now that we have an end time, we can fragment it.
			// Later, for 400 events (downtime), we will need to find the endtime using, maybe, the shift downtime
			// We would fix this later.
			Do ..FragmentChangeEvent(previousChange)
		}
		
		//Set eventChange = ##class(OEE.Data.EventChange).%New()
		Set eventChange = ##class(CanonicalModelImported.StatusEvent).%New()
		//Set eventChange.EquipmentId = pInput.EquipmentId
		//Set eventChange.StartTime = pInput.EventTime
		//Set eventChange.EndTime = pInput.EventTime
		//Set eventChange.Duration = pInput.EventTime
		//Set eventChange.SessionIds=eventChange.SessionIds_","_..%SessionId
		
		Set sc = eventChange.%Save()
		Quit:$$$ISERR(sc)		
		
	}
	Catch (oException)
	{
		Set sc = oException.AsStatus()
	}
	
	Quit sc
]]></Implementation>
</Method>

<Method name="FragmentChangeEvent">
<ClassMethod>1</ClassMethod>
<FormalSpec>pChangeEvent:OEE.Data.EventChange</FormalSpec>
<Implementation><![CDATA[
	// Now we can update the time slice record
	// FRAGMENTATION into Time Slice table
	
	Set tTimeSliceStartTime = pChangeEvent.StartTime
	Set tOriginalEndTime = pChangeEvent.EndTime
	
	Set bFinished=0
	Do 
	{
		// Adding one minute 
		Set tTimeSliceEndTime=$System.SQL.DATEADD("mi", 1, tTimeSliceStartTime)
		
		// Have I gone too far? I mean: Beyond my tOriginalEndTime?
		// Or am I right at it?
		If (tTimeSliceEndTime ]] tOriginalEndTime) || (tTimeSliceEndTime = tOriginalEndTime)
		{
			//Then that is my last end time and it should match my tOriginalEndTime
			Set tTimeSliceEndTime = tOriginalEndTime
			
			//That is my last one...
			Set bFinished = 1
		}
					
		Do ..CreateTimesliceChangeEvent(pChangeEvent, tTimeSliceStartTime, tTimeSliceEndTime)
		
		Set tTimeSliceStartTime=tTimeSliceEndTime
	}
	While 'bFinished
]]></Implementation>
</Method>

<Method name="CreateTimesliceChangeEvent">
<ClassMethod>1</ClassMethod>
<FormalSpec>pChangeEvent:OEE.Data.EventChange,pTimeSliceStartTime:%TimeStamp,pTimeSliceEndTime:%TimeStamp</FormalSpec>
<Implementation><![CDATA[
	#Dim timesliceChangeEvent As OEE.Data.OEETimeSlice
	
	Set timesliceChangeEvent = ##class(OEE.Data.OEETimeSlice).%New()
	Set timesliceChangeEvent.EventChange = pChangeEvent
	Set timesliceChangeEvent.StartTime = pTimeSliceStartTime
	Set timesliceChangeEvent.EndTime = pTimeSliceEndTime
	
	Set sc = timesliceChangeEvent.%Save()
	$$$ThrowStatusExceptionIfError(sc, "FragmentChangeEventException")
	
]]></Implementation>
</Method>

<Method name="CompletedDumpEvent">
<FormalSpec>pInput:SampleDispatch.BO.Event.CompletedDumpEvent,*pOutput:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#Dim eventChange As OEE.Data.EventChange
	#Dim previousChange As OEE.Data.EventChange
	#Dim timeSlice As OEE.Data.OEETimeSlice
	
	Set sc=$$$OK
	
	Try
	{		
		Set dump = ##class(OEE.Data.Dump).%New()
		Set dump.EquipmentId = pInput.EquipmentId
		Set dump.StartTime = pInput.StartTime
		Set dump.EndTime = pInput.EndTime
		Set dump.Tons = pInput.Tons
		
		Set sc = dump.%Save()
		
		// Now we can update the time slice record. We are assuming that a dump is always inside a single shift
		// hence, no fragmentation is necessary
		
		Set timeSlice = ##class(OEE.Data.OEETimeSlice).%New()
		Set timeSlice.Dump = dump
		Set timeSlice.StartTime = dump.StartTime
		Set timeSlice.EndTime = dump.EndTime
		
		Set sc = timeSlice.%Save()
		
	}
	Catch (oException)
	{
		Set sc = oException.AsStatus()
	}
	
	Quit sc
]]></Implementation>
</Method>

<Method name="CompleteEvent">
<Description>
Gets the CompleteEvent object and saves it</Description>
<FormalSpec>pInput:SampleDispatch.BO.Event.CompleteEvent,*pOutput:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#Dim eventChange As OEE.Data.EventChange
	#Dim previousChange As OEE.Data.EventChange
	#Dim timeSlice As OEE.Data.OEETimeSlice
	
	Set sc=$$$OK
	
	Try
	{		
		Set event = ##class(ASPMining.CanonicalModel.Operation.StatusEvent).%New()
		#Dim event As ASPMining.CanonicalModel.Operation.StatusEvent
		
		// Check if equipment exists and open it, if not, make a fake one, which should not be seen if everything works right
		If ##class(ASPMining.CanonicalModel.Equipment.Equipment).EquipmentIndexExists(pInput.EquipmentId){
			Set event.Equipment = ##class(ASPMining.CanonicalModel.Equipment.Equipment).EquipmentIndexOpen(pInput.EquipmentId)
		}else{
			Set event.Equipment = ##class(ASPMining.CanonicalModel.Equipment.Equipment).%New()
			set event.Equipment.Id = pInput.EquipmentId
			set event.Equipment.Name = "GENERATED BY OPERATION"
			// Resolve Category
			if '##class(ASPMining.CanonicalModel.Equipment.EquipmentCategory).EquipmentCategoryIndexExists("GENERATED BY OPERATION") {
				Set event.Equipment.EquipmentCategory = ##class(ASPMining.CanonicalModel.Equipment.EquipmentCategory).%New() 
				Set event.Equipment.EquipmentCategory.Name = "GENERATED BY OPERATION"
			}else{
				Set event.Equipment.EquipmentCategory = ##class(ASPMining.CanonicalModel.Equipment.EquipmentCategory).EquipmentCategoryIndexOpen("GENERATED BY OPERATION")
			}
			
			// Resolve Model
			if '##class(ASPMining.CanonicalModel.Equipment.EquipmentModel).EquipmentModelIndexExists("GENERATED BY OPERATION") {
				Set event.Equipment.EquipmentModel = ##class(ASPMining.CanonicalModel.Equipment.EquipmentModel).%New() 
				Set event.Equipment.EquipmentModel.Model = "GENERATED BY OPERATION"
			}else{
				Set event.Equipment.EquipmentModel = ##class(ASPMining.CanonicalModel.Equipment.EquipmentModel).EquipmentModelIndexOpen("GENERATED BY OPERATION")
			}
		}
		Set event.StartTime = pInput.StartTime
		Set event.EndTime = pInput.EndTime
		Set event.Duration = pInput.Duration
		/*
		//TODO: Validate status reasons and type jus like with equipment
		$$$TRACE("HOLA")
		If '##class(ASPMining.CanonicalModel.Operation.StatusReason).ReasonIndexExists(pInput.StatusReasonId) {
			Set event.StatusReason = ##class(ASPMining.CanonicalModel.Operation.StatusReason).%New()
			Set event.StatusReason.Reason = pInput.StatusReasonId
			Set event.StatusReason.Description = "GENERATED BY OPERATION"
		$$$TRACE("a")
		}else{
		$$$TRACE("b")
			Set event.StatusReason = ##class(ASPMining.CanonicalModel.Operation.StatusReason).ReasonIndexOpen(pInput.StatusReasonId)
		}
		
		$$$TRACE("c")
		If '##class(ASPMining.CanonicalModel.Operation.StatusType).TypeIndexExists(pInput.StatusTypeId){
		$$$TRACE("d")
			Set event.StatusType = ##class(ASPMining.CanonicalModel.Operation.StatusType).%New()
			Set event.StatusType.Type = pInput.StatusTypeId
			Set event.StatusType.Description = "GENERATED BY OPERATION"
		}else{
			$$$TRACE("e")
			Set event.StatusType = ##class(ASPMining.CanonicalModel.Operation.StatusType).TypeIndexOpen(pInput.StatusTypeId)
		}*/
		//Set event.StatusReason = ##class(ASPMining.CanonicalModel.Operation.StatusReason).%New() // pInput.StatusReasonId
		//Set event.StatusReason.Reason = pInput.StatusReasonId
		//Set event.StatusType = ##class(ASPMining.CanonicalModel.Operation.StatusType).%New() // pInput.StatusTypeId
		//Set event.StatusType.Type = pInput.StatusTypeId
		
		Set sc = event.%Save()
		
	}
	Catch (oException)
	{
		Set sc = oException.AsStatus()
	}
	
	Quit sc
]]></Implementation>
</Method>

<Method name="NewEquipment">
<FormalSpec>pInput:ASPMining.CanonicalModel.Equipment.Equipment,*pOutput:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	Set sc=$$$OK
	
	Try
	{		
		If '##class(ASPMining.CanonicalModel.Equipment.Equipment).EquipmentIndexExists(pInput.Id) {
			Set sc = pInput.%Save()		
		}
	}
	Catch (oException)
	{
		Set sc = oException.AsStatus()
	}
	
	Quit sc
]]></Implementation>
</Method>

<Method name="NewReason">
<FormalSpec>pInput:ASPMining.CanonicalModel.Operation.StatusReason,*pOutput:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	Set sc=$$$OK
	
	Try
	{		
		Set sc = pInput.%Save()		
	}
	Catch (oException)
	{
		Set sc = oException.AsStatus()
	}
	
	Quit sc
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
    <MapItem MessageType="SampleDispatch.BO.Event.StatusChangeEvent">
        <Method>StatusChangeEvent</Method>
    </MapItem>
    <MapItem MessageType="SampleDispatch.BO.Event.CompletedDumpEvent">
        <Method>CompletedDumpEvent</Method>
    </MapItem>
    <MapItem MessageType="SampleDispatch.BO.Event.CompleteEvent">
        <Method>CompleteEvent</Method>
    </MapItem>
    <MapItem MessageType="ASPMining.CanonicalModel.Equipment.Equipment">
        <Method>NewEquipment</Method>
    </MapItem>
    <MapItem MessageType="ASPMining.CanonicalModel.Operation.StatusReason">
        <Method>NewReason</Method>
    </MapItem>
</MapItems>]]></Data>
</XData>
</Class>
<Class name="SampleDispatch.BO.Event.StatusChangeEvent">
<Super>%Persistent,Ens.Request</Super>

<Property name="EquipmentId">
<Description>
documentation</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="EventTime">
<Description>
documentation</Description>
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="NewStatusCode">
<Description>
documentation</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^SampleDisp51FA.StatusChangDFC6D</DataLocation>
<DefaultData>StatusChangeEventDefaultData</DefaultData>
<IdLocation>^SampleDisp51FA.StatusChangDFC6D</IdLocation>
<IndexLocation>^SampleDisp51FA.StatusChangDFC6I</IndexLocation>
<StreamLocation>^SampleDisp51FA.StatusChangDFC6S</StreamLocation>
<Data name="StatusChangeEventDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>EquipmentId</Value>
</Value>
<Value name="3">
<Value>EventTime</Value>
</Value>
<Value name="4">
<Value>NewStatusCode</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="SampleDispatch.BS.Event.MineCareService">
<Super>Ens.BusinessService</Super>

<Parameter name="ADAPTER">
<Description>
We are using this custom adapter that is based on EnsLib.SQL.InboundAdapter to hide some properties we don't
want people to change.</Description>
<Default>SampleDispatch.Adapter.SQL.PeriodicInboundAdapterMC</Default>
</Parameter>

<Property name="Adapter">
<Type>SampleDispatch.Adapter.SQL.PeriodicInboundAdapterMC</Type>
</Property>

<Method name="OnProcessInput">
<FormalSpec>pInput:EnsLib.SQL.Snapshot,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set sc = $$$OK
	
	#Dim oEvent As SampleDispatch.BO.Event.CompleteEvent
	
	try 
	{		
		Do ..ProcessCompleteEvent()
		
	}
	Catch(oException)
	{
		Set sc = oException.AsStatus()
	}
	
	Quit sc
]]></Implementation>
</Method>

<Method name="ProcessCompleteEvent">
<Description>
We will only bring dumps that are COMPLETE. So we are querying for all NEW dumps that have a non null EndTime</Description>
<Implementation><![CDATA[
	#Dim oRS As EnsLib.SQL.GatewayResultSet
	
	Set tLastKey = ..Adapter.GetPersistentValue(..%ConfigName, "LastEventKey")
	$$$TRACE("Next event Id "_tLastKey_"...")
	
	/// Gets all the new received events
	Set tQueryStatement="SELECT Id, EquipmentId, StartTime, EndTime, ReasonCode FROM dbo.Activity WHERE Id>? AND EndTime is not null"
						
						
	Set sc = ..Adapter.ExecuteQuery(.oRS, tQueryStatement, tLastKey)
	
	While oRS.Next()
	{
		Set tLastKey = oRS.Get("Id")
		$$$TRACE("Processing event Id "_tLastKey_"...")
		
		/// oRS.Get Names must match SQL query var names
		set oEvent = ##class(SampleDispatch.BO.Event.CompleteEvent).%New()
		set oEvent.EquipmentId = oRS.Get("EquipmentId")
		set oEvent.StartTime = oRS.Get("StartTime")
		set oEvent.EndTime = oRS.Get("EndTime")
		set oEvent.ReasonCode = oRS.Get("ReasonCode")
		$$$TRACE("Reason Code "_oEvent.ReasonCode_"...")
		
		
		Set ..%SessionId=""
		
		set sc = ..SendRequestAsync("Sample Dispatch Event Operation", oEvent)
		
		Do ..Adapter.SetPersistentValue(..%ConfigName, "LastEventKey", tLastKey)
	}
	
	
]]></Implementation>
</Method>

<Method name="OnInit">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   #; initialize persistent last key value
   //Do ..Adapter.InitializePersistentValue(..%ConfigName, "LastEventKey",0)
   Do ..Adapter.InitializePersistentValue(..%ConfigName, "LastEventKey", 0)
   /// lAST eVENT KEY IS A TIMESTAMP KEY
   /// Do ..Adapter.InitializePersistentValue(..%ConfigName, "LastEventKey", $ZDateTime("0,0", 3))
   /// Do ..Adapter.InitializePersistentValue(..%ConfigName, "LastCompletedDumpKey",0)
   Quit $$$OK
]]></Implementation>
</Method>
</Class>
<Class name="SampleDispatch.BS.Event.PowerViewService">
<Super>Ens.BusinessService</Super>

<Parameter name="ADAPTER">
<Description>
We are using this custom adapter that is based on EnsLib.SQL.InboundAdapter to hide some properties we don't
want people to change.</Description>
<Default>SampleDispatch.Adapter.SQL.PeriodicInboundAdapterMC</Default>
</Parameter>

<Property name="Adapter">
<Type>SampleDispatch.Adapter.SQL.PeriodicInboundAdapterMC</Type>
</Property>

<Method name="OnProcessInput">
<FormalSpec>pInput:EnsLib.SQL.Snapshot,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set sc = $$$OK
	
	#Dim oEvent As SampleDispatch.BO.Event.CompleteEvent
	
	try 
	{		
		Do ..ProcessNewEquipments()
		Do ..ProcessNewReasons()
		Do ..ProcessNewCompleteEvents()
		//Do ..ProcessCompleteDumps()
		
	}
	Catch(oException)
	{
		Set sc = oException.AsStatus()
	}
	
	Quit sc
]]></Implementation>
</Method>

<Method name="ProcessNewCompleteEvents">
<Description>
Will get data from TABLE: hist_statusevents, convert field names to canonical names and send messages to the right operation to save them properly.
Only complete events are parsed (start+endtime)</Description>
<Implementation><![CDATA[
	#Dim oRS As EnsLib.SQL.GatewayResultSet
	
	Set tLastKey = ..Adapter.GetPersistentValue(..%ConfigName, "LastEventKey")
	$$$TRACE("Next event ddbkey "_tLastKey_"...")
	
	/// Gets all the new received events
	Set tQueryStatement="SELECT ddbkey, shiftindex, eqmt, operid, starttime, endtime, reason, duration, status, reasonlink FROM dbo.hist_statusevents WHERE ddbkey>? AND endtime is not null"
						
						
	Set sc = ..Adapter.ExecuteQuery(.oRS, tQueryStatement, tLastKey)
	
	While oRS.Next()
	{
		Set tLastKey = oRS.Get("ddbkey")
		$$$TRACE("Processing event ddbkey "_tLastKey_"...")
		
		/// oRS.Get Names must match SQL query var names
		set oEvent = ##class(SampleDispatch.BO.Event.CompleteEvent).%New()
		#Dim oEvent As SampleDispatch.BO.Event.CompleteEvent
		
		set oEvent.EquipmentId = oRS.Get("eqmt") // TODO: Asegurar que se tiene este id en la table Equipment
		
		// TODO: MISSING HIST_SHIFT_INDEX. Hardcoded time provided for testing, should consider the initial offset time provided by the shift index table.
		set oEvent.ShiftId = oRS.Get("shiftindex")
		set oEvent.Duration = oRS.Get("duration")
		
		set startHourSeconds = ((oEvent.ShiftId-33965) * 8 * 3600) + oRS.Get("starttime") //transformacion rapida de shift a hora (ficticia), primer shift de la bd 33966
		set startday = 65335 + ##class(%Library.Integer).Normalize(startHourSeconds/86400)
		set startseconds = startHourSeconds # 86400
		set startstr = startday_","_startseconds
		set oEvent.StartTime = $ZDateTime(startstr, 3)

		set endHourSeconds = startHourSeconds + oEvent.Duration
		set endday = 65335 + ##class(%Library.Integer).Normalize(endHourSeconds/86400)
		set endseconds = endHourSeconds # 86400
		set endstr = endday_","_endseconds
		set oEvent.EndTime = $ZDateTime(endstr, 3) // oRS.Get("endtime")
		
		set oEvent.StatusReasonId = oRS.Get("reasonlink") //TODO: Asegurar que se tiene este id en la tabla StatusReason
		set oEvent.StatusTypeId = oRS.Get("status") //TODO: Asegurar que se tiene este id en la tabla StatusType
		
		
		/// Gets all the new received events
		///Set tQueryStatement2="SELECT ddbkey, name, reason, status FROM dbo.hist_reasontable WHERE ddbkey="_oRS.Get("reasonlink")
							
		///Set sc = ..Adapter.ExecuteQuery(.oRS, tQueryStatement2)
							
		// TODO: bring the reason details from the hist_reasontable and send a message to populate statusreason
		// TODO: if status not in operation.statustype, then bring the data from the table ENUM
		$$$TRACE("StatusReasonId "_oEvent.StatusReasonId_"...")
		
		
		Set ..%SessionId=""
		
		set sc = ..SendRequestAsync("PowerView Event Operation", oEvent)
		
		Do ..Adapter.SetPersistentValue(..%ConfigName, "LastEventKey", tLastKey)
	}
	
	
]]></Implementation>
</Method>

<Method name="ProcessNewReasons">
<Implementation><![CDATA[
	#Dim oRS As EnsLib.SQL.GatewayResultSet
	
	Set tLastKey = ..Adapter.GetPersistentValue(..%ConfigName, "LastReasonKey")
	$$$TRACE("Next equipment event ddbkey "_tLastKey_"...")
	
	/// Gets all the new received events where equipment is involved, infer form here which ones are new
	Set tQueryStatement="SELECT ddbkey, name, reason, status FROM dbo.hist_reasontable WHERE ddbkey>? "

	Set sc = ..Adapter.ExecuteQuery(.oRS, tQueryStatement, tLastKey)
	
	While oRS.Next()
	{
		Set tLastKey = oRS.Get("ddbkey")
		$$$TRACE("Processing reason ddbkey "_tLastKey_"...")
		
		If '##class(ASPMining.CanonicalModel.Operation.StatusReason).ReasonIndexExists(oRS.Get("reason")){
			$$$TRACE("Reason does not exists "_oRS.Get("reason")_"...")
			set oReason = ##class(ASPMining.CanonicalModel.Operation.StatusReason).%New()
			#Dim oReason As ASPMining.CanonicalModel.Operation.StatusReason
			
			set oReason.Reason = ##class(%Library.Integer).Normalize(oRS.Get("reason"))
			set oReason.Description = oRS.Get("name")
			
			//se verifica el status type aqui, para que en  caso de no existir se guarde automaticamente con la operation, asi es mas rapido despues cuando se obtienen los events
			If '##class(ASPMining.CanonicalModel.Operation.StatusType).TypeIndexExists(oRS.Get("status")) {
				set oReason.StatusType = ##class(ASPMining.CanonicalModel.Operation.StatusType).%New()
				set oReason.StatusType.Type = ##class(%Library.Integer).Normalize(oRS.Get("status"))
				
				//TODO: aclarar estos status si realmente corresponden
				If oRS.Get("status") = "1"
					set oReason.StatusType.Description = "Downtime"
				if oRS.Get("status") = "2"
					set oReason.StatusType.Description = "Production"
				if oRS.Get("status") = "3"
					set oReason.StatusType.Description = "Delay"
				if oRS.Get("status") = "4"
					set oReason.StatusType.Description = "Standby"
				else
					set oReason.StatusType.Description = "Otro"
					
			}else{
				set oReason.StatusType = ##class(ASPMining.CanonicalModel.Operation.StatusType).TypeIndexOpen(oRS.Get("status"))
			}
			
			Set ..%SessionId=""
			
			set sc = ..SendRequestAsync("PowerView Event Operation", oReason)
		}else{
			$$$TRACE("Reason already exists "_oRS.Get("reason")_"...")
		}
		
		Do ..Adapter.SetPersistentValue(..%ConfigName, "LastReasonKey", tLastKey)
	}
	
	
]]></Implementation>
</Method>

<Method name="ProcessNewEquipments">
<Implementation><![CDATA[
	#Dim oRS As EnsLib.SQL.GatewayResultSet
	
	Set tLastKey = ..Adapter.GetPersistentValue(..%ConfigName, "LastEquipmentKey")
	$$$TRACE("Next equipment event ddbkey "_tLastKey_"...")
	
	/// Gets all the new received events where equipment is involved, infer form here which ones are new
	Set tQueryStatement="SELECT ddbkey, eqmtid, size, eqmttype#, eqmttype, unit FROM dbo.hist_eqmtlist_msc WHERE ddbkey>? "

	Set sc = ..Adapter.ExecuteQuery(.oRS, tQueryStatement, tLastKey)
	
	While oRS.Next()
	{
		Set tLastKey = oRS.Get("ddbkey")
		$$$TRACE("Processing equipment ddbkey "_tLastKey_"...")
		
		If '##class(ASPMining.CanonicalModel.Equipment.Equipment).EquipmentIndexExists(oRS.Get("eqmtid")){
			$$$TRACE("Equipment not exists "_oRS.Get("eqmtid")_"...")
			set oEquipment = ##class(ASPMining.CanonicalModel.Equipment.Equipment).%New()
			#Dim oEquipment As ASPMining.CanonicalModel.Equipment.Equipment
			
			set oEquipment.Id = oRS.Get("eqmtid")
			set oEquipment.Name = oRS.Get("unit")_" "_oEquipment.Id
			set oEquipment.Capacity = oRS.Get("size")
			
			If '##class(ASPMining.CanonicalModel.Equipment.EquipmentCategory).EquipmentCategoryIndexExists(oRS.Get("unit")){
				set oEquipment.EquipmentCategory = ##class(ASPMining.CanonicalModel.Equipment.EquipmentCategory).%New() //TODO: obtener antes las eqmttype
				set oEquipment.EquipmentCategory.Name = oRS.Get("unit")
			}else{
				set oEquipment.EquipmentCategory = ##class(ASPMining.CanonicalModel.Equipment.EquipmentCategory).EquipmentCategoryIndexOpen(oRS.Get("unit"),2)
			}
			
			If '##class(ASPMining.CanonicalModel.Equipment.EquipmentModel).EquipmentModelIndexExists(oRS.Get("eqmttype")){
				set oEquipment.EquipmentModel = ##class(ASPMining.CanonicalModel.Equipment.EquipmentModel).%New() //TODO: obtener antes las eqmttype
				set oEquipment.EquipmentModel.Model = oRS.Get("eqmttype")
			}else{
				set oEquipment.EquipmentModel = ##class(ASPMining.CanonicalModel.Equipment.EquipmentModel).EquipmentModelIndexOpen(oRS.Get("eqmttype"),2)
			}
			
			Set ..%SessionId=""
			
			set sc = ..SendRequestAsync("PowerView Event Operation", oEquipment)
		}else{
			$$$TRACE("Equipment already exists "_oRS.Get("eqmtid")_"...")
		}
		
		Do ..Adapter.SetPersistentValue(..%ConfigName, "LastEquipmentKey", tLastKey)
	}
	
	
]]></Implementation>
</Method>

<Method name="OnInit">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   #; initialize persistent last key value
   //Do ..Adapter.InitializePersistentValue(..%ConfigName, "LastEventKey",0)
   Do ..Adapter.InitializePersistentValue(..%ConfigName, "LastEventKey", 0)
   Do ..Adapter.InitializePersistentValue(..%ConfigName, "LastReasonKey", 0)
   Do ..Adapter.InitializePersistentValue(..%ConfigName, "LastEquipmentKey", 0)
   /// lAST eVENT KEY IS A TIMESTAMP KEY
   /// Do ..Adapter.InitializePersistentValue(..%ConfigName, "LastEventKey", $ZDateTime("0,0", 3))
   /// Do ..Adapter.InitializePersistentValue(..%ConfigName, "LastCompletedDumpKey",0)
   Quit $$$OK
]]></Implementation>
</Method>
</Class>
<Class name="SampleDispatch.BS.Event.Service">
<IncludeCode>DEMOMACROS</IncludeCode>
<Super>Ens.BusinessService</Super>

<Parameter name="ADAPTER">
<Description>
We are using this custom adapter that is based on EnsLib.SQL.InboundAdapter to hide some properties we don't
want people to change.</Description>
<Default>SampleDispatch.Adapter.SQL.PeriodicInboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Description>
The Adapter property on Ens.BusinessService points to Ens.InboundAdapter. Polymorphism allows us to assign
an object of any child class of Ens.BusinessService such as EnsLib.SQL.InboundAdapter. But that does't help
us with code completion. When we press "." after ..Adapter, we will only get Methods and Properties from Ens.BusinessService.
By overriding the property here with the right class type, we will be able to use code completion. </Description>
<Type>SampleDispatch.Adapter.SQL.PeriodicInboundAdapter</Type>
</Property>

<Method name="OnProcessInput">
<FormalSpec>pInput:EnsLib.SQL.Snapshot,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set sc = $$$OK
	
	#Dim oEvent As SampleDispatch.BO.Event.StatusChangeEvent
	
	try 
	{
		Do ..ProcessEvents()
		
		Do ..ProcessCompletedDumps()
		
	}
	Catch(oException)
	{
		Set sc = oException.AsStatus()
	}
	
	Quit sc
]]></Implementation>
</Method>

<Method name="ProcessEvents">
<Implementation><![CDATA[
	#Dim oRS As EnsLib.SQL.GatewayResultSet
	
	Set tLastKey = ..Adapter.GetPersistentValue(..%ConfigName, "LastEventKey")
	
	// Ordering by time should not be necessary if this table has a Primary Key that is numeric and sequential. 
	// Actually we are counting on this.
	Set tQueryStatement="SELECT Code->Code StatusCode, Eqmt, EventTime "_
						"FROM SampleDispatch.Events where EventTime>? order by EventTime"
						
	Set sc = ..Adapter.ExecuteQuery(.oRS, tQueryStatement, tLastKey)
	$$$ThrowStatusExceptionIfError(sc, "ProcessEventsQueryException")
	
	While oRS.Next()
	{
		Set tLastKey = oRS.Get("Time")
		$$$TRACE("Processing State Change Event "_tLastKey_"...")
		
		set oEvent = ##class(SampleDispatch.BO.Event.StatusChangeEvent).%New()
		set oEvent.EquipmentId = oRS.Get("Eqmt")
		set oEvent.EventTime = oRS.Get("EventTime")
		set oEvent.NewStatusCode = oRS.Get("StatusCode")
		
		Set ..%SessionId=""
		
		set sc = ..SendRequestAsync("Sample Dispatch Event Operation", oEvent)
		$$$ThrowStatusExceptionIfError(sc, "ProcessSingleEventException")
		
		Do ..Adapter.SetPersistentValue(..%ConfigName, "LastEventKey", tLastKey)
	}
]]></Implementation>
</Method>

<Method name="ProcessCompletedDumps">
<Description>
We will only bring dumps that are COMPLETE. So we are querying for all NEW dumps that have a non null EndTime</Description>
<Implementation><![CDATA[
	#Dim oRS As EnsLib.SQL.GatewayResultSet
	
	Set tLastKey = ..Adapter.GetPersistentValue(..%ConfigName, "LastCompletedDumpKey")
	
	Set tQueryStatement="SELECT ID, Eqmt, ""Time"" StartTime, EndTime, Tons "_
						"FROM SampleDispatch.Dumps where ID>? and EndTime is not null"
						
	Set sc = ..Adapter.ExecuteQuery(.oRS, tQueryStatement, tLastKey)
	$$$ThrowStatusExceptionIfError(sc, "ProcessDumpsQueryException")
	
	While oRS.Next()
	{
		Set tLastKey = oRS.Get("ID")
		$$$TRACE("Processing Dump "_tLastKey_"...")
		
		set oEvent = ##class(SampleDispatch.BO.Event.CompletedDumpEvent).%New()
		set oEvent.EquipmentId = oRS.Get("Eqmt")
		set oEvent.StartTime = oRS.Get("StartTime")
		set oEvent.EndTime = oRS.Get("EndTime")
		set oEvent.Tons = oRS.Get("Tons")
		
		Set ..%SessionId=""
		
		set sc = ..SendRequestAsync("Sample Dispatch Event Operation", oEvent)
		$$$ThrowStatusExceptionIfError(sc, "ProcessSingleDumpException")
		
		Do ..Adapter.SetPersistentValue(..%ConfigName, "LastCompletedDumpKey", tLastKey)
	}
]]></Implementation>
</Method>

<Method name="OnInit">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   #; initialize persistent last key value
   //Do ..Adapter.InitializePersistentValue(..%ConfigName, "LastEventKey",0)
   Do ..Adapter.InitializePersistentValue(..%ConfigName, "LastEventKey", $ZDateTime("0,0", 3))
   Do ..Adapter.InitializePersistentValue(..%ConfigName, "LastCompletedDumpKey",0)
   Quit $$$OK
]]></Implementation>
</Method>
</Class>
<Class name="SampleDispatch.Dumps">
<Super>%Persistent</Super>

<Property name="Time">
<Description>
documentation</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="EndTime">
<Description>
documentation</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="Eqmt">
<Description>
documentation</Description>
<Type>Eqmt</Type>
</Property>

<Property name="Tons">
<Description>
documentation</Description>
<Type>%Float</Type>
</Property>
</Class>
<Class name="SampleDispatch.Eqmt">
<Super>%Persistent</Super>

<Property name="EqmtCode">
<Description>
documentation</Description>
<Type>%Integer</Type>
</Property>

<Property name="Name">
<Description>
documentation</Description>
<Type>%String</Type>
</Property>

<Property name="Capacity">
<Type>%Float</Type>
</Property>

<Index name="EqmtIndex">
<Properties>EqmtCode</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^SampleDispatch.EqmtD</DataLocation>
<DefaultData>EqmtDefaultData</DefaultData>
<IdLocation>^SampleDispatch.EqmtD</IdLocation>
<IndexLocation>^SampleDispatch.EqmtI</IndexLocation>
<StreamLocation>^SampleDispatch.EqmtS</StreamLocation>
<Data name="EqmtDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>EqmtCode</Value>
</Value>
<Value name="3">
<Value>Name</Value>
</Value>
<Value name="4">
<Value>Capacity</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="SampleDispatch.EventCodes">
<Super>%Persistent</Super>

<Property name="Code">
<Description>
documentation</Description>
<Type>%Integer</Type>
</Property>

<Property name="Description">
<Description>
documentation</Description>
<Type>%String</Type>
</Property>

<Index name="CodeIndex">
<Description>
documentation
Property CodeType As type;</Description>
<Properties>Code</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^SampleDispatch.EventCodesD</DataLocation>
<DefaultData>EventCodesDefaultData</DefaultData>
<IdLocation>^SampleDispatch.EventCodesD</IdLocation>
<IndexLocation>^SampleDispatch.EventCodesI</IndexLocation>
<StreamLocation>^SampleDispatch.EventCodesS</StreamLocation>
<Data name="EventCodesDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Code</Value>
</Value>
<Value name="3">
<Value>Description</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="SampleDispatch.Events">
<Super>%Persistent</Super>

<Property name="EventTime">
<Description>
documentation</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="Code">
<Description>
documentation</Description>
<Type>EventCodes</Type>
<Required>1</Required>
</Property>

<Property name="Eqmt">
<Description>
documentation</Description>
<Type>Eqmt</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^SampleDispatch.EventsD</DataLocation>
<DefaultData>EventsDefaultData</DefaultData>
<IdLocation>^SampleDispatch.EventsD</IdLocation>
<IndexLocation>^SampleDispatch.EventsI</IndexLocation>
<StreamLocation>^SampleDispatch.EventsS</StreamLocation>
<Data name="EventsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>EventTime</Value>
</Value>
<Value name="3">
<Value>Code</Value>
</Value>
<Value name="4">
<Value>Eqmt</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="SampleDispatch.Loads">
<Super>%Persistent</Super>

<Property name="Time">
<Description>
documentation</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="Eqmt">
<Description>
documentation</Description>
<Type>Eqmt</Type>
</Property>

<Property name="Tons">
<Description>
documentation</Description>
<Type>%Float</Type>
</Property>
</Class>
<Class name="SampleDispatch.Operators">
<Super>%Persistent</Super>

<Property name="Shift">
<Description>
documentation</Description>
<Type>Shifts</Type>
</Property>

<Property name="OperatorId">
<Description>
documentation</Description>
<Type>%String</Type>
</Property>

<Property name="Eqmt">
<Description>
documentation</Description>
<Type>Eqmt</Type>
</Property>

<Index name="OperatorIdIndex">
<Properties>OperatorId</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^SampleDispatch.OperatorsD</DataLocation>
<DefaultData>OperatorsDefaultData</DefaultData>
<IdLocation>^SampleDispatch.OperatorsD</IdLocation>
<IndexLocation>^SampleDispatch.OperatorsI</IndexLocation>
<StreamLocation>^SampleDispatch.OperatorsS</StreamLocation>
<Data name="OperatorsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Shift</Value>
</Value>
<Value name="3">
<Value>OperatorId</Value>
</Value>
<Value name="4">
<Value>Eqmt</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="SampleDispatch.Shifts">
<Super>%Persistent</Super>

<Property name="ShiftId">
<Description>
documentation</Description>
<Type>%Integer</Type>
</Property>

<Property name="StartTime">
<Description>
documentation</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="EndTime">
<Description>
documentation</Description>
<Type>%TimeStamp</Type>
</Property>

<Index name="ShiftIdIndex">
<Properties>ShiftId</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^SampleDispatch.ShiftsD</DataLocation>
<DefaultData>ShiftsDefaultData</DefaultData>
<IdLocation>^SampleDispatch.ShiftsD</IdLocation>
<IndexLocation>^SampleDispatch.ShiftsI</IndexLocation>
<StreamLocation>^SampleDispatch.ShiftsS</StreamLocation>
<Data name="ShiftsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ShiftId</Value>
</Value>
<Value name="3">
<Value>StartTime</Value>
</Value>
<Value name="4">
<Value>EndTime</Value>
</Value>
</Data>
</Storage>
</Class>
<Class name="SampleDispatch.Utils">
<IncludeCode>DEMOMACROS</IncludeCode>

<Method name="LoadEverything">
<Description>
documentation</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
		Do ..LoadEqmt("/tmp/sample_mining_db_eqmt.csv")
		Do ..LoadShifts("/tmp/sample_mining_db_shifts.csv")
		Do ..LoadEventCodes("/tmp/sample_mining_db_event_codes.csv")
		Do ..LoadEvents("/tmp/sample_mining_db_events.csv")
		Do ..LoadOperators("/tmp/sample_mining_db_operators.csv")
		Do ..LoadLoads("/tmp/sample_mining_db_loads.csv")
		Do ..LoadDumps("/tmp/sample_mining_db_dumps.csv")
]]></Implementation>
</Method>

<Method name="LoadEqmt">
<ClassMethod>1</ClassMethod>
<FormalSpec>filename:%String</FormalSpec>
<Implementation><![CDATA[
		#Dim objRs As %Library.ResultSet
		#Dim objPatient As Patient
		
		set objRs = ##class(%Library.ResultSet).%New("IRISDemo.Util.FileReader:CSV")

		Set tSC = objRs.Execute( filename) 
		$$$ThrowStatusExceptionIfError(tSC, "LoadItemMasterFileException")
		
		While objRs.Next() 
		{
			set obj = ##class(SampleDispatch.Eqmt).%New()
		
			Set obj.EqmtCode =  objRs.Get("eqmt")
			if (obj.EqmtCode = "")
			{
				Quit
			}
			Set obj.Name =  objRs.Get("Name")
			
			Set tSC = obj.%Save()
			$$$ThrowStatusExceptionIfError(tSC, "LoadEqmtSaveException")
		}
]]></Implementation>
</Method>

<Method name="LoadEventCodes">
<ClassMethod>1</ClassMethod>
<FormalSpec>filename:%String</FormalSpec>
<Implementation><![CDATA[
		#Dim objRs As %Library.ResultSet
		#Dim objPatient As Patient
		
		set objRs = ##class(%Library.ResultSet).%New("IRISDemo.Util.FileReader:CSV")

		Set tSC = objRs.Execute( filename) 
		$$$ThrowStatusExceptionIfError(tSC, "LoadFileException")
		
		While objRs.Next() 
		{
			set obj = ##class(SampleDispatch.EventCodes).%New()
		
			Set obj.Code =  objRs.Get("code")
			Set obj.Description =  objRs.Get("description")
			
			Set tSC = obj.%Save()
			$$$ThrowStatusExceptionIfError(tSC, "LoadEventCodesSaveException")
		}
]]></Implementation>
</Method>

<Method name="LoadEvents">
<ClassMethod>1</ClassMethod>
<FormalSpec>filename:%String</FormalSpec>
<Implementation><![CDATA[
		#Dim objRs As %Library.ResultSet
		#Dim objPatient As Patient
		
		set objRs = ##class(%Library.ResultSet).%New("IRISDemo.Util.FileReader:CSV")

		Set tSC = objRs.Execute( filename) 
		$$$ThrowStatusExceptionIfError(tSC, "LoadFileException")
		
		While objRs.Next() 
		{
			set obj = ##class(SampleDispatch.Events).%New()
		
			Set obj.EventTime = ..FixTimeStamp(objRs.Get("time"))
			Set obj.Code =  ##class(SampleDispatch.EventCodes).CodeIndexOpen(objRs.Get("code"))
			Set obj.Eqmt = ##class(SampleDispatch.Eqmt).EqmtIndexOpen(objRs.Get("eqmt"))
			
			Set tSC = obj.%Save()
			$$$ThrowStatusExceptionIfError(tSC, "LoadEventsSaveException")
		}
]]></Implementation>
</Method>

<Method name="LoadOperators">
<ClassMethod>1</ClassMethod>
<FormalSpec>filename:%String</FormalSpec>
<Implementation><![CDATA[
		#Dim objRs As %Library.ResultSet
		#Dim objPatient As Patient
		
		set objRs = ##class(%Library.ResultSet).%New("IRISDemo.Util.FileReader:CSV")

		Set tSC = objRs.Execute( filename) 
		$$$ThrowStatusExceptionIfError(tSC, "LoadFileException")
		
		While objRs.Next() 
		{				
			set obj = ##class(SampleDispatch.Operators).%New()
		
			Set obj.Shift = ##class(SampleDispatch.Shifts).ShiftIdIndexOpen(objRs.Get("shiftid"))
			Set obj.OperatorId = objRs.Get("opid")
			Set obj.Eqmt = ##class(SampleDispatch.Eqmt).EqmtIndexOpen(objRs.Get("eqmt"))
			
			Set tSC = obj.%Save()
			$$$ThrowStatusExceptionIfError(tSC, "LoadOperatorsSaveException")
		}
]]></Implementation>
</Method>

<Method name="LoadShifts">
<ClassMethod>1</ClassMethod>
<FormalSpec>filename:%String</FormalSpec>
<Implementation><![CDATA[
		#Dim objRs As %Library.ResultSet
		#Dim objPatient As Patient
		
		set objRs = ##class(%Library.ResultSet).%New("IRISDemo.Util.FileReader:CSV")

		Set tSC = objRs.Execute( filename) 
		$$$ThrowStatusExceptionIfError(tSC, "LoadFileException")
		
		While objRs.Next() 
		{
			set obj = ##class(SampleDispatch.Shifts).%New()
		
			Set obj.ShiftId = objRs.Get("shiftid")
			Set obj.StartTime = ..FixTimeStamp(objRs.Get("start_time"))
			Set obj.EndTime = ..FixTimeStamp(objRs.Get("end_time"))
			
			Set tSC = obj.%Save()
			$$$ThrowStatusExceptionIfError(tSC, "LoadShiftsSaveException")
		}
]]></Implementation>
</Method>

<Method name="LoadLoads">
<ClassMethod>1</ClassMethod>
<FormalSpec>filename:%String</FormalSpec>
<Implementation><![CDATA[
		#Dim objRs As %Library.ResultSet
		#Dim objPatient As Patient
		
		set objRs = ##class(%Library.ResultSet).%New("IRISDemo.Util.FileReader:CSV")

		Set tSC = objRs.Execute( filename) 
		$$$ThrowStatusExceptionIfError(tSC, "LoadItemMasterFileException")
		
		While objRs.Next() 
		{		
			set obj = ##class(SampleDispatch.Loads).%New()
			Set obj.Eqmt =  ##class(SampleDispatch.Eqmt).EqmtIndexOpen(objRs.Get("eqmt"))
			Set obj.Time =  ..FixTimeStamp(objRs.Get("time"))
			Set obj.Tons =  objRs.Get("tons")
			
			Set tSC = obj.%Save()
			$$$ThrowStatusExceptionIfError(tSC, "LoadLoadsSaveException")
		}
]]></Implementation>
</Method>

<Method name="LoadDumps">
<ClassMethod>1</ClassMethod>
<FormalSpec>filename:%String</FormalSpec>
<Implementation><![CDATA[
		#Dim objRs As %Library.ResultSet
		#Dim objPatient As Patient
		
		set objRs = ##class(%Library.ResultSet).%New("IRISDemo.Util.FileReader:CSV")

		Set tSC = objRs.Execute( filename) 
		$$$ThrowStatusExceptionIfError(tSC, "LoadItemMasterFileException")
		
		While objRs.Next() 
		{
			set obj = ##class(SampleDispatch.Dumps).%New()
			Set obj.Eqmt =  ##class(SampleDispatch.Eqmt).EqmtIndexOpen(objRs.Get("eqmt"))
			Set obj.Time =  ..FixTimeStamp(objRs.Get("time"))
			Set obj.EndTime =  ..FixTimeStamp(objRs.Get("end_time"))
			Set obj.Tons =  objRs.Get("tons")
			
			
			Set tSC = obj.%Save()
			$$$ThrowStatusExceptionIfError(tSC, "LoadDumpsSaveException")
		}
]]></Implementation>
</Method>

<Method name="FixTimeStamp">
<ClassMethod>1</ClassMethod>
<FormalSpec>time:%String</FormalSpec>
<ReturnType>%TimeStamp</ReturnType>
<Implementation><![CDATA[
		Quit $ZDateTime($ZDateTimeH(time,,,,6),3)
]]></Implementation>
</Method>
</Class>
</Export>
