"use strict";

window.IRIS_URL = 'http://dev.austekchile.cl:52773/APPINT/MDX?Namespace=APPINT';
$.extend(true, $.fn.dataTable.defaults, {
  language: {
    emptyTable: "<div class=\"alert alert-info no-margin\">No se han encontrado elementos</div>",
    zeroRecords: "<div class=\"alert alert-info no-margin\">No se han encontrado elementos</div>",
    info: 'Mostrando _START_ al _END_ de un total de _TOTAL_ elementos',
    infoEmpty: 'Mostrando 0 al 0 de un total de 0 elementos',
    infoFiltered: '(filtrado de un total de _MAX_ elementos)',
    lengthMenu: 'Mostrar _MENU_ elementos',
    loadingRecords: 'Cargando...',
    processing: 'Procesando...',
    search: '',
    searchPlaceholder: 'Buscar',
    paginate: {
      first: 'Primero',
      last: 'Ãšltimo',
      next: 'Siguiente',
      previous: 'Previo'
    },
    aria: {
      sortAscending: ': activar para ordenar la columna de manera ascendente',
      sortDescending: ': activar para ordenar la columna de manera descendente'
    }
  }
});
;

(function () {
  'use strict';

  window.angular.module('app', ['ngSanitize', 'angular-storage', 'ui.router', 'ui.select', 'ui.bootstrap', 'ui.bootstrap.datetimepicker']);
})();
"use strict";

;

(function () {
  'use strict';

  var angular = window.angular;
  AppConfig.$inject = ['$locationProvider', '$httpProvider'];
  angular.module('app').config(AppConfig);

  function AppConfig($locationProvider, $httpProvider) {
    $locationProvider.html5Mode(true).hashPrefix('#');
    $httpProvider.interceptors.push('IrisInterceptor');
  }
})();
"use strict";

(function () {
  'use strict';

  var angular = window.angular;
  AppRouter.$inject = ['$urlRouterProvider', '$stateProvider'];
  angular.module('app').config(AppRouter);

  function AppRouter($urlRouterProvider, $stateProvider) {
    $urlRouterProvider.otherwise('');
    $stateProvider.state('home', {
      url: '/',
      component: 'home'
    }).state('mineOperation', {
      url: '/mine-operation',
      component: 'mineOperation',
      redirectTo: 'mineOperation.production'
    }).state('mineOperation.oee', {
      url: '/oee',
      component: 'moOee',
      redirectTo: 'mineOperation.oee.overview'
    }).state('mineOperation.oee.overview', {
      url: '/overview',
      component: 'oeeOverview'
    }).state('mineOperation.oee.timePerformance', {
      url: '/time-performance',
      component: 'oeeTimePerformance'
    }).state('mineOperation.oee.utilization', {
      url: '/utilization',
      component: 'oeeUtilization'
    }).state('mineOperation.oee.capacityPerformance', {
      url: '/capacity-performance',
      component: 'oeeCapacityPerformance'
    }).state('mineOperation.production', {
      url: '/production',
      component: 'moProduction',
      redirectTo: 'mineOperation.production.realtime'
    }).state('mineOperation.production.realtime', {
      url: '/realtime',
      component: 'productionRealtime'
    }).state('mineOperation.production.ranking', {
      url: '/ranking',
      component: 'productionRanking'
    }).state('mineOperation.production.compliance', {
      url: '/compliance',
      component: 'productionCompliance'
    }).state('mineOperation.miningPlan', {
      url: '/mining-plan',
      component: 'moMiningPlan',
      redirectTo: 'mineOperation.miningPlan.index'
    }).state('mineOperation.miningPlan.index', {
      url: '/',
      component: 'miningPlanIndex'
    }).state('mineOperation.miningPlan.tracing', {
      url: '/tracing',
      component: 'miningPlanTracing'
    });
  }
})();
"use strict";

(function () {
  Runner.$inject = ['$rootScope', '$transitions', '$state', '$uibModalStack', 'IrisUtils'];
  window.angular.module('app').run(Runner);

  function Runner($root, $transitions, $state, $uibModalStack, IrisUtils) {
    $root.appReady = true;
    $transitions.onBefore({}, function (transition) {
      var next = transition.$to().self;
      var loginState = $state.target('public.login');
      var member = $state.target('member.home');

      if (next.login) {} else if (next.authenticated) {}

      return Promise.resolve();
    });
    $transitions.onError({}, function (transition) {
      var error = transition.error();

      if (error) {
        if (error.type === 5) {
          $root.viewLoading = false;
        }

        if (error.detail) {
          if (error.detail.redirectTo) {
            $state.go(error.detail.redirectTo, error.detail.params);
          } else if (error.detail.status === 401) {
            $state.go('public.login');
          } else if (error.type !== 2) {
            console.log(error);
            $state.go('member.home');
          }
        }
      }
    });
    $transitions.onStart({}, function (transition) {
      $uibModalStack.dismissAll();
      $root.viewLoading = true;
    });
    $transitions.onFinish({}, function (transition) {
      $root.viewLoading = false;
    });
  }
})();
"use strict";

(function () {
  var angular = window.angular;
  IrisInterceptor.$inject = [];
  angular.module('app').factory('IrisInterceptor', IrisInterceptor);

  function IrisInterceptor() {
    return {
      request: function request(config) {
        if (config.url.indexOf('dev.austekchile.cl') !== -1) {
          config.headers['Authorization'] = 'Basic U3VwZXJVc2VyOnN5cw==';
          config.headers['Content-Type'] = 'application/json';
        }

        return config;
      }
    };
  }
})();
"use strict";

;

(function () {
  'use strict';

  var angular = window.angular;
  Runner.$inject = ['$templateCache'];
  angular.module('app').run(Runner);

  function Runner($templateCache) {
    $templateCache.put('template/time-picker.html', "<ul class=\"dropdown-menu dropdown-menu-left datetime-picker-dropdown\" ng-show=\"isOpen && showPicker === 'time'\"\n            ng-style=\"dropdownStyle\" style=\"left:inherit\" ng-keydown=\"keydown($event)\" ng-click=\"$event.preventDefault(); $event.stopPropagation()\">\n            <li style=\"padding:0 5px 5px 5px\" class=\"time-picker-menu\">\n                <div ng-transclude></div>\n            </li>\n            <li style=\"padding:5px\" ng-if=\"buttonBar.show\">\n              <span class=\"btn-group pull-left\" style=\"margin-right:10px\" ng-if=\"doShow('now') || doShow('clear')\">\n                  <button type=\"button\" class=\"btn\" ng-class=\"getClass('now')\" ng-if=\"doShow('now')\" \n                          ng-click=\"select('now', $event)\" ng-disabled=\"isDisabled('now')\">{{ getText('now') }}\n                  </button> \n                  <button type=\"button\" class=\"btn\" ng-class=\"getClass('clear')\" ng-if=\"doShow('clear')\" \n                          ng-click=\"select('clear', $event)\">{{ getText('clear') }}\n                  </button>\n              </span>\n              <span class=\"btn-group pull-right\" ng-if=\"(doShow('date') && enableDate) || doShow('close') || doShow('cancel')\">\n                  <button type=\"button\" class=\"btn\" ng-class=\"getClass('date')\" ng-if=\"doShow('date') && enableDate\" ng-click=\"open('date', $event)\">{{ getText('date')}}</button>\n                  <button type=\"button\" class=\"btn\" ng-class=\"getClass('close')\" ng-if=\"doShow('close')\" ng-click=\"close(true, $event)\">{{ getText('close') }}</button> \n                  <button type=\"button\" class=\"btn\" ng-class=\"getClass('cancel')\" ng-if=\"doShow('cancel')\" ng-click=\"cancel($event)\">{{ getText('cancel') }}</button>\n              </span> \n              <span class=clearfix></span>\n            </li>\n      </ul>");
    $templateCache.put('template/date-picker.html', "<ul class=\"dropdown-menu dropdown-menu-left datetime-picker-dropdown\" ng-show=\"isOpen && showPicker === 'date'\" ng-style=\"dropdownStyle\" style=\"left:inherit\" ng-click=\"$event.preventDefault(); $event.stopPropagation()\">\n            <li style=\"padding:0 5px 5px 5px\" class=\"date-picker-menu\">\n                <div ng-transclude></div>\n            </li>\n            <li style=\"padding:5px\" ng-if=\"buttonBar.show\">\n                <span class=\"btn-group pull-left\" style=\"margin-right:10px\" ng-if=\"doShow('today') || doShow('clear')\">\n                    <button type=\"button\" class=\"btn\" ng-class=\"getClass('today')\" ng-if=\"doShow('today')\" ng-click=\"select('today', $event)\" ng-disabled=\"isDisabled('today')\">{{ getText('today') }}</button>\n                    <button type=\"button\" class=\"btn\" ng-class=\"getClass('clear')\" ng-if=\"doShow('clear')\" ng-click=\"select('clear', $event)\">{{ getText('clear') }}</button>\n                </span> \n                <span class=\"btn-group pull-right\" ng-if=\"(doShow('time') && enableTime) || doShow('close') || doShow('cancel')\">\n                    <button type=\"button\" class=\"btn\" ng-class=\"getClass('time')\" ng-if=\"doShow('time') && enableTime\" ng-click=\"open('time', $event)\">{{ getText('time')}}</button>\n                    <button type=\"button\" class=\"btn\" ng-class=\"getClass('close')\" ng-if=\"doShow('close')\" ng-click=\"close(true, $event)\">{{ getText('close') }}</button> \n                    <button type=\"button\" class=\"btn\" ng-class=\"getClass('cancel')\" ng-if=\"doShow('cancel')\" ng-click=\"cancel($event)\">{{ getText('cancel') }}</button>\n                </span> \n                <span class=clearfix></span>\n            </li>\n      </ul>");
  }
})();
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

(function () {
  var angular = window.angular;
  Controller.$inject = ['$rootScope'];
  angular.module('app').component('multiSelectDropdown', {
    template: '<div style="display: block" class="btn-group" uib-dropdown on-toggle="ctrl.onToggle(open)" auto-close="outsideClick"><button class="btn btn-block btn-white" uib-dropdown-toggle ng-disabled="!ctrl.items.length || ctrl.disabled"><span ng-show="ctrl.items.length"><span ng-if="ctrl.selectedItems.length">{{ctrl.selectedItems.length}} Seleccionados</span> <span ng-if="!ctrl.selectedItems.length">{{ctrl.label || \'Seleccionar\'}}</span></span> <span ng-show="!ctrl.items.length">No hay elementos disponibles</span> <span class="caret"></span></button><ul class="dropdown-menu" uib-dropdown-menu style="max-height: 300px; overflow-y: auto; width: 100%"><li ng-show="!ctrl.items.length" class="marginTB20 text-center"><strong>No se han encontrado elementos</strong></li><li><a ng-click="ctrl.selectAll()" class="cursor-pointer"><i class="fas fa-fw fa-check"></i> Seleccionar Todo</a></li><li><a ng-click="ctrl.unSelectAll()" class="cursor-pointer"><i class="fas fa-fw fa-times"></i> Deseleccionar Todo</a></li><li class="divider"></li><li class="paddingLR10"><input class="form-control input-xs" placeholder="Buscar" ng-model="search.name"></li><li class="divider"></li><li ng-repeat="item in ctrl.items | filter:search"><label class="checkbox marginLR10 cursor-pointer"><input type="checkbox" ng-model="item.selected" ng-change="ctrl.toggleItem(item)"> <i></i> <span>{{item.name}}</span></label></li></ul></div>',
    controller: Controller,
    controllerAs: 'ctrl',
    bindings: {
      items: '<',
      selectedItems: '<',
      onSelect: '&',
      disabled: '<'
    }
  });

  function Controller($root) {
    var vm = this;

    vm.$onInit = function () {
      vm.items = vm.items || [];
      vm.selectedItems = vm.selectedItems || [];
      vm.toggleItem = toggleItem;
      vm.selectAll = selectAll;
      vm.unSelectAll = unSelectAll;
      vm.isOpened = false;
      vm.onToggle = onToggle;
    };

    vm.$onChanges = function () {
      vm.selectedItems = vm.selectedItems || [];
      vm.selectedItems.forEach(function (current) {
        current.selected = true;
      });
    };

    function toggleItem(item) {
      var index = vm.selectedItems.findIndex(function (current) {
        return current === item;
      });

      if (index === -1) {
        vm.selectedItems.push(item);
      } else {
        vm.selectedItems.splice(index, 1);
      }
    }

    function selectAll() {
      vm.selectedItems.splice(0, vm.selectedItems.length);

      var _iterator = _createForOfIteratorHelper(vm.items),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var item = _step.value;
          item.selected = true;
          vm.selectedItems.push(item);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    function unSelectAll() {
      vm.selectedItems.splice(0, vm.selectedItems.length);

      var _iterator2 = _createForOfIteratorHelper(vm.items),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var item = _step2.value;
          item.selected = false;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }

    function onToggle(open) {
      if (!open) {
        vm.onSelect();
      }
    }
  }
})();
"use strict";

;

(function () {
  'use strict';

  var angular = window.angular;
  NavBarController.$inject = ['$rootScope'];
  angular.module('app').component('navBar', {
    template: '<nav class="navbar navbar-inverse collapsed"><div class="row-flex"><div class="col-sm hidden-sm hidden-xs"><div class="navbar-header"><button type="button" class="navbar-toggle" ng-click="ctrl.isNavCollapsed = !ctrl.isNavCollapsed" aria-expanded="false" aria-controls="navbar"><span class="sr-only">Toggle navigation</span> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span></button> <a class="navbar-brand" ui-sref="home"><span class="brand-full"></span></a></div></div><div class="col-sm"><h1 class="app-name">IRIS Mining Platform</h1></div><div class="col-sm hidden-sm hidden-xs"></div></div></nav><script type="text/ng-template" id="sidebar-template.html"><ul role="tablist" ng-transclude class="nav" id="side-menu"></ul></script><script type="text/ng-template" id="sidebar-dropdown.html"><a href tabindex="0" class="accordion-toggle" ng-click="toggleOpen()" uib-accordion-transclude="heading"> <span uib-accordion-header ng-class="{\'text-muted\': isDisabled}"> {{heading}} </span> <span class="fas arrow hide-collapsed"></span> </a> <div ng-transclude uib-collapse="!isOpen"> </div></script>',
    controller: NavBarController,
    controllerAs: 'ctrl'
  });

  function NavBarController($rootScope) {
    var vm = this;

    vm.$onInit = function () {
      vm.toggleFullScreen = toggleFullScreen;
    };

    function toggleFullScreen() {
      var element = window.document.documentElement;

      if (!vm.fullScreen) {
        if (element.requestFullscreen) {
          element.requestFullscreen();
        } else if (element.mozRequestFullScreen) {
          element.mozRequestFullScreen();
        } else if (element.webkitRequestFullscreen) {
          element.webkitRequestFullscreen();
        } else if (element.msRequestFullscreen) {
          element.msRequestFullscreen();
        }
      } else {
        if (document.exitFullscreen) {
          document.exitFullscreen();
        } else if (document.mozCancelFullScreen) {
          document.mozCancelFullScreen();
        } else if (document.webkitExitFullscreen) {
          document.webkitExitFullscreen();
        }
      }

      vm.fullScreen = !vm.fullScreen;
    }
  }
})();
"use strict";

;

(function () {
  'use strict';

  window.angular.module('app').component('spinner', {
    template: "<div class=\"spinner-container {{ctrl.cssClass}}\" ng-hide=\"!ctrl.show\">\n          <div class=\"text-spinner\">\n            <div class=\"spinner\" ng-class=\"{'spinner-ready': !ctrl.show}\">\n              <div class=\"spinner-bg\"></div>\n              <div class=\"spinner-logo\" ng-if=\"ctrl.showLogo\"></div>\n            </div>\n            <div class=\"spinner-message\">\n               {{ctrl.text}}\n            </div>\n          </div>\n        </div>",
    controller: Controller,
    controllerAs: 'ctrl',
    bindings: {
      show: '<',
      text: '<',
      cssClass: '<',
      showLogo: '<?'
    }
  });

  function Controller() {
    var vm = this;

    vm.$onInit = function () {
      vm.showLogo = typeof vm.showLogo === 'boolean' ? vm.showLogo : false;
    };
  }
})();
"use strict";

;

(function () {
  DateUtils.$inject = [];
  angular.module('app').service('DateUtils', DateUtils);

  function DateUtils() {
    return {
      pad: pad,
      daysBetween: daysBetween,
      minutesBetween: minutesBetween,
      allDaysBetween: allDaysBetween,
      hoursBetween: hoursBetween,
      allHoursBetween: allHoursBetween
    };

    function daysBetween(date1, date2) {
      return Math.abs(Math.floor((date2.getTime() - date1.getTime()) / (1000 * 3600 * 24)));
    }

    function minutesBetween(date1, date2) {
      return Math.abs(Math.floor((date2.getTime() - date1.getTime()) / (1000 * 60)));
    }

    function allDaysBetween(date1, date2) {
      if (date1 >= date2) {
        return [];
      }

      var days = [];

      for (var date = new Date(date1.getTime()); date <= date2; date.setDate(date.getDate() + 1)) {
        var current = new Date(date.getTime());
        current.setHours(0, 0, 0, 0);
        days.push(current);
      }

      return days;
    }

    function hoursBetween(date1, date2) {
      return Math.abs(Math.floor((date2.getTime() - date1.getTime()) / (1000 * 3600)));
    }

    function allHoursBetween(date1, date2) {
      if (date1 >= date2) {
        return [];
      }

      var hours = [];

      for (var date = new Date(date1.getTime()); date <= date2; date.setHours(date.getHours() + 1)) {
        var current = new Date(date.getTime());
        current.setMinutes(0, 0, 0);
        hours.push(current);
      }

      return hours;
    }

    function pad(number) {
      return ('0' + number).slice(-2);
    }
  }
})();
"use strict";

(function () {
  var angular = window.angular;
  var DEFAULT_CUBE = 'ASPMINING.ANALYTICS.STATUSEVENTSLICEDCUBE';
  Service.$inject = ['IrisUtils', 'Utils'];
  angular.module('app').service('EquipmentCategory', Service);

  function Service(IrisUtils, utils) {
    return {
      find: find
    };

    function find(from, to, cube) {
      cube = cube || DEFAULT_CUBE;
      var fromNumber = IrisUtils.getDateNumber(from);
      var toNumber = IrisUtils.getDateNumber(to);
      var rows = [{
        dimension: 'Equipment',
        hierarchy: 'H1',
        hierarchyLevel: 'Category',
        members: 'Members'
      }];
      var dates = fromNumber;

      if (fromNumber !== toNumber) {
        dates = [fromNumber, toNumber];
      }

      var filters = [{
        dimension: 'SLICESTARTDATE',
        hierarchy: 'H1',
        hierarchyLevel: 'SLICESTARTDATEDAY',
        values: [dates]
      }];
      var query = IrisUtils.buildQuery(cube, null, rows, null, filters);
      return IrisUtils.executeQuery(query).then(function (data) {
        return data.Cols[1].tuples.map(function (current) {
          return {
            name: current.caption,
            path: current.path,
            id: current.valueID
          };
        });
      });
    }
  }
})();
"use strict";

(function () {
  var angular = window.angular;
  var DEFAULT_CUBE = 'ASPMINING.ANALYTICS.STATUSEVENTSLICEDCUBE';
  Service.$inject = ['IrisUtils', 'Utils'];
  angular.module('app').service('Equipment', Service);

  function Service(IrisUtils, utils) {
    return {
      statusData: statusData,
      statusDetails: statusDetails
    };

    function statusData(from, to, categories, equipments, rowType) {
      var cube = 'ASPMINING.ANALYTICS.STATUSEVENTSLICEDCUBE';
      var rows;

      switch (rowType) {
        case 'equipment':
          rows = [{
            dimension: 'Equipment',
            hierarchy: 'H1',
            hierarchyLevel: 'Name',
            members: 'Members'
          }];
          break;

        case 'day':
          rows = [{
            dimension: 'SliceStartDate',
            hierarchy: 'H1',
            hierarchyLevel: 'SliceStartDateDay',
            members: 'Members'
          }];
          break;

        case 'minute':
        default:
          rows = [{
            dimension: 'SliceStartDate',
            hierarchy: 'H1',
            hierarchyLevel: 'SliceStartDateMinute',
            members: 'Members'
          }];
      }

      var fromNumber = IrisUtils.getDateNumber(from);
      var toNumber = IrisUtils.getDateNumber(to);
      var columns = [];
      ['Operative', 'Delay', 'Standby', 'Downtime'].forEach(function (current) {
        columns.push({
          dimension: 'StatusType',
          hierarchy: 'H1',
          hierarchyLevel: 'StatusType',
          members: "&[".concat(current, "]")
        });
      });
      var dates = fromNumber;

      if (fromNumber !== toNumber) {
        dates = [fromNumber, toNumber];
      }

      var filters = [{
        dimension: 'SLICESTARTDATE',
        hierarchy: 'H1',
        hierarchyLevel: 'SLICESTARTDATEDAY',
        values: [dates]
      }];

      if (equipments && equipments.length) {
        filters.push({
          dimension: 'EQUIPMENT',
          hierarchy: 'H1',
          hierarchyLevel: 'Name',
          values: Array.isArray(equipments) ? equipments.map(function (current) {
            return current.name;
          }) : [equipments.name]
        });
      } else {
        filters.push({
          dimension: 'EQUIPMENT',
          hierarchy: 'H1',
          hierarchyLevel: 'CATEGORY',
          values: Array.isArray(categories) ? categories.map(function (current) {
            return current.name;
          }) : [categories.name]
        });
      }

      var query = IrisUtils.buildQuery(cube, columns, rows, ['PartialDuration'], filters);
      return IrisUtils.executeQuery(query).then(function (data) {
        return IrisUtils.parseTwoDimensionalResponse(data, true);
      });
    }

    function statusDetails(from, to, categories, equipments, status) {
      var cube = 'ASPMINING.ANALYTICS.STATUSEVENTSLICEDCUBE';
      var fromNumber = IrisUtils.getDateNumber(from);
      var toNumber = IrisUtils.getDateNumber(to);
      var columns = [{
        dimension: 'Reason',
        hierarchy: 'H1',
        hierarchyLevel: 'Description',
        members: "Members"
      }];
      var rows = [{
        dimension: 'SliceStartDate',
        hierarchy: 'H1',
        hierarchyLevel: 'SliceStartDateMinute',
        members: 'Members'
      }];
      var dates = fromNumber;

      if (fromNumber !== toNumber) {
        dates = [fromNumber, toNumber];
      }

      var filters = [{
        dimension: 'SLICESTARTDATE',
        hierarchy: 'H1',
        hierarchyLevel: 'SLICESTARTDATEDAY',
        values: [dates]
      }, {
        dimension: 'STATUSTYPE',
        hierarchy: 'H1',
        hierarchyLevel: 'STATUSTYPE',
        values: [status]
      }];

      if (equipments && equipments.length) {
        filters.push({
          dimension: 'EQUIPMENT',
          hierarchy: 'H1',
          hierarchyLevel: 'Name',
          values: Array.isArray(equipments) ? equipments.map(function (current) {
            return current.name;
          }) : [equipments.name]
        });
      } else {
        filters.push({
          dimension: 'EQUIPMENT',
          hierarchy: 'H1',
          hierarchyLevel: 'CATEGORY',
          values: Array.isArray(categories) ? categories.map(function (current) {
            return current.name;
          }) : [categories.name]
        });
      }

      var query = IrisUtils.buildQuery(cube, columns, rows, ['PartialDuration'], filters);
      return IrisUtils.executeQuery(query).then(function (data) {
        return IrisUtils.parseTwoDimensionalResponse(data);
      });
    }
  }
})();
"use strict";

(function () {
  IrisUtils.$inject = ['$http', 'Utils'];
  window.angular.module('app').service('IrisUtils', IrisUtils);

  function IrisUtils($http, utils) {
    var referenceDay = moment(new Date('2018/01/01'));
    var referenceNumber = 64649;
    return {
      getDateNumber: getDateNumber,
      getPath: getPath,
      buildQuery: buildQuery,
      executeQuery: executeQuery,
      parseTwoDimensionalResponse: parseTwoDimensionalResponse,
      parseTreeDimensionalResponse: parseTreeDimensionalResponse
    };

    function executeQuery(query) {
      return $http.post(window.IRIS_URL, {
        'MDX': query
      }).then(function (response) {
        return response.data;
      })["catch"](function (response) {
        return Promise.reject(utils.getHTTPError(response));
      });
    }

    function getDateNumber(date) {
      var momentDate = moment(date);
      return referenceNumber + momentDate.diff(referenceDay, 'days');
    }

    function getPath(el) {
      return el.path || "[".concat(el.dimension, "].[").concat(el.hierarchy, "].[").concat(el.hierarchyLevel, "].").concat(el.members);
    }

    function getFilterPath(filter) {
      var result = '';
      result += filter.values.map(function (value) {
        var valueStr = value;

        if (Array.isArray(value)) {
          valueStr = value.join(']:&[');
        }

        return "[".concat(filter.dimension, "].[").concat(filter.hierarchy, "].[").concat(filter.hierarchyLevel, "].&[").concat(valueStr, "]");
      }).join(',');

      if (filter.values.length > 1) {
        result = '%OR({' + result + '})';
      }

      return result;
    }

    function buildQuery(cube, columns, rows, measures, filters) {
      var colString = buildColumns(columns);
      var rowString = buildRows(rows);
      var measureString = buildMeasures(measures);
      var query = 'SELECT';

      if (colString && measureString) {
        query += " NON EMPTY NONEMPTYCROSSJOIN(".concat(colString, ", ").concat(measureString, ") ON 0");
      } else if (colString) {
        query += " NON EMPTY ".concat(colString, " ON 0");
      } else if (measureString) {
        query += "".concat(measureString, " ON 0");
      }

      if (rowString) {
        query += colString || measureString ? ',' : '';
        query += " NON EMPTY ".concat(rowString, " ON 1");
      }

      query += " FROM [".concat(cube, "]");

      if (filters) {
        if (!Array.isArray(filters[0])) {
          filters = [filters];
        }

        filters.forEach(function (filter) {
          var filterString = buildFilters(filter);

          if (filterString) {
            query += " %FILTER ".concat(filterString);
          }
        });
      }

      return query;
    }

    function buildRows(elements) {
      var result = '';

      if (elements && elements.length) {
        if (elements.length === 1) {
          result = getPath(elements[0]);
        } else {
          result = "{".concat(elements.map(function (current) {
            return getPath(current);
          }).join(','), "}");
        }
      }

      return result;
    }

    function buildColumns(elements) {
      elements = elements || [];
      var result = '';
      var paths = [];
      elements.forEach(function (current) {
        var path = getPath(current);

        if (current.children) {
          var children = current.children.map(function (child) {
            return getPath(child);
          }).join(',');

          if (current.children.length > 1) {
            children = '{' + children + '}';
          }

          path = 'NONEMPTYCROSSJOIN(' + path + ',' + children + ')';
        }

        paths.push(path);
      });
      result = paths.join(',');

      if (elements.length > 1) {
        result = '{' + result + '}';
      }

      return result;
    }

    function buildFilters(filters) {
      var result = '';

      if (!filters) {
        return '';
      }

      filters = filters.filter(function (filter) {
        return filter.values && filter.values.length;
      });

      if (filters.length) {
        for (var i = filters.length - 1; i >= 0; i--) {
          var filter = filters[i];

          if (i === filters.length - 1) {
            result = getFilterPath(filter);
            continue;
          }

          result = "NONEMPTYCROSSJOIN(".concat(getFilterPath(filter), ",").concat(result, ")");
        }
      }

      return result;
    }

    function buildMeasures(measures) {
      if (!measures || !measures.length) {
        return '';
      }

      var measureString = typeof measures === 'string' ? "[Measures].[".concat(measures, "]") : measures.map(function (current) {
        return "[Measures].[".concat(current, "]");
      }).join(',');
      return '{' + measureString + '}';
    }

    function parseTwoDimensionalResponse(response, byRow) {
      var result = [];
      var columns = byRow ? response.Cols[1].tuples : response.Cols[0].tuples;
      var rows = byRow ? response.Cols[0].tuples : response.Cols[1].tuples;
      var data = response.Data;
      var columnsLength = byRow ? rows.length : columns.length;

      for (var i = 0; i < columns.length; i++) {
        var column = columns[i].caption;
        var columnData = [];

        for (var j = 0; j < rows.length; j++) {
          var row = rows[j].caption;
          var rowIndex = byRow ? i : j;
          var columnIndex = byRow ? j : i;
          var value = data[columnsLength * rowIndex + columnIndex] || 0;
          columnData.push([row, value]);
        }

        result.push({
          category: column,
          data: columnData
        });
      }

      return result;
    }

    function parseTreeDimensionalResponse(response, byRow) {
      var result = [];
      var columns = byRow ? response.Cols[1].tuples : response.Cols[0].tuples;
      var rows = byRow ? response.Cols[0].tuples : response.Cols[1].tuples;
      var data = response.Data;
      columns = columns.reduce(function (array, current) {
        current.children.forEach(function (child) {
          child.parent = current.caption;
          array.push(child);
        });
        return array;
      }, []);
      var columnsLength = byRow ? rows.length : columns.length;

      for (var i = 0; i < columns.length; i++) {
        var column = columns[i].caption;
        var columnData = [];

        for (var j = 0; j < rows.length; j++) {
          var row = rows[j].caption;
          var rowIndex = byRow ? i : j;
          var columnIndex = byRow ? j : i;
          var value = data[columnsLength * rowIndex + columnIndex] || 0;
          columnData.push([row, value]);
        }

        result.push({
          category: column,
          parent: columns[i].parent,
          data: columnData
        });
      }

      return result;
    }
  }
})();
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

(function () {
  var angular = window.angular;
  Service.$inject = ['IrisUtils', '$filter', 'Utils'];
  angular.module('app').service('LoadDump', Service);

  function Service(IrisUtils, $filter, Utils) {
    return {
      getLoadEvents: getLoadEvents,
      getDumpEvents: getDumpEvents,
      getGanttData: getGanttData
    };

    function loadEvent(eventType, trucks, date) {
      var dateNumber = IrisUtils.getDateNumber(date);
      var cols = [{
        dimension: 'Truck',
        hierarchy: 'H1',
        hierarchyLevel: 'Name',
        members: 'Members'
      }];
      var rowsArrive = [{
        dimension: 'Time',
        hierarchy: 'H1',
        hierarchyLevel: 'TimeArriveMinute',
        members: 'Members'
      }];
      var hierarchyLevel = eventType === 'LOAD' ? 'TimeFullMinute' : 'TimeDumpMinute';
      var rowsEnd = [{
        dimension: 'Time',
        hierarchy: 'H2',
        hierarchyLevel: hierarchyLevel,
        members: 'Members'
      }];
      var filters = [{
        dimension: 'Truck',
        hierarchy: 'H1',
        hierarchyLevel: 'Name',
        values: trucks.map(function (truck) {
          return truck.name;
        })
      }, {
        dimension: 'Time',
        hierarchy: 'H1',
        hierarchyLevel: 'TIMEARRIVEDAY',
        values: [dateNumber]
      }];
      var cubeName = eventType === 'LOAD' ? 'PRODUCTIONLOADEVENTSCUBE' : 'PRODUCTIONDUMPEVENTSCUBE';
      var arriveQuery = IrisUtils.buildQuery(cubeName, cols, rowsArrive, null, filters);
      var endQuery = IrisUtils.buildQuery(cubeName, cols, rowsEnd, null, filters);
      var arriveData = [];
      var endData = [];
      return IrisUtils.executeQuery(arriveQuery).then(function (data) {
        arriveData = data;
        return IrisUtils.executeQuery(endQuery);
      }).then(function (data) {
        endData = data;
        return {
          start: arriveData,
          finish: endData
        };
      })["catch"](function (response) {
        return Promise.reject(Utils.getHTTPError(response));
      });
    }

    function getLoadEvents(trucks, date) {
      return loadEvent('LOAD', trucks, date)["catch"](function (err) {
        return Promise.reject(err);
      });
    }

    function getDumpEvents(trucks, date) {
      return loadEvent('DUMP', trucks, date)["catch"](function (err) {
        return Promise.reject(err);
      });
    }

    function getGanttData(trucks, date) {
      var result = {
        trucks: trucks.map(function (current) {
          return current.name;
        }),
        data: {}
      };
      var names = {
        load: 'Carga',
        transitToDump: 'En transito a Descarga',
        dump: 'Descarga',
        transitToLoad: 'En transito a Carga'
      };
      var rawData = {
        dump: {
          name: 'Descarga',
          data: []
        },
        load: {
          name: 'Carga',
          data: []
        }
      };
      return getLoadEvents(trucks, date).then(function (data) {
        rawData.load = data;
        return getDumpEvents(trucks, date);
      }).then(function (data) {
        rawData.dump = data;
      }).then(function () {
        var temp = {};

        var _loop = function _loop(state) {
          var start = rawData[state].start;
          var finish = rawData[state].finish;

          if (!start.Data || !start.Data.length) {
            return "continue";
          }

          var trucks = start.Cols[0].tuples.map(function (current, index) {
            return {
              name: current.caption,
              data: {},
              index: index
            };
          });
          var rowLength = trucks.length;
          var startTimes = getTimes($filter('date')(date, 'dd-MM-yyyy'), start);
          var finishTimes = getTimes($filter('date')(date, 'dd-MM-yyyy'), finish, true);
          var currentIndexes = {};
          trucks.forEach(function (truck, index) {
            temp[index] = temp[index] || {};
            temp[index][state] = temp[index][state] || [];
            currentIndexes[index] = getStartIndex(index, start.Data, finish.Data, startTimes, finishTimes, rowLength);
          });
          start.Data.forEach(function (value, index) {
            var truckIndex = index % rowLength;

            if (!value || isNaN(currentIndexes[truckIndex])) {
              return;
            }

            var startIndex = Math.floor(index / rowLength);
            var finishIndex = getEndDateIndex(finish, truckIndex, rowLength, currentIndexes[truckIndex]);

            if (finishIndex === -1) {
              return;
            }

            currentIndexes[truckIndex] = finishIndex + 1;
            temp[truckIndex][state].push({
              start: startTimes[startIndex],
              finish: finishTimes[finishIndex],
              type: state
            });
          });
        };

        for (var state in rawData) {
          var _ret = _loop(state);

          if (_ret === "continue") continue;
        }

        var filled = generateInBetweenState(temp);

        for (var truckIndex in filled) {
          var _iterator = _createForOfIteratorHelper(filled[truckIndex]),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var current = _step.value;
              var type = current.type;
              result.data[type] = result.data[type] || {
                name: names[type],
                data: [],
                dimensions: ['truckIndex', 'start', 'finish']
              };
              result.data[type].data.push([parseInt(truckIndex), current.start, current.finish]);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }

        return result;
      })["catch"](function (err) {
        return Promise.reject(err);
      });
    }

    function getTimes(date, data, fixToEnd) {
      var times = [];
      data.Cols[1].tuples.forEach(function (current) {
        var hour = current.caption;
        var momentDate = moment("".concat(date, " ").concat(hour, ":").concat(fixToEnd ? '59' : '00'), 'DD-MM-YYYY HH:mm:ss');
        times.push(momentDate.toDate().getTime());
      });
      return times;
    }

    function getStartIndex(truckIndex, startData, finishData, startTimes, finishTimes, rowLength) {
      var startTimeIndex;

      for (var i = 0; i < startData.length; i = i + rowLength) {
        if (startData[i + truckIndex]) {
          startTimeIndex = Math.floor(i / rowLength);
          break;
        }
      }

      if (isNaN(startTimeIndex)) {
        return;
      }

      var startDate = startTimes[startTimeIndex];
      var finishTimeIndex;

      for (var _i = 0; _i < finishData.length; _i = _i + rowLength) {
        var index = Math.floor(_i / rowLength);
        var time = finishTimes[index];

        if (finishData[_i + truckIndex] && time >= startDate) {
          finishTimeIndex = index;
          break;
        }
      }

      return finishTimeIndex;
    }

    function getEndDateIndex(finish, truckIndex, rowLength, currentIndex) {
      var start = currentIndex * rowLength;

      for (var i = start; i < finish.Data.length; i = i + rowLength) {
        if (finish.Data[i + truckIndex]) {
          return Math.floor(i / rowLength);
        }
      }

      return -1;
    }

    function generateInBetweenState(loadDumpData) {
      var result = {};
      var states = ['load', 'transitToDump', 'dump', 'transitToLoad'];

      for (var truckIndex in loadDumpData) {
        var loadAndDumps = [];

        for (var state in loadDumpData[truckIndex]) {
          Array.prototype.push.apply(loadAndDumps, loadDumpData[truckIndex][state]);
        }

        loadAndDumps.sort(function (a, b) {
          return a.start === b.start && a.type === 'load' || a.start > b.start ? 1 : -1;
        });
        var filled = [];

        for (var i = 0; i < loadAndDumps.length; i++) {
          var current = loadAndDumps[i];
          var next = loadAndDumps[i + 1];

          if (!next) {
            continue;
          }

          filled.push(current);
          filled.push({
            start: current.finish + 1000,
            finish: next.start - 1000,
            type: states[states.indexOf(current.type) + 1]
          });
        }

        result[truckIndex] = filled;
      }

      return result;
    }
  }
})();
"use strict";

(function () {
  var angular = window.angular;
  TruckService.$inject = ['$http', 'IrisUtils', 'LoadDump', 'Utils'];
  angular.module('app').service('Truck', TruckService);

  function TruckService($http, IrisUtils, LoadDump, Utils) {
    return {
      find: find,
      getProduction: getProduction
    };

    function find(date) {
      var dateNumber = IrisUtils.getDateNumber(date);
      var rows = [{
        dimension: 'Truck',
        hierarchy: 'H1',
        hierarchyLevel: 'Name',
        members: 'Members'
      }];
      var filters = [{
        dimension: 'TIME',
        hierarchy: 'H1',
        hierarchyLevel: 'TIMEARRIVEDAY',
        values: [dateNumber]
      }];
      var query = IrisUtils.buildQuery('PRODUCTIONLOADEVENTSCUBE', null, rows, null, filters);
      return IrisUtils.executeQuery(query).then(function (data) {
        if (!data.Cols || !data.Cols[1]) {
          return [];
        }

        return data.Cols[1].tuples.map(function (current) {
          return {
            name: current.caption,
            path: current.path,
            id: current.valueID
          };
        });
      });
    }

    function getProduction(trucks, date) {
      var dateNumber = IrisUtils.getDateNumber(date);
      var rows = [{
        dimension: 'Time',
        hierarchy: 'H1',
        hierarchyLevel: 'TimeArriveHour',
        members: 'Members'
      }];
      var filters = [{
        dimension: 'Time',
        hierarchy: 'H1',
        hierarchyLevel: 'TIMEARRIVEDAY',
        values: [dateNumber]
      }];
      var query = IrisUtils.buildQuery('PRODUCTIONDUMPEVENTSCUBE', trucks, rows, ['MeasuredTons'], filters);
      return IrisUtils.executeQuery(query).then(function (responseData) {
        var _data = responseData;
        var result = [];
        var columns = _data.Cols[0].tuples;
        var rows = _data.Cols[1].tuples;
        var data = _data.Data;

        for (var colIndex = 0; colIndex < columns.length; colIndex++) {
          var truck = columns[colIndex];
          var current = {
            equipmentName: truck.caption,
            categories: [],
            values: []
          };
          result.push(current);

          for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {
            var timeInterval = rows[rowIndex].caption;
            var value = data[rowIndex * columns.length + colIndex];
            value = isNaN(parseFloat(value)) ? 0 : parseFloat(value);
            current.categories.push(timeInterval);
            current.values.push(value);
          }
        }

        return result;
      });
    }
  }
})();
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

(function () {
  window.angular.module('app').service('Utils', UtilsService);

  function UtilsService() {
    var textTester = document.getElementById('text-tester');
    return {
      getHTTPError: getHTTPError,
      getTextWidth: getTextWidth
    };

    function getHTTPError(response) {
      if (!response) {
        return;
      }

      var error = new Error();

      if (response.data) {
        if (response.data.error) {
          error.message = response.data.error.message;
          error.code = response.data.error.code;
        } else {
          error.message = response.data;
        }
      } else {
        error.message = response.message || 'An unknown error has occurred';
        error.code = response.code || 'UNKNOWN_ERROR';
      }

      if (error.code === 'LOGIN_FAILED') {
        delete response.resource;
      }

      return error;
    }

    function getTextWidth(text, cssClass, style) {
      if (!text) {
        return 0;
      }

      if (cssClass) {
        var _textTester$classList;

        (_textTester$classList = textTester.classList).add.apply(_textTester$classList, _toConsumableArray(cssClass.split(' ')));
      }

      if (style && _typeof(style) === 'object') {
        for (var prop in style) {
          textTester.style[prop] = style[prop];
        }
      }

      textTester.textContent = text;
      var width = textTester.offsetWidth;
      textTester.className = '';
      textTester.removeAttribute('style');
      return width;
    }
  }
})();
"use strict";

(function () {
  var angular = window.angular;
  angular.module('app').component('mineOperation', {
    template: '<div class="marginT20 container-lg"><ul class="nav nav-tabs nav-justified nav-tabs"><li ui-sref-active="active"><a ui-sref="mineOperation.oee"><h3>OEE</h3></a></li><li ui-sref-active="active"><a ui-sref="mineOperation.production"><h3>ProducciÃ³n</h3></a></li><li ui-sref-active="active"><a ui-sref="mineOperation.miningPlan"><h3>InformaciÃ³n de flota</h3></a></li></ul><div class="marginT20"><ui-view></ui-view></div></div>'
  });
})();
"use strict";

(function () {
  var angular = window.angular;
  angular.module('app').component('home', {
    template: '<div class="container-lg"><div style="margin-top: 50px"><h2><strong>Aplicaciones</strong></h2></div><div class="home-shortcuts home-shortcuts"><a class="shortcut" ui-sref="mineOperation"><div class="shortcut-content"><div class="link-icon"><img src="/assets/images/mine.svg"></div><div class="link-text-wrapper"><div class="link-text">OperaciÃ³n Mina</div></div></div></a></div></div>',
    controller: HomeController,
    controllerAs: 'ctrl'
  });

  function HomeController() {
    var vm = this;

    vm.$onInit = function () {};
  }
})();
"use strict";

;

(function () {
  var angular = window.angular;
  Controller.$inject = ['$rootScope', '$element', 'Equipment', 'Utils'];
  angular.module('app').component('equipmentStatusDetailsChart', {
    template: '<div style="position: relative"><div ng-class="{transparent: !ctrl.status || ctrl.loading}"><div class="chart chart-sm bar"></div><hr><div class="chart chart-sm pie"></div></div><div class="centered-message" ng-show="!ctrl.status"><h4 class="no-margin">No se ha seleccionado un estado</h4></div><spinner show="ctrl.loading"></spinner></div>',
    controller: Controller,
    controllerAs: 'ctrl',
    bindings: {
      from: '<',
      to: '<',
      categories: '<',
      equipments: '<',
      status: '<'
    }
  });

  function Controller($root, $element, Equipment, utils) {
    var vm = this;
    var colors = echarts.customColors ? angular.copy(echarts.customColors) : undefined;
    colors = colors ? colors.slice(4) : undefined;

    vm.$onInit = function () {
      var container = $element.find('.bar');
      var pieContainer = $element.find('.pie');
      vm.container = container[0];
      vm.pieContainer = pieContainer[0];
    };

    vm.$onChanges = function () {
      if (!vm.status || (!vm.categories || !vm.categories.length) && (!vm.equipments || !vm.equipments.length)) {
        if (vm.chart) {
          destroyCharts();
        }

        return;
      }

      loadData();
    };

    vm.$onDestroy = function () {
      destroyCharts();
    };

    function destroyCharts() {
      if (vm.chart) {
        echarts.dispose(vm.chart);
      }

      if (vm.pieChart) {
        echarts.dispose(vm.pieChart);
      }
    }

    function loadData() {
      vm.loading = true;
      Equipment.statusDetails(vm.from, vm.to, vm.categories, vm.equipments, vm.status).then(function (data) {
        vm.loading = false;
        plotCharts(data);
      })["catch"](function (err) {
        vm.loading = false;
        console.log(err);
      });
    }

    function plotCharts(data) {
      var categoryStep = 5;
      var categories = [];

      for (var i = 0; i < 24 * 60; i += categoryStep) {
        var hour = Math.floor(i / 60);
        var minute = i % 60;
        hour = ('0' + hour).slice(-2);
        minute = ('0' + minute).slice(-2);
        categories.push("".concat(hour, ":").concat(minute));
      }

      var series = [];
      data.forEach(function (current) {
        current.data.map(function (current) {
          current[1] = Math.round(10 * current[1] / 12) / 10;
          return current;
        });
        series.push({
          name: current.category,
          data: current.data,
          type: 'bar',
          stack: 'stack',
          barWidth: '115%',
          sum: current.data.reduce(function (sum, current) {
            return current[1] + sum;
          }, 0)
        });
      });
      var longestSeriesName = series.reduce(function (result, current) {
        result.name = current.name.length > result.name.length ? current.name : result.name;
        return result;
      }, {
        name: ''
      }).name;
      var paddingRight = Math.ceil(utils.getTextWidth(longestSeriesName, '', {
        fontSize: '10px'
      })) + 45;
      var option = {
        color: colors,
        tooltip: {},
        grid: {
          left: 80,
          top: 60,
          right: paddingRight,
          bottom: 60
        },
        yAxis: {
          type: 'value',
          axisLabel: {
            fontSize: 11
          },
          name: 'DuraciÃ³n Parcial',
          nameLocation: 'center',
          nameGap: 50,
          nameTextStyle: {
            color: '#333333',
            fontSize: 16
          }
        },
        xAxis: {
          type: 'category',
          data: categories,
          axisLabel: {
            fontSize: 11
          },
          name: 'Hora del dÃ­a',
          nameLocation: 'center',
          nameGap: 30,
          nameTextStyle: {
            color: '#333333',
            fontSize: 16
          }
        },
        series: series,
        legend: {
          type: 'scroll',
          orient: 'vertical',
          right: 0,
          top: 10,
          textStyle: {
            fontSize: 10
          },
          data: series.map(function (current) {
            return current.name;
          })
        }
      };
      vm.chart = resetChart(vm.chart, vm.container, option);
      var pieSeries = {
        type: 'pie',
        name: 'pie',
        radius: '60%',
        label: {
          formatter: '{d}%'
        },
        startAngle: 0,
        data: series.map(function (current) {
          return {
            name: current.name,
            value: Math.round(current.sum * 10) / 10
          };
        })
      };
      var total = pieSeries.data.reduce(function (sum, current) {
        return sum + current.value;
      }, 0);
      pieSeries.data.forEach(function (current) {
        current.value = Math.round(10000 * current.value / total) / 100;
      });
      pieSeries.data.sort(function (a, b) {
        return b.value - a.value;
      });

      if (pieSeries.data.length >= 15) {
        var _data = [];
        pieSeries.data.forEach(function (current) {
          if (_data.length < 15 && current.value >= 1) {
            _data.push(current);
          }
        });
        pieSeries.data = _data;
        var totalPercent = pieSeries.data.reduce(function (sum, current) {
          return sum + current.value;
        }, 0);

        if (totalPercent < 100) {
          pieSeries.data.push({
            name: 'Otros',
            value: 100 - totalPercent
          });
        }
      }

      vm.pieChart = resetChart(vm.pieChart, vm.pieContainer, {
        color: colors,
        title: {
          text: 'EstadÃ­stica',
          left: 'center'
        },
        tooltip: {
          formatter: function formatter(a, b, c) {
            console.log(a, b, c);
            return 'test';
          }
        },
        legend: {
          orient: 'vertical',
          left: 10,
          type: 'scroll',
          textStyle: {
            fontSize: 10
          }
        },
        series: [pieSeries]
      });
    }

    function resetChart(chart, container, options) {
      if (chart) {
        echarts.dispose(chart);
      }

      if (!chart || chart.isDisposed()) {
        chart = echarts.init(container, 'custom');
      }

      chart.clear();
      chart.setOption(options);
      chart.resize();
      return chart;
    }
  }
})();
"use strict";

(function () {
  var angular = window.angular;
  Controller.$inject = ['$rootScope', '$timeout', '$element', 'Equipment', 'Utils', 'DateUtils', '$filter'];
  angular.module('app').component('lessProductiveEquipmentsChart', {
    template: '<div class="panel panel-light"><div class="panel-heading"><div>ProducciÃ³n por equipo</div><small style="font-size: 70%">{{ctrl.from | date: \'dd-MM-yyyy\'}}</small></div><div class="chart chart-{{ctrl.size}}" ng-class="{transparent: false}"></div><spinner show="ctrl.loading"></spinner></div>',
    controller: Controller,
    controllerAs: 'ctrl',
    bindings: {
      from: '<',
      to: '<',
      categories: '<',
      color: '<',
      maxCategories: '<',
      size: '<',
      onChartClick: '&'
    }
  });

  function Controller($root, $timeout, $element, Equipment, Utils, DateUtils, $filter, OEE) {
    var vm = this;

    vm.$onInit = function () {
      var container = $element.find('.chart');
      vm.maxCategories = vm.maxCategories || 10;
      vm.container = container[0];
      loadData();
    };

    vm.$onChanges = function () {
      if (!vm.container) {
        return;
      }

      loadData();
    };

    vm.$onDestroy = function () {
      if (vm.chart) {
        echarts.dispose(vm.chart);
      }
    };

    function loadData() {
      vm.loading = true;
      Equipment.statusData(vm.from, vm.to, vm.categories, null, 'equipment').then(function (data) {
        vm.loading = false;
        plotChart(data);
      })["catch"](function (err) {
        vm.loading = false;
        console.log(err);
      });
    }

    function plotChart(data) {
      var seriesData = {};
      data = data.map(function (current) {
        var sum = current.data.reduce(function (sum, pair) {
          return sum + pair[1];
        }, 0);
        var result = {
          category: current.category,
          data: {}
        };
        current.data.forEach(function (pair) {
          result.data[pair[0]] = sum !== 0 ? Math.round(1000 * pair[1] / sum) / 10 : null;
        });
        return result;
      });
      data.sort(function (a, b) {
        if (b.data.Downtime === 100 || a.data.Downtime === 100) {
          return b.data.Downtime - a.data.Downtime;
        }

        if (a.data.Operative !== b.data.Operative) {
          return b.data.Operative - a.data.Operative;
        }

        if (a.data.Delay !== b.data.Delay) {
          return b.data.Delay - a.data.Delay;
        }

        if (a.data.Standby !== b.data.Standby) {
          return b.data.Standby - a.data.Standby;
        }

        return b.data.Downtime - a.data.Downtime;
      });
      var longestName = '';
      data.forEach(function (current) {
        longestName = current.category.length > longestName.length ? current.category : longestName;
        Object.keys(current.data).forEach(function (status) {
          seriesData[status] = seriesData[status] || [];
          var value = current.data[status];

          if (value !== null) {
            seriesData[status].push([value, current.category]);
          }
        });
      });
      var series = [];

      for (var seriesId in seriesData) {
        series.push({
          id: seriesId,
          name: seriesId,
          data: seriesData[seriesId],
          type: 'bar',
          barWidth: '50%',
          stack: 'stack',
          animation: false
        });
      }

      var zoomStart = getZoomStart(data.length);
      var paddingLeft = Math.ceil(Utils.getTextWidth(longestName, '', {
        fontSize: '11px'
      })) + 30;
      var option = {
        tooltip: {},
        legend: {
          textStyle: {
            fontSize: 10
          }
        },
        dataZoom: [{
          type: 'slider',
          yAxisIndex: 0,
          zoomLock: true,
          width: 25,
          right: 10,
          start: zoomStart,
          end: 100,
          handleSize: 0,
          showDetail: false
        }],
        grid: {
          left: paddingLeft + 40,
          top: 30,
          right: 40,
          bottom: 40
        },
        xAxis: {
          type: 'value',
          axisLabel: {
            fontSize: 11,
            show: true
          },
          name: '% de tiempo',
          nameLocation: 'center',
          min: 0,
          max: 100,
          nameTextStyle: {
            color: '#333333',
            fontSize: 16
          }
        },
        yAxis: {
          type: 'category',
          axisLabel: {
            fontSize: 11,
            show: true
          },
          name: 'Equipo',
          nameLocation: 'center',
          nameGap: paddingLeft,
          nameTextStyle: {
            color: '#333333',
            fontSize: 16
          }
        },
        series: series
      };

      if (vm.chart) {
        echarts.dispose(vm.chart);
      }

      if (!vm.chart || vm.chart.isDisposed()) {
        vm.chart = echarts.init(vm.container, 'custom');
        vm.chart.on('click', onClick);
      }

      vm.chart.clear();
      vm.chart.setOption(option);
      vm.chart.resize();
    }

    function onClick(params) {
      if (typeof vm.onChartClick === 'function') {
        $timeout(function () {
          vm.onChartClick({
            params: params,
            from: vm.from,
            to: vm.to
          });
        });
      }
    }

    function getZoomStart(equipmentLength) {
      var containerHeight = vm.container.offsetHeight;
      var visibleBars = Math.floor((containerHeight - 150) / 30);

      if (visibleBars >= equipmentLength) {
        return 0;
      }

      return 100 * (1 - visibleBars / equipmentLength);
    }
  }
})();
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

(function () {
  var angular = window.angular;
  Controller.$inject = ['$rootScope', '$timeout', '$element', 'Equipment', 'Utils', 'DateUtils'];
  angular.module('app').component('operationSeagullChart', {
    template: '<div style="position: relative"><div class="chart chart-{{ctrl.size}}" ng-class="{transparent: false}"></div><spinner show="ctrl.loading"></spinner></div>',
    controller: Controller,
    controllerAs: 'ctrl',
    bindings: {
      from: '<',
      to: '<',
      categories: '<',
      equipments: '<',
      size: '<',
      onChartClick: '&',
      isLoading: '='
    }
  });

  function Controller($root, $timeout, $element, Equipment, Utils, DateUtils, $filter) {
    var vm = this;

    vm.$onInit = function () {
      var container = $element.find('.chart');
      vm.containerHeight = container.height();
      vm.container = container[0];
      loadData();
    };

    vm.$onChanges = function () {
      if (!vm.container) {
        return;
      }

      loadData();
    };

    vm.$onDestroy = function () {
      if (vm.chart) {
        echarts.dispose(vm.chart);
      }
    };

    function loadData() {
      if ((!vm.categories || !vm.categories.length) && (!vm.equipments || !vm.equipments.length)) {
        if (vm.chart) {
          echarts.dispose(vm.chart);
        }

        return;
      }

      vm.loading = true;

      if (typeof vm.isLoading !== 'undefined') {
        vm.isLoading = vm.loading;
      }

      Equipment.statusData(vm.from, vm.to, vm.categories, vm.equipments).then(function (data) {
        vm.loading = false;

        if (typeof vm.isLoading !== 'undefined') {
          vm.isLoading = vm.loading;
        }

        plotChart(data);
      })["catch"](function (err) {
        vm.loading = false;

        if (typeof vm.isLoading !== 'undefined') {
          vm.isLoading = vm.loading;
        }

        console.log(err);
      });
    }

    function plotChart(data) {
      var categoryStep = 5;
      var categories = [];

      for (var i = 0; i < 24 * 60; i += categoryStep) {
        var hour = Math.floor(i / 60);
        var minute = i % 60;
        hour = ('0' + hour).slice(-2);
        minute = ('0' + minute).slice(-2);
        categories.push("".concat(hour, ":").concat(minute));
      }

      var defaultSeries = {
        data: [],
        type: 'bar',
        stack: 'stack',
        barWidth: '115%'
      };
      var series = {};
      ['Operative', 'Delay', 'Standby', 'Downtime'].forEach(function (current) {
        series[current] = angular.copy(defaultSeries);
        series[current].name = current;
      });
      data.forEach(function (current) {
        var minute = current.category;
        var total = current.data.reduce(function (sum, current) {
          return current[1] + sum;
        }, 0);

        var _iterator = _createForOfIteratorHelper(current.data),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var pair = _step.value;
            series[pair[0]].data.push([minute, Math.round(10000 * pair[1] / total) / 100]);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      });
      series = Object.keys(series).map(function (current) {
        return series[current];
      });
      var option = {
        tooltip: {},
        grid: {
          left: 80,
          top: 50,
          right: 20,
          bottom: 60
        },
        yAxis: {
          type: 'value',
          axisLabel: {
            fontSize: 11
          },
          name: 'Porcentaje de tiempo',
          nameLocation: 'center',
          nameGap: 50,
          nameTextStyle: {
            color: '#333333',
            fontSize: 16
          }
        },
        xAxis: {
          type: 'category',
          data: categories,
          axisLabel: {
            fontSize: 11
          },
          name: 'Hora del dÃ­a',
          nameLocation: 'center',
          nameGap: 30,
          nameTextStyle: {
            color: '#333333',
            fontSize: 16
          }
        },
        series: series,
        legend: {
          show: true,
          selectedMode: false,
          padding: [20, 0, 0, 0],
          data: series.map(function (current) {
            return current.name;
          })
        }
      };

      if (vm.chart) {
        echarts.dispose(vm.chart);
      }

      if (!vm.chart || vm.chart.isDisposed()) {
        vm.chart = echarts.init(vm.container, 'custom');
        vm.chart.on('click', onClick);
      }

      vm.chart.clear();
      vm.chart.setOption(option);
      vm.chart.resize();
    }

    function onClick(params) {
      if (typeof vm.onChartClick === 'function') {
        $timeout(function () {
          vm.onChartClick({
            params: params,
            from: vm.from,
            to: vm.to
          });
        });
      }
    }
  }
})();
"use strict";

(function () {
  var angular = window.angular;
  angular.module('app').component('moMiningPlan', {
    template: '<div><div class="content"><ui-view></ui-view></div></div>'
  });
})();
"use strict";

(function () {
  var angular = window.angular;
  Controller.$inject = ['$rootScope', 'OEE', '$transitions'];
  angular.module('app').component('oeeDefaultFilter', {
    template: '<div class="form-group"><label>Desde</label> <input type="text" class="form-control" readonly ng-disabled="ctrl.loading" style="background: #fff" enable-time="false" datetime-picker="dd-MM-yyyy" is-open="ctrl.dates.from.open" datepicker-options="ctrl.dates.options" ng-click="ctrl.dates.from.open = !ctrl.dates.from.open" when-closed="ctrl.dates.onClose(args)" ng-model="ctrl.dates.from.value"></div><div class="form-group"><label>Hasta</label> <input type="text" class="form-control" readonly ng-disabled="ctrl.loading" style="background: #fff" enable-time="false" datetime-picker="dd-MM-yyyy" is-open="ctrl.dates.to.open" datepicker-options="ctrl.dates.options" ng-click="ctrl.dates.to.open = !ctrl.dates.to.open" when-closed="ctrl.dates.onClose(args)" ng-model="ctrl.dates.to.value"></div><div class="form-group clearfix"><label>Categorias</label><multi-select-dropdown items="ctrl.categories" disabled="ctrl.loading" on-select="ctrl.loadEquipments()" selected-items="ctrl.selectedCategories"></multi-select-dropdown></div><div class="form-group clearfix"><label>Equipos</label><multi-select-dropdown items="ctrl.equipments" disabled="ctrl.loading" selected-items="ctrl.selectedEquipements"></multi-select-dropdown></div><hr><div><button class="btn btn-primary btn-block" ng-click="ctrl.applyFilters()">Filtrar</button></div>',
    controller: Controller,
    controllerAs: 'ctrl'
  });

  function Controller($root, OEE, $transitions) {
    var vm = this;

    vm.$onInit = function () {
      vm.applyFilters = applyFilters;
      vm.loadEquipments = loadEquipments;
      vm.dates = {
        from: {
          value: new Date('2017/12/31'),
          open: false
        },
        to: {
          value: new Date('2018/01/05'),
          open: false
        },
        options: {
          showWeeks: false,
          showMeridian: false
        },
        onClose: function onClose(args) {
          loadCategories();
        }
      };
      loadCategories().then(function () {
        applyFilters();
      });
      vm.offSuccess = $transitions.onSuccess({}, function (transition) {
        applyFilters();
      });
    };

    vm.$onDestroy = function () {
      vm.offSuccess();
    };

    function loadCategories() {
      if (vm.prevFrom && vm.prevFrom.getTime() === vm.dates.from.value.getTime() && vm.prevTo && vm.prevTo.getTime() === vm.dates.to.value.getTime()) {
        return;
      }

      vm.loading = true;
      vm.prevFrom = vm.dates.from.value;
      vm.prevTo = vm.dates.to.value;
      return OEE.categories(vm.dates.from.value, vm.dates.to.value).then(function (categories) {
        vm.categories = categories || [];
        var truckCategory = vm.categories.find(function (current) {
          return current.name === 'Camion';
        });

        if (truckCategory) {
          vm.selectedCategories = [truckCategory];
        } else {
          vm.selectedCategories = vm.categories.length ? [vm.categories[0]] : [];
        }

        loadEquipments(true);
      }).then(function (equipments) {
        vm.loading = false;
      })["catch"](function (err) {
        console.log(err);
        vm.loading = false;
      });
    }

    function loadEquipments(notShowLoading) {
      if (!vm.selectedCategories.length) {
        vm.equipments = [];
        vm.selectedEquipements = [];
        return;
      }

      if (!notShowLoading) {
        vm.loading = true;
      }

      return OEE.equipments(vm.dates.from.value, vm.dates.to.value, vm.selectedCategories).then(function (equipments) {
        vm.equipments = equipments || [];
        vm.selectedEquipements = [];

        if (!notShowLoading) {
          vm.loading = false;
        }
      })["catch"](function (err) {
        console.log(err);

        if (!notShowLoading) {
          vm.loading = false;
        }
      });
    }

    function applyFilters() {
      $root.$emit('filter:update', {
        from: vm.dates.from.value,
        to: vm.dates.to.value,
        categories: vm.selectedCategories,
        equipments: vm.selectedEquipements
      });
    }
  }
})();
"use strict";

(function () {
  var angular = window.angular;
  Controller.$inject = ['$rootScope', '$element', '$timeout', '$compile', '$transitions', '$state'];
  angular.module('app').component('moOee', {
    template: '<div class="left-content"><ul class="nav nav-tabs nav-justified nav-tabs secondary"><li ui-sref-active="active"><a ui-sref="mineOperation.oee.overview"><h4>Resumen</h4></a></li><li ui-sref-active="active"><a ui-sref="mineOperation.oee.utilization"><h4>UtilizaciÃ³n</h4></a></li><li ui-sref-active="active"><a ui-sref="mineOperation.oee.capacityPerformance"><h4>Performance Capacidad</h4></a></li><li ui-sref-active="active"><a ui-sref="mineOperation.oee.timePerformance"><h4>Performance Tiempo</h4></a></li></ul><div class="content"><ui-view></ui-view></div></div><div class="side-panel side-panel-right"><div class="panel panel-filter"><div class="panel-heading">Panel</div><div class="panel-body"><div class="filters-target"></div></div></div></div>',
    controller: Controller,
    controllerAs: 'ctrl'
  });

  function Controller($root, $element, $timeout, $compile, $transitions, $state) {
    var vm = this;

    vm.$onInit = function () {
      vm.filterTarget = $element.find('.filters-target');
      vm.offSuccess = $transitions.onSuccess({}, function (transition) {
        displayFilters();
      });
      displayFilters();
    };

    vm.$onDestroy = function () {
      vm.offSuccess();
    };

    function displayFilters() {
      var tagName = 'oee-default-filter';
      vm.currentTagName = tagName;

      if (vm.filterScope) {
        vm.filterScope.$destroy();
        vm.filterTarget.empty();
      }

      $timeout(function () {
        vm.filterScope = $root.$new(true);
        vm.filterTarget.append($compile("<".concat(tagName, "></").concat(tagName, ">"))(vm.filterScope));
      }, 200);
    }
  }
})();
"use strict";

(function () {
  var angular = window.angular;
  Service.$inject = ['IrisUtils', 'Utils', '$rootScope', '$q'];
  angular.module('app').service('OEE', Service);

  function Service(IrisUtils, Utils, $root, $q) {
    var cache = {
      days: {},
      hours: {},
      minutes: {}
    };
    return {
      categories: categories,
      equipments: equipments,
      listenFilters: listenFilters,
      loadDataAsDays: loadDataAsDays,
      loadDataAsHours: loadDataAsHours,
      loadDataAsMinutes: loadDataAsMinutes
    };

    function listenFilters(type) {
      var vars = {};
      vars.offFilters = $root.$on('filter:update', function (e, filters) {
        filters = angular.copy(filters);
        vars.from = filters.from;
        vars.to = filters.to;
        vars.categories = filters.categories;
        vars.equipments = filters.equipments;

        if (!vars.categories || !vars.categories.length) {
          return {};
        }

        vars.loading = true;
        loadDataAsDays(vars.from, vars.to, type, vars.categories, vars.equipments).then(function (result) {
          vars.loading = false;
          vars.data = result;
        })["catch"](function (err) {
          vars.loading = false;
          console.log(err);
        });
      });
      return vars;
    }

    function categories(from, to) {
      var fromNumber = IrisUtils.getDateNumber(from);
      var toNumber = IrisUtils.getDateNumber(to);
      var rows = [{
        dimension: 'Equipment',
        hierarchy: 'H1',
        hierarchyLevel: 'EQUIPMENTCATEGORY',
        members: 'Members'
      }];
      var dates = fromNumber;

      if (fromNumber !== toNumber) {
        dates = [fromNumber, toNumber];
      }

      var filters = [{
        dimension: 'EventDateTime',
        hierarchy: 'H1',
        hierarchyLevel: 'EventDateTimeDay',
        values: [dates]
      }];
      var query = IrisUtils.buildQuery('UNIFIEDEVENTSCUBE', null, rows, null, filters);
      return IrisUtils.executeQuery(query).then(function (data) {
        return data.Cols[1].tuples.map(function (current) {
          return {
            name: current.caption,
            path: current.path,
            id: current.valueID
          };
        });
      });
    }

    function equipments(from, to, category) {
      var fromNumber = IrisUtils.getDateNumber(from);
      var toNumber = IrisUtils.getDateNumber(to);
      var rows = [{
        dimension: 'Equipment',
        hierarchy: 'H1',
        hierarchyLevel: 'EQUIPMENTNAME',
        members: 'Members'
      }];
      var dates = fromNumber;

      if (fromNumber !== toNumber) {
        dates = [fromNumber, toNumber];
      }

      var categories = Array.isArray(category) ? category.map(function (current) {
        return current.name;
      }) : [category.name];
      var filters = [{
        dimension: 'EventDateTime',
        hierarchy: 'H1',
        hierarchyLevel: 'EventDateTimeDay',
        values: [dates]
      }, {
        dimension: 'Equipment',
        hierarchy: 'H1',
        hierarchyLevel: 'EQUIPMENTCATEGORY',
        values: categories
      }];
      var query = IrisUtils.buildQuery('UNIFIEDEVENTSCUBE', null, rows, null, filters);
      return IrisUtils.executeQuery(query).then(function (data) {
        return data.Cols[1].tuples.map(function (current) {
          return {
            name: current.caption,
            path: current.path,
            id: current.valueID
          };
        });
      });
    }

    function loadDataAsDays(from, to, type, categories, equipments) {
      return loadData('EventDateTimeDay', from, to, type, categories, equipments);
    }

    function loadDataAsHours(from, to, type, categories, equipments) {
      return loadData('EventDateTimeHour', from, from, type, categories, equipments);
    }

    function loadDataAsMinutes(from, hour, type, categories, equipments) {
      from = new Date(from.getTime());
      from.setHours(hour);
      return loadData('EventDateTimeMinute', from, from, type, categories, equipments);
    }

    function loadData(timeInterval, from, to, type, categories, equipments) {
      var cube = 'UNIFIEDEVENTSCUBE';
      var fromNumber = IrisUtils.getDateNumber(from);
      var toNumber = IrisUtils.getDateNumber(to);
      var columns = [{
        path: "[MEMBERDIMENSION].allMembers"
      }];
      var rows = [{
        dimension: 'EventDateTime',
        hierarchy: 'H1',
        hierarchyLevel: timeInterval,
        members: 'Members'
      }];
      var dates = fromNumber;

      if (fromNumber !== toNumber) {
        dates = [fromNumber, toNumber];
      }

      var filters = [[]];

      if (equipments && equipments.length) {
        filters[0].push({
          dimension: 'EQUIPMENT',
          hierarchy: 'H1',
          hierarchyLevel: 'EQUIPMENTNAME',
          values: equipments.map(function (current) {
            return current.name;
          })
        });
      } else {
        filters[0].push({
          dimension: 'EQUIPMENT',
          hierarchy: 'H1',
          hierarchyLevel: 'EQUIPMENTCATEGORY',
          values: categories.map(function (current) {
            return current.name;
          })
        });
      }

      filters[0].push({
        dimension: 'EventDateTime',
        hierarchy: 'H1',
        hierarchyLevel: 'EventDateTimeDay',
        values: [dates]
      });

      if (timeInterval === 'EventDateTimeMinute') {
        filters[0].push({
          dimension: 'EventDateTime',
          hierarchy: 'H1',
          hierarchyLevel: 'EventDateTimeHour',
          values: [from.getHours()]
        });
      }

      var query = IrisUtils.buildQuery(cube, columns, rows, null, filters);
      cache[timeInterval] = cache[timeInterval] || {};

      if (cache[timeInterval].data && cache[timeInterval].query === query) {
        if (type) {
          return $q.resolve(cache[timeInterval].data.filter(function (current) {
            return current.category === type;
          }));
        }

        return $q.resolve(cache[timeInterval].data);
      }

      return IrisUtils.executeQuery(query).then(function (result) {
        cache[timeInterval].query = query;
        var data = IrisUtils.parseTwoDimensionalResponse(result);
        cache[timeInterval].data = data;

        if (type) {
          return data.filter(function (current) {
            return current.category === type;
          });
        }

        return data;
      })["catch"](function (response) {
        return Promise.reject(Utils.getHTTPError(response));
      });
    }
  }
})();
"use strict";

(function () {
  var angular = window.angular;
  Controller.$inject = ['$rootScope', 'Truck', '$transitions'];
  angular.module('app').component('prodDefaultFilter', {
    template: '<div class="form-group"><label>Fecha</label> <input type="text" class="form-control" readonly ng-disabled="ctrl.loading" style="background: #fff" enable-time="false" datetime-picker="dd-MM-yyyy" is-open="ctrl.day.open" datepicker-options="ctrl.day.options" ng-click="ctrl.day.open = !ctrl.day.open" when-closed="ctrl.day.onClose(args)" ng-model="ctrl.day.value"></div><div class="form-group clearfix"><label>Camiones</label><multi-select-dropdown items="ctrl.trucks" on-select="ctrl.onSelectTruck()" selected-items="ctrl.selectedTrucks"></multi-select-dropdown></div><hr><div><button class="btn btn-primary btn-block" ng-click="ctrl.applyFilters()">Filtrar</button></div>',
    controller: Controller,
    controllerAs: 'ctrl'
  });

  function Controller($root, Truck, $transitions) {
    var vm = this;

    vm.$onInit = function () {
      vm.applyFilters = applyFilters;
      vm.day = {
        value: new Date('2018/01/01'),
        open: false,
        options: {
          showWeeks: false,
          showMeridian: false
        },
        onClose: function onClose(args) {
          loadTrucks();
        }
      };
      loadTrucks().then(function () {
        applyFilters();
      });
      vm.offSuccess = $transitions.onSuccess({}, function (transition) {
        applyFilters();
      });
    };

    vm.$onDestroy = function () {
      vm.offSuccess();
    };

    function loadTrucks() {
      vm.loading = true;
      return Truck.find(vm.day.value).then(function (trucks) {
        vm.trucks = trucks;
        vm.selectedTrucks = vm.trucks.slice(0, 4);
        vm.loading = false;
      })["catch"](function (err) {
        console.log(err);
        vm.loading = false;
      });
    }

    function applyFilters() {
      $root.$emit('filter:update', {
        date: vm.day.value,
        trucks: vm.selectedTrucks
      });
    }
  }
})();
"use strict";

(function () {
  var angular = window.angular;
  Controller.$inject = ['$rootScope', '$timeout', '$element', '$compile', '$transitions', '$state'];
  angular.module('app').component('moProduction', {
    template: '<div class="left-content"><ul class="nav nav-tabs nav-justified nav-tabs secondary"><li ui-sref-active="active"><a ui-sref="mineOperation.production.realtime"><h4>Tiempo Real</h4></a></li><li ui-sref-active="active"><a ui-sref="mineOperation.production.ranking"><h4>AnÃ¡lisis de flota</h4></a></li><li ui-sref-active="active"><a ui-sref="mineOperation.production.compliance"><h4>Cumplimiento</h4></a></li></ul><div class="content"><ui-view></ui-view></div></div><div class="side-panel side-panel-right"><div class="panel panel-filter"><div class="panel-heading">Panel</div><div class="panel-body"><div class="filters-target"></div></div></div></div>',
    controller: Controller,
    controllerAs: 'ctrl'
  });

  function Controller($root, $timeout, $element, $compile, $transitions, $state) {
    var vm = this;

    vm.$onInit = function () {
      vm.filterTarget = $element.find('.filters-target');
      vm.offSuccess = $transitions.onSuccess({}, function (transition) {
        displayFilters();
      });
      displayFilters();
    };

    vm.$onDestroy = function () {
      vm.offSuccess();

      if (vm.filterScope) {
        vm.filterScope.$destroy();
      }
    };

    function displayFilters() {
      var currentState = $state.current;
      var filtersMap = {
        'mineOperation.production.ranking': 'equipment-rank-filter'
      };
      var tagName = filtersMap[currentState.name] || 'prod-default-filter';

      if (vm.currentTagName === tagName) {
        return;
      }

      vm.currentTagName = tagName;

      if (vm.filterScope) {
        vm.filterScope.$destroy();
        vm.filterTarget.empty();
      }

      $timeout(function () {
        vm.filterScope = $root.$new(true);
        vm.filterTarget.append($compile("<".concat(tagName, "></").concat(tagName, ">"))(vm.filterScope));
      }, 200);
    }
  }
})();
"use strict";

(function () {
  var angular = window.angular;
  Controller.$inject = ['$element'];
  angular.module('app').component('miningPlanIndex', {
    template: '<div><div class="panel panel-light"><div class="panel-heading">Detalles Flota</div><table class="table table-hover marginB0"><thead><tr><th><strong>Total de Equipos</strong></th><th>202</th></tr></thead><tbody><tr><td>Aljibe</td><td>7</td></tr><tr><td>CamiÃ³n</td><td>111</td></tr><tr><td>Carguio</td><td>15</td></tr><tr><td>Chancado</td><td>3</td></tr><tr><td>Combus. y Lub.</td><td>4</td></tr><tr><td>Moto.Niv.</td><td>11</td></tr><tr><td>Perforadora</td><td>12</td></tr><tr><td>Retroexcavadora</td><td>8</td></tr><tr><td>Tow Haul</td><td>3</td></tr><tr><td>Tractor Neumaticos</td><td>13</td></tr><tr><td>Tractor Orugas</td><td>15</td></tr></tbody></table></div><div class="panel panel-light marginB0"><div class="panel-heading">Listado de equipos</div><div class="panel-body"><table class="table table-hover marginB0" id="equipment-table"></table></div></div></div>',
    controller: Controller,
    controllerAs: 'ctrl'
  });

  function Controller($element) {
    var vm = this;

    vm.$onInit = function () {
      var equipmentTable = $element.find('#equipment-table');
      createEquipmentTable(equipmentTable, getEquipments());
    };

    vm.$onDestroy = function () {
      vm.equipmentTable.destroy();
    };

    function createEquipmentTable(table, equipments) {
      vm.equipmentTable = table.DataTable({
        data: equipments,
        searching: false,
        paging: false,
        lengthChange: false,
        scrollY: 600,
        destroy: true,
        order: [],
        columnDefs: [{
          targets: '_all',
          searchable: false
        }],
        columns: [{
          title: 'Flota'
        }, {
          title: 'Nombre'
        }, {
          title: 'Modelo'
        }, {
          title: 'Tonelaje'
        }, {
          title: 'Ãšltima actividad'
        }]
      });
    }

    function getEquipments() {
      return [['Aljibe', 'CR05', 'Komatsu HD785', '0', '31-12-2018 7:41'], ['Aljibe', 'CR04', 'Komatsu HD785', '0', '30-12-2018 10:23'], ['Aljibe', 'CR07', 'Komatsu HD785', '0', '31-12-2018 7:45'], ['Aljibe', 'CR06', 'Komatsu HD785', '0', '30-12-2018 13:24'], ['Aljibe', 'CR09', 'Komatsu HD785', '0', '31-12-2018 7:41'], ['Aljibe', 'CR10', 'Otros', '0', '28-12-2018 22:02'], ['Aljibe', 'CR08', 'Komatsu HD785', '0', '31-12-2018 7:46'], ['Camion', 'CA122', 'KMS-930 E3', '300', '31-12-2018 7:45'], ['Camion', 'CA100', 'KMS-930 E3', '300', '31-12-2018 7:57'], ['Camion', 'CA77', 'KMS-930 E3', '300', '31-12-2018 5:33'], ['Camion', 'CA55', 'KMS-930 E3', '300', '31-12-2018 7:57'], ['Camion', 'CA83', 'KMS-930 E3', '300', '31-12-2018 7:53'], ['Camion', 'CA148', 'LBH T282C', '373', '31-12-2018 5:35'], ['Camion', 'CA75', 'KMS-930 E3', '300', '31-12-2018 5:25'], ['Camion', 'CA140', 'KMS-930 E3', '300', '31-12-2018 5:31'], ['Camion', 'CA150', 'KMS-930 E3', '300', '31-12-2018 7:45'], ['Camion', 'CA164', 'KMS-930 E3', '300', '31-12-2018 7:42'], ['Camion', 'CA114', 'KMS-930 E3', '300', '31-12-2018 7:56'], ['Camion', 'CA124', 'KMS-930 E3', '300', '31-12-2018 7:54'], ['Camion', 'CA133', 'KMS-930 E3', '300', '31-12-2018 5:47'], ['Camion', 'CA153', 'KMS-930 E3', '300', '31-12-2018 7:58'], ['Camion', 'CA145', 'KMS-930 E3', '300', '30-12-2018 2:02'], ['Camion', 'CA130', 'KMS-930 E3', '300', '31-12-2018 7:11'], ['Camion', 'CA93', 'KMS-930 E3', '300', '31-12-2018 5:35'], ['Camion', 'CA84', 'KMS-930 E3', '300', '31-12-2018 7:54'], ['Camion', 'CA88', 'KMS-930 E3', '300', '31-12-2018 7:54'], ['Camion', 'CA69', 'KMS-930 E3', '300', '31-12-2018 6:37'], ['Camion', 'CA138', 'KMS-930 E3', '300', '31-12-2018 7:48'], ['Camion', 'CA151', 'KMS-930 E3', '300', '31-12-2018 7:57'], ['Camion', 'CA103', 'KMS-930 E3', '300', '31-12-2018 7:56'], ['Camion', 'CA113', 'KMS-930 E3', '300', '31-12-2018 7:49'], ['Camion', 'CA121', 'KMS-930 E3', '300', '30-12-2018 12:31'], ['Camion', 'CA156', 'KMS-930 E3', '300', '31-12-2018 7:56'], ['Camion', 'CA64', 'KMS-930 E3', '300', '30-12-2018 21:39'], ['Camion', 'CA79', 'KMS-930 E3', '300', '31-12-2018 7:59'], ['Camion', 'CA59', 'KMS-930 E3', '300', '31-12-2018 7:51'], ['Camion', 'CA81', 'KMS-930 E3', '300', '31-12-2018 7:59'], ['Camion', 'CA68', 'KMS-930 E3', '300', '31-12-2018 7:44'], ['Camion', 'CA160', 'KMS-980E', '373', '31-12-2018 7:52'], ['Camion', 'CA91', 'KMS-930 E3', '300', '31-12-2018 7:58'], ['Camion', 'CA135', 'KMS-930 E3', '300', '31-12-2018 7:53'], ['Camion', 'CA47', 'KMS-930 E3', '300', '31-12-2018 2:03'], ['Camion', 'CA106', 'LBH T282C', '373', '31-12-2018 4:55'], ['Camion', 'CA111', 'KMS-930 E3', '300', '31-12-2018 2:05'], ['Camion', 'CA61', 'KMS-930 E3', '300', '31-12-2018 4:18'], ['Camion', 'CA74', 'KMS-930 E3', '300', '29-12-2018 2:53'], ['Camion', 'CA78', 'KMS-930 E3', '300', '31-12-2018 7:59'], ['Camion', 'CA86', 'KMS-930 E3', '300', '31-12-2018 7:58'], ['Camion', 'CA157', 'KMS-930 E3', '300', '31-12-2018 5:42'], ['Camion', 'CA109', 'KMS-930 E3', '300', '31-12-2018 7:49'], ['Camion', 'CA149', 'KMS-930 E3', '300', '31-12-2018 3:33'], ['Camion', 'CA98', 'KMS-930 E3', '300', '31-12-2018 5:30'], ['Camion', 'CA17', 'Haulpack-830E', '210', '24-04-2018 8:32'], ['Camion', 'CA161', 'KMS-980E', '373', '31-12-2018 7:44'], ['Camion', 'CA123', 'KMS-930 E3', '300', '31-12-2018 7:53'], ['Camion', 'CA119', 'KMS-930 E3', '300', '31-12-2018 7:48'], ['Camion', 'CA143', 'KMS-930 E3', '300', '31-12-2018 7:58'], ['Camion', 'CA57', 'KMS-930 E3', '300', '30-12-2018 21:37'], ['Camion', 'CA146', 'LBH T282C', '373', '31-12-2018 7:43'], ['Camion', 'CA94', 'KMS-930 E3', '300', '31-12-2018 6:09'], ['Camion', 'CA137', 'KMS-930 E3', '300', '31-12-2018 7:59'], ['Camion', 'CA60', 'KMS-930 E3', '300', '30-12-2018 16:13'], ['Camion', 'CA71', 'KMS-930 E3', '300', '31-12-2018 5:36'], ['Camion', 'CA89', 'KMS-930 E3', '300', '31-12-2018 7:50'], ['Camion', 'CA118', 'KMS-930 E3', '300', '31-12-2018 7:55'], ['Camion', 'CA99', 'KMS-930 E3', '300', '31-12-2018 7:59'], ['Camion', 'CA128', 'KMS-930 E3', '300', '30-12-2018 0:00'], ['Camion', 'CA139', 'KMS-930 E3', '300', '31-12-2018 7:47'], ['Camion', 'CA104', 'LBH T282C', '373', '30-12-2018 5:49'], ['Camion', 'CA112', 'KMS-930 E3', '300', '31-12-2018 7:53'], ['Camion', 'CA126', 'KMS-930 E3', '300', '31-12-2018 7:46'], ['Camion', 'CA63', 'KMS-930 E3', '300', '30-12-2018 10:31'], ['Camion', 'CA132', 'KMS-930 E3', '300', '31-12-2018 6:10'], ['Camion', 'CA163', 'KMS-980E', '373', '31-12-2018 7:54'], ['Camion', 'CA82', 'KMS-930 E3', '300', '30-12-2018 23:33'], ['Camion', 'CA96', 'KMS-930 E3', '300', '31-12-2018 7:52'], ['Camion', 'CA70', 'KMS-930 E3', '300', '31-12-2018 7:50'], ['Camion', 'CA76', 'KMS-930 E3', '300', '31-12-2018 7:51'], ['Camion', 'CA56', 'KMS-930 E3', '300', '29-12-2018 5:08'], ['Camion', 'CA46', 'KMS-930 E3', '300', '28-12-2018 16:34'], ['Camion', 'CA147', 'LBH T282C', '373', '31-12-2018 7:48'], ['Camion', 'CA134', 'KMS-930 E3', '300', '31-12-2018 7:58'], ['Camion', 'CA141', 'KMS-930 E3', '300', '31-12-2018 7:50'], ['Camion', 'CA101', 'KMS-930 E3', '300', '31-12-2018 7:50'], ['Camion', 'CA107', 'LBH T282C', '373', '31-12-2018 7:58'], ['Camion', 'CA125', 'KMS-930 E3', '300', '31-12-2018 7:50'], ['Camion', 'CA29', 'Haulpack-830E', '210', '24-04-2018 13:49'], ['Camion', 'CA117', 'KMS-930 E3', '300', '30-12-2018 22:59'], ['Camion', 'CA131', 'KMS-930 E3', '300', '31-12-2018 7:49'], ['Camion', 'CA62', 'KMS-930 E3', '300', '31-12-2018 4:22'], ['Camion', 'CA144', 'KMS-930 E3', '300', '30-12-2018 18:28'], ['Camion', 'CA85', 'KMS-930 E3', '300', '31-12-2018 7:58'], ['Camion', 'CA73', 'KMS-930 E3', '300', '30-12-2018 17:22'], ['Camion', 'CA87', 'KMS-930 E3', '300', '31-12-2018 7:52'], ['Camion', 'CA97', 'KMS-930 E3', '300', '31-12-2018 7:57'], ['Camion', 'CA158', 'KMS-930 E3', '300', '31-12-2018 6:17'], ['Camion', 'CA142', 'KMS-930 E3', '300', '31-12-2018 7:55'], ['Camion', 'CA152', 'KMS-930 E3', '300', '31-12-2018 7:46'], ['Camion', 'CA162', 'KMS-980E', '373', '31-12-2018 5:25'], ['Camion', 'CA110', 'KMS-930 E3', '300', '31-12-2018 7:52'], ['Camion', 'CA116', 'KMS-930 E3', '300', '31-12-2018 7:58'], ['Camion', 'CA120', 'KMS-930 E3', '300', '31-12-2018 7:51'], ['Camion', 'CA102', 'KMS-930 E3', '300', '31-12-2018 7:59'], ['Camion', 'CA108', 'KMS-930 E3', '300', '31-12-2018 7:56'], ['Camion', 'CA154', 'KMS-930 E3', '300', '31-12-2018 6:49'], ['Camion', 'CA95', 'KMS-930 E3', '300', '31-12-2018 7:57'], ['Camion', 'CA155', 'KMS-930 E3', '300', '31-12-2018 7:55'], ['Camion', 'CA136', 'KMS-930 E3', '300', '31-12-2018 7:58'], ['Camion', 'CA58', 'KMS-930 E3', '300', '31-12-2018 7:48'], ['Camion', 'CA80', 'KMS-930 E3', '300', '31-12-2018 7:58'], ['Camion', 'CA72', 'KMS-930 E3', '300', '31-12-2018 7:56'], ['Camion', 'CA67', 'KMS-930 E3', '300', '30-12-2018 20:24'], ['Camion', 'CA129', 'KMS-930 E3', '300', '31-12-2018 5:34'], ['Camion', 'CA159', 'KMS-980E', '373', '31-12-2018 7:47'], ['Camion', 'CA115', 'KMS-930 E3', '300', '31-12-2018 5:26'], ['Camion', 'CA127', 'KMS-930 E3', '300', '31-12-2018 5:26'], ['Camion', 'CA92', 'KMS-930 E3', '300', '31-12-2018 6:14'], ['Camion', 'CA105', 'LBH T282C', '373', '31-12-2018 7:45'], ['Carguio', 'PA21', 'CAT7495', '79', '31-12-2018 7:03'], ['Carguio', 'PA12', 'P&H 4100XPC', '74', '31-12-2018 6:26'], ['Carguio', 'CF06', 'Le Tourneau L1850', '36', '31-12-2018 5:18'], ['Carguio', 'PA11', 'P&H 4100XPC', '74', '28-11-2018 9:40'], ['Carguio', 'PA20', 'KMS-PC8000', '42', '31-12-2018 3:32'], ['Carguio', 'CF05', 'Le Tourneau L1850', '36', '30-12-2018 5:09'], ['Carguio', 'PA13', 'P&H 4100XPC', '74', '31-12-2018 7:38'], ['Carguio', 'PA14', 'P&H 4100XPC', '74', '31-12-2018 5:25'], ['Carguio', 'PA09', 'Bucyrus 495 HR', '73', '31-12-2018 6:05'], ['Carguio', 'CF04', 'Le Tourneau L1850', '36', '20-06-2018 6:58'], ['Carguio', 'PA15', 'KMS-PC5500', '36', '31-12-2018 7:58'], ['Carguio', 'PA08', 'Bucyrus 495 HR', '73', '31-12-2018 7:42'], ['Carguio', 'PA16', 'KMS-PC5500', '36', '31-12-2018 5:45'], ['Carguio', 'PA06', 'Bucyrus 495 HR', '73', '31-12-2018 7:06'], ['Carguio', 'PA10', 'Bucyrus 495 HR', '73', '28-12-2018 22:43'], ['Chancado', 'CS03', 'Chanc. Sulfuros', '0', '30-12-2018 19:11'], ['Chancado', 'CS01', 'Chanc. Sulfuros', '0', '15-12-2018 0:29'], ['Chancado', 'CO01', 'Chanc. Oxidos', '0', '23-12-2018 20:11'], ['Combus. y Lub.', 'P1 UJI', 'Petroleros', '0', '16-12-2018 7:54'], ['Combus. y Lub.', 'P3 SEMIMOVI', 'Petroleros', '0', '16-12-2018 7:54'], ['Combus. y Lub.', 'P2 SEMIMOVI', 'Petroleros', '0', '16-12-2018 7:54'], ['Combus. y Lub.', 'P4 SEMIMOVI', 'Petroleros', '0', '07-12-2018 5:44'], ['Moto.Niv.', 'MO08', 'CAT-16H', '0', '31-12-2018 1:05'], ['Moto.Niv.', 'MO16', 'CAT-16M', '0', '31-12-2018 5:48'], ['Moto.Niv.', 'MO14', 'CAT-16M', '0', '29-12-2018 9:18'], ['Moto.Niv.', 'MO06', 'CAT-16H', '0', '13-02-2018 0:48'], ['Moto.Niv.', 'MO12', 'CAT-16M', '0', '31-12-2018 4:46'], ['Moto.Niv.', 'MO09', 'CAT-24H', '0', '30-12-2018 14:08'], ['Moto.Niv.', 'MO07', 'CAT-16H', '0', '28-12-2018 11:50'], ['Moto.Niv.', 'MO17', 'CAT-24M', '0', '31-12-2018 3:17'], ['Moto.Niv.', 'MO15', 'CAT-16M', '0', '31-12-2018 5:07'], ['Moto.Niv.', 'MO10', 'CAT-24H', '0', '31-12-2018 6:12'], ['Moto.Niv.', 'MO13', 'CAT-16M', '0', '31-12-2018 7:09'], ['Perforadora', 'PO15', 'Bucyrus 49HR', '0', '20-12-2018 2:39'], ['Perforadora', 'PO05', 'Bucyrus 49RII', '0', ''], ['Perforadora', 'PO22', 'AtlasCop DML', '12', '31-12-2018 7:32'], ['Perforadora', 'PO07', 'Bucyrus 49HR', '0', ''], ['Perforadora', 'PO01', 'Bucyrus 49RII', '0', ''], ['Perforadora', 'PO19', 'Bucyrus 49HR', '0', ''], ['Perforadora', 'PO13', 'SVK D75KS', '0', '09-06-2018 3:04'], ['Perforadora', 'PO20', 'AtlasCop DML', '0', '31-12-2018 7:35'], ['Perforadora', 'PO16', 'SVK D75KS', '0', '19-06-2018 8:55'], ['Perforadora', 'PO17', 'PitViper', '0', '29-10-2018 23:33'], ['Perforadora', 'PO03', 'Bucyrus 49RII', '0', ''], ['Perforadora', 'PO21', 'AtlasCop DML', '0', '30-12-2018 19:31'], ['Retroexcavadora', 'RE01', 'KMS-PC-300', '0', '25-03-2018 17:25'], ['Retroexcavadora', 'RE06', 'KMS-PC600', '21', '30-12-2018 20:20'], ['Retroexcavadora', 'RE03', 'KMS-PC-300', '0', '13-02-2018 8:32'], ['Retroexcavadora', 'RE02', 'KMS-PC-300', '0', '16-01-2018 14:59'], ['Retroexcavadora', 'RE05', 'KMS-PC600', '0', '31-12-2018 3:09'], ['Retroexcavadora', 'RE09', 'KMS-PC-300', '21', '31-12-2018 7:33'], ['Retroexcavadora', 'RE04', 'KMS-PC600', '21', '27-12-2018 19:34'], ['Retroexcavadora', 'RE08', 'KMS-PC-300', '21', '30-12-2018 16:25'], ['Tow Haul', 'TW01', 'TOW HAUL', '0', '28-12-2018 14:20'], ['Tow Haul', 'TW02', 'Desconocido', '0', '30-12-2018 9:31'], ['Tow Haul', 'CB01', 'TOW HAUL', '0', '29-12-2018 12:09'], ['Tractor Neumaticos', 'TN06', 'CAT-854G', '0', '10-02-2018 23:49'], ['Tractor Neumaticos', 'TN18', 'CAT-854K', '0', '31-12-2018 3:43'], ['Tractor Neumaticos', 'TN09', 'CAT-834G', '0', '31-12-2018 3:01'], ['Tractor Neumaticos', 'TN15', 'CAT-854K', '0', '31-12-2018 1:48'], ['Tractor Neumaticos', 'TN07', 'CAT-854G', '0', ''], ['Tractor Neumaticos', 'TN13', 'CAT-854K', '0', '30-12-2018 23:00'], ['Tractor Neumaticos', 'TN16', 'CAT-854K', '0', '31-12-2018 2:34'], ['Tractor Neumaticos', 'TN14', 'CAT-854K', '0', '31-12-2018 7:41'], ['Tractor Neumaticos', 'TN11', 'CAT-854G', '0', '31-12-2018 2:04'], ['Tractor Neumaticos', 'TN08', 'CAT-834G', '0', '12-02-2018 20:14'], ['Tractor Neumaticos', 'TN12', 'CAT-834H', '0', '31-12-2018 4:19'], ['Tractor Neumaticos', 'TN10', 'CAT-854G', '0', '31-12-2018 5:09'], ['Tractor Neumaticos', 'TN17', 'CAT-854K', '0', '31-12-2018 3:10'], ['Tractor Orugas', 'TO22', 'CAT-D11T', '0', '31-12-2018 2:03'], ['Tractor Orugas', 'TO08', 'CAT-D11R', '0', '31-12-2018 5:59'], ['Tractor Orugas', 'TO19', 'CAT-D11T', '0', '30-12-2018 20:09'], ['Tractor Orugas', 'TO16', 'CAT-D11T', '0', '31-12-2018 7:46'], ['Tractor Orugas', 'TO17', 'CAT-D11T', '0', '31-12-2018 7:41'], ['Tractor Orugas', 'TO14', 'CAT-D11R', '13', '31-12-2018 7:37'], ['Tractor Orugas', 'TO13', 'CAT-D10R', '0', '31-12-2018 7:44'], ['Tractor Orugas', 'TO12', 'CAT-D10R', '13', '30-12-2018 19:41'], ['Tractor Orugas', 'TO21', 'CAT-D11T', '0', '31-12-2018 7:43'], ['Tractor Orugas', 'TO09', 'CAT-D11R', '0', '31-12-2018 7:57'], ['Tractor Orugas', 'TO07', 'CAT-D11R', '13', '31-12-2018 7:26'], ['Tractor Orugas', 'TO10', 'CAT-D10R', '0', '31-12-2018 5:46'], ['Tractor Orugas', 'TO11', 'CAT-D10R', '0', '31-12-2018 5:21'], ['Tractor Orugas', 'TO18', 'CAT-D11T', '0', '31-12-2018 5:24'], ['Tractor Orugas', 'TO20', 'CAT-D11T', '0', '31-12-2018 0:08']];
    }
  }
})();
"use strict";

(function () {
  var angular = window.angular;
  angular.module('app').component('miningPlanTracing', {
    template: '<div>Tracing</div>'
  });
})();
"use strict";

(function () {
  var angular = window.angular;
  Controller.$inject = ['OEE'];
  angular.module('app').component('oeeCapacityPerformance', {
    template: '<div style="position: relative"><day-oee-chart type="\'CapacityPerformance\'" data="ctrl.filters.data" size="ctrl.filters.size" from="ctrl.filters.from" to="ctrl.filters.to" categories="ctrl.filters.categories" equipments="ctrl.filters.equipments"></day-oee-chart><spinner show="ctrl.filters.loading"></spinner></div>',
    controller: Controller,
    controllerAs: 'ctrl'
  });

  function Controller(OEE) {
    var vm = this;

    vm.$onInit = function () {
      vm.filters = OEE.listenFilters();
    };

    vm.$onDestroy = function () {
      vm.filters.offFilters();
    };
  }
})();
"use strict";

(function () {
  var angular = window.angular;
  Controller.$inject = ['$rootScope', '$timeout', '$element', 'DateUtils', '$filter', 'OEE'];
  angular.module('app').component('dayOeeChart', {
    template: '<div ng-class="{\'panel panel-light\': ctrl.options.title.show}"><div class="panel-heading" ng-if="ctrl.options.title.show">{{ctrl.types[ctrl.type].title}}</div><div class="chart chart-{{ctrl.size}}" ng-class="{transparent: false}"></div><spinner show="ctrl.loading"></spinner><div ng-if="ctrl.selectedDate" class="marginLR20 marginT20 paddingB5"><hour-oee-chart date="ctrl.selectedDate" type="ctrl.type" categories="ctrl.categories" equipments="ctrl.equipments" color="ctrl.color"></hour-oee-chart></div></div>',
    controller: Controller,
    controllerAs: 'ctrl',
    bindings: {
      type: '<',
      options: '<',
      data: '<',
      from: '<',
      to: '<',
      categories: '<',
      equipments: '<',
      size: '<'
    }
  });

  function Controller($root, $timeout, $element, DateUtils, $filter, OEE) {
    var vm = this;

    vm.$onInit = function () {
      var container = $element.find('.chart');
      vm.types = {
        Utilization: {
          title: 'UtilizaciÃ³n por dÃ­a',
          yAxisLabel: '% de tiempo',
          color: '#a3a1fb'
        },
        CapacityPerformance: {
          title: 'Performace Capacidad por dÃ­a',
          yAxisLabel: '% de capacidad',
          color: '#59678c'
        },
        TimePerformance: {
          title: 'Performance Tiempo por dÃ­a',
          yAxisLabel: '% de tiempo',
          color: '#ffb980'
        },
        OEE: {
          colors: '#5fe2a0'
        }
      };
      vm.container = container[0];
    };

    vm.$onChanges = function (changes) {
      vm.options = Object.assign({
        lastMarker: false,
        title: {
          show: true
        },
        enableInteraction: true,
        yAxis: {
          name: true,
          labels: true
        },
        xAxis: {
          name: true,
          labels: true
        },
        series: {
          label: true
        }
      }, vm.options);

      if (changes.data && vm.data) {
        $timeout(function () {
          plotChart(vm.data);
        });
      }
    };

    vm.$onDestroy = function () {
      if (vm.chart) {
        echarts.dispose(vm.chart);
      }
    };

    function plotChart(data) {
      var categories = [];
      var series = [];

      for (var date = new Date(vm.from.getTime()); date <= vm.to; date.setDate(date.getDate() + 1)) {
        categories.push($filter('date')(date, 'MMM d yyyy'));
      }

      var dataMap = {};
      data.forEach(function (current) {
        if (!dataMap[current.parent]) {
          dataMap[current.parent] = {};
        }

        current.data.reduce(function (map, pair) {
          var date = pair[0];
          map[date] = map[date] || {};
          map[date][current.category] = pair[1];
          return map;
        }, dataMap[current.parent]);
      });
      var max = null;

      for (var type in dataMap) {
        var current = dataMap[type];
        var _data = [];

        for (var day in current) {
          var _this = current[day];
          var value = Math.round(1000 * _this[vm.type]) / 10;

          if (value === 0) {
            continue;
          }

          max = max === null || max < value ? value : max;

          _data.push([day, value]);
        }

        series.push({
          type: 'line',
          id: vm.type,
          smooth: false,
          symbolSize: 8,
          color: vm.types[vm.type].color,
          name: vm.types[vm.type].title,
          data: _data,
          label: {
            show: vm.options.series.label,
            position: 'top',
            formatter: function formatter(params) {
              return params.data[1] + '%';
            },
            color: '#666'
          },
          markPoint: vm.options.lastMarker ? {
            data: [{
              value: _data[_data.length - 1][1] + '%',
              coord: [_data.length - 1, _data[_data.length - 1][1]],
              name: 'Valor Actual'
            }]
          } : null,
          markLine: {
            silent: true,
            lineStyle: {
              color: '#999999',
              width: 2
            },
            data: [[{
              symbol: 'none',
              coord: [categories[0], 100]
            }, {
              symbol: 'none',
              coord: [categories[categories.length - 1], 100]
            }]]
          }
        });
      }

      max = !max ? 100 : max + 20 - max % 10;
      max = max < 100 ? 100 : max;
      var option = {
        tooltip: {},
        grid: {
          left: vm.options.yAxis.name ? 80 : 30,
          top: 20,
          right: 20,
          bottom: vm.options.xAxis.name ? 60 : 20
        },
        yAxis: {
          type: 'value',
          axisLabel: {
            fontSize: 11,
            show: vm.options.yAxis.labels
          },
          name: '% de tiempo',
          nameLocation: 'center',
          nameGap: 50,
          min: 0,
          max: max,
          nameTextStyle: {
            color: '#333333',
            fontSize: 16
          }
        },
        xAxis: {
          type: 'category',
          data: categories,
          axisLabel: {
            fontSize: 11,
            show: vm.options.xAxis.labels
          },
          name: 'Fecha',
          nameLocation: 'center',
          nameGap: 30,
          nameTextStyle: {
            color: '#333333',
            fontSize: 16
          }
        },
        series: series
      };

      if (vm.chart) {
        echarts.dispose(vm.chart);
      }

      if (!vm.chart || vm.chart.isDisposed()) {
        vm.chart = echarts.init(vm.container, 'custom');

        if (vm.options.enableInteraction) {
          vm.chart.on('click', onChartClick);
        }
      }

      vm.chart.clear();
      vm.chart.setOption(option);
      vm.chart.resize();
    }

    function onChartClick(params) {
      if (params.componentType !== 'series') {
        return;
      }

      var date = moment(params.value[0], 'MMM D YYYY').toDate();
      var shift = params.seriesId;

      if (date === vm.selectedDate) {
        return;
      }

      $timeout(function () {
        vm.color = params.color;
        vm.selectedDate = date;
      });
    }
  }
})();
"use strict";

(function () {
  var angular = window.angular;
  Controller.$inject = ['$rootScope', '$timeout', '$element', 'DateUtils', '$filter', 'OEE'];
  angular.module('app').component('hourOeeChart', {
    template: '<div class="panel panel-light"><div class="panel-heading"><div>{{ctrl.types[ctrl.type].title}}</div><small style="font-size: 70%">{{ctrl.date | date: \'dd-MM-yyyy\'}}</small></div><div class="chart chart" ng-class="{transparent: false}"></div><spinner show="ctrl.loading"></spinner><minute-oee-chart date="ctrl.date" ng-if="ctrl.selectedHour != null" hour="ctrl.selectedHour" type="ctrl.type" categories="ctrl.categories" equipments="ctrl.equipments" color="ctrl.color"></minute-oee-chart></div>',
    controller: Controller,
    controllerAs: 'ctrl',
    bindings: {
      type: '<',
      date: '<',
      categories: '<',
      equipments: '<',
      color: '<'
    }
  });

  function Controller($root, $timeout, $element, DateUtils, $filter, OEE) {
    var vm = this;

    vm.$onInit = function () {
      var container = $element.find('.chart');
      vm.types = {
        Utilization: {
          title: 'UtilizaciÃ³n por hora',
          yAxisLabel: '% de tiempo'
        },
        CapacityPerformance: {
          title: 'Performace Capacidad por hora',
          yAxisLabel: '% de capacidad'
        },
        TimePerformance: {
          title: 'Performance Tiempo por hora',
          yAxisLabel: '% de tiempo'
        },
        OEE: ''
      };
      vm.container = container[0];
      loadData();
      vm.selectedDate = vm.date;
    };

    vm.$onChanges = function () {
      if (!vm.container) {
        return;
      }

      if (!vm.selectedDate || vm.selectedDate.getTime() !== vm.date.getTime()) {
        vm.selectedHour = null;
        loadData();
      }

      vm.selectedDate = vm.date;
    };

    vm.$onDestroy = function () {
      if (vm.chart) {
        echarts.dispose(vm.chart);
      }
    };

    function loadData() {
      vm.loading = true;
      OEE.loadDataAsHours(vm.date, vm.date, vm.type, vm.categories, vm.equipments).then(function (data) {
        vm.loading = false;
        plotChart(data);
      })["catch"](function (err) {
        vm.loading = false;
        console.log(err);
      });
    }

    function plotChart(data) {
      var categories = [];
      var series = [];

      for (var i = 0; i < 24; i++) {
        var hour = i % 12 === 0 ? 12 : i % 12;
        categories.push(hour + (i < 12 ? 'am' : 'pm'));
      }

      var dataMap = {};
      data.forEach(function (current) {
        if (!dataMap[current.parent]) {
          dataMap[current.parent] = {};
        }

        current.data.reduce(function (map, pair) {
          var date = pair[0];
          map[date] = map[date] || {};
          map[date][current.category] = pair[1];
          return map;
        }, dataMap[current.parent]);
      });
      var max = null;

      for (var type in dataMap) {
        var current = dataMap[type];
        var _data = [];

        for (var day in current) {
          var _this = current[day];
          var value = Math.round(1000 * _this[vm.type]) / 10;

          if (value === 0) {
            continue;
          }

          max = max === null || max < value ? value : max;

          _data.push([day, value]);
        }

        series.push({
          type: 'line',
          id: vm.type,
          smooth: false,
          symbolSize: 8,
          name: vm.type,
          data: _data,
          label: {
            show: true,
            position: 'top',
            formatter: function formatter(params) {
              return params.data[1] + '%';
            },
            color: '#666'
          },
          markLine: {
            silent: true,
            lineStyle: {
              color: '#999999',
              width: 2
            },
            data: [[{
              symbol: 'none',
              coord: [categories[0], 100]
            }, {
              symbol: 'none',
              coord: [categories[categories.length - 1], 100]
            }]]
          }
        });
      }

      max = !max ? 100 : max + 20 - max % 10;
      max = max < 100 ? 100 : max;
      var option = {
        tooltip: {},
        grid: {
          left: 80,
          top: 30,
          right: 30,
          bottom: 60
        },
        yAxis: {
          type: 'value',
          axisLabel: {
            fontSize: 11
          },
          name: '% de tiempo',
          nameLocation: 'center',
          nameGap: 50,
          min: 0,
          max: max,
          nameTextStyle: {
            color: '#333333',
            fontSize: 16
          }
        },
        xAxis: {
          type: 'category',
          data: categories,
          axisLabel: {
            fontSize: 11
          },
          name: 'Fecha',
          nameLocation: 'center',
          nameGap: 30,
          nameTextStyle: {
            color: '#333333',
            fontSize: 16
          }
        },
        visualMap: {
          show: false,
          type: 'piecewise',
          dimension: 0,
          pieces: [{
            lte: 8,
            color: '#a3a1fb'
          }, {
            gt: 8,
            lte: 20,
            color: '#5fe2a0'
          }, {
            gt: 20,
            color: '#a3a1fb'
          }]
        },
        series: series
      };

      if (vm.chart) {
        echarts.dispose(vm.chart);
      }

      if (!vm.chart || vm.chart.isDisposed()) {
        vm.chart = echarts.init(vm.container, 'custom');
        vm.chart.on('click', onChartClick);
      }

      vm.chart.clear();
      vm.chart.setOption(option);
      vm.chart.resize();
    }

    function onChartClick(params) {
      if (params.componentType !== 'series') {
        return;
      }

      var hour = params.value[0];
      var suffix = hour.slice(-2);

      if (suffix === 'am') {
        hour = parseInt(hour) % 12;
      } else {
        hour = parseInt(hour) % 12 + 12;
      }

      var shift = params.seriesId;

      if (hour === vm.selectedHour) {
        return;
      }

      $timeout(function () {
        vm.color = params.color;
        vm.selectedHour = hour;
      });
    }
  }
})();
"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

(function () {
  var angular = window.angular;
  Controller.$inject = ['$rootScope', '$timeout', '$element', 'DateUtils', '$filter', 'OEE'];
  angular.module('app').component('minuteOeeChart', {
    template: '<div class="panel panel-light"><div class="panel-heading"><div>{{ctrl.types[ctrl.type].title}}</div><small style="font-size: 70%">{{ctrl.hourString}} Horas</small></div><div class="chart chart-sm" ng-class="{transparent: false}"></div><spinner show="ctrl.loading"></spinner><minute-oee-details-chart date="ctrl.selectedDate" type="ctrl.type" color="ctrl.color"></minute-oee-details-chart></div>',
    controller: Controller,
    controllerAs: 'ctrl',
    bindings: {
      type: '<',
      date: '<',
      hour: '<',
      categories: '<',
      equipments: '<',
      color: '<'
    }
  });

  function Controller($root, $timeout, $element, DateUtils, $filter, OEE) {
    var vm = this;

    vm.$onInit = function () {
      var container = $element.find('.chart');
      vm.types = {
        Utilization: {
          title: 'UtilizaciÃ³n por minuto',
          yAxisLabel: '% de tiempo'
        },
        CapacityPerformance: {
          title: 'Performace Capacidad por minuto',
          yAxisLabel: '% de capacidad'
        },
        TimePerformance: {
          title: 'Performance Tiempo por minuto',
          yAxisLabel: '% de tiempo'
        },
        OEE: ''
      };
      vm.container = container[0];
      loadData();
      vm.hourString = DateUtils.pad(vm.hour);
      vm.selectedDate = vm.date;
    };

    vm.$onChanges = function () {
      if (!vm.container || !vm.date) {
        return;
      }

      if (!vm.selectedDate || vm.selectedDate.getTime() !== vm.date.getTime() || vm.hour !== vm.selectedHour) {
        loadData();
      }

      vm.selectedDate = vm.date;
      vm.seletectHour = vm.hour;
      vm.hourString = DateUtils.pad(vm.hour);
    };

    vm.$onDestroy = function () {
      if (vm.chart) {
        echarts.dispose(vm.chart);
      }
    };

    function loadData() {
      vm.loading = true;
      OEE.loadDataAsMinutes(vm.date, vm.hour, vm.type, vm.categories, vm.equipments).then(function (data) {
        vm.loading = false;
        vm.data = data;
        plotChart(data);
      })["catch"](function (err) {
        vm.loading = false;
        console.log(err);
      });
    }

    function plotChart(data) {
      var categories = [];
      var series = [];

      for (var i = 0; i < 60; i++) {
        categories.push(i);
      }

      var dataMap = {};
      data.forEach(function (current) {
        if (!dataMap[current.parent]) {
          dataMap[current.parent] = {};
        }

        current.data.reduce(function (map, pair) {
          var date = pair[0];
          map[date] = map[date] || {};
          map[date][current.category] = pair[1];
          return map;
        }, dataMap[current.parent]);
      });
      var max = null;

      for (var type in dataMap) {
        var current = dataMap[type];
        var _data = [];

        for (var _minute in current) {
          var _this = current[_minute];
          var value = Math.round(1000 * _this[vm.type]) / 10;

          var _minute$split = _minute.split(':'),
              _minute$split2 = _slicedToArray(_minute$split, 2),
              hour = _minute$split2[0],
              minute = _minute$split2[1];

          hour = parseInt(hour);
          minute = parseInt(minute);

          if (hour === vm.hour) {
            max = max === null || max < value ? value : max;

            _data.push([minute, value]);
          }
        }

        series.push({
          type: 'line',
          id: vm.type,
          smooth: false,
          symbolSize: 8,
          name: vm.type,
          data: _data,
          markLine: {
            silent: true,
            lineStyle: {
              color: '#999999',
              width: 2
            },
            data: [[{
              symbol: 'none',
              coord: [categories[0], 100]
            }, {
              symbol: 'none',
              coord: [categories[categories.length - 1], 100]
            }]]
          }
        });
      }

      max = !max ? 100 : max + 20 - max % 10;
      max = max < 100 ? 100 : max;
      var option = {
        tooltip: {},
        grid: {
          left: 80,
          top: 30,
          right: 30,
          bottom: 60
        },
        yAxis: {
          type: 'value',
          axisLabel: {
            fontSize: 11
          },
          name: '% de tiempo',
          nameLocation: 'center',
          nameGap: 50,
          min: 0,
          max: max,
          nameTextStyle: {
            color: '#333333',
            fontSize: 16
          }
        },
        xAxis: {
          type: 'category',
          data: categories,
          axisLabel: {
            fontSize: 11
          },
          name: 'Fecha',
          nameLocation: 'center',
          nameGap: 30,
          nameTextStyle: {
            color: '#333333',
            fontSize: 16
          }
        },
        series: series
      };

      if (vm.chart) {
        echarts.dispose(vm.chart);
      }

      if (!vm.chart || vm.chart.isDisposed()) {
        vm.chart = echarts.init(vm.container, 'custom');
      }

      vm.chart.clear();
      vm.chart.setOption(option);
      vm.chart.resize();
    }
  }
})();
"use strict";

(function () {
  var angular = window.angular;
  Controller.$inject = ['$element', '$timeout', '$filter'];
  angular.module('app').component('oeeGauge', {
    template: '<div class="panel panel-default ng-cloak"><div class="panel-heading text-center">{{ctrl.chartTitle}}</div><div class="chart chart-{{ctrl.size}}"></div></div>',
    controller: Controller,
    controllerAs: 'ctrl',
    bindings: {
      value: '<',
      valueInterval: '<',
      size: '<',
      chartTitle: '<',
      color: '<'
    }
  });

  function Controller($element, $timeout, $filter) {
    var vm = this;

    vm.$postLink = function () {
      vm.jqContainer = $element.find('.chart');
      vm.container = vm.jqContainer[0];
      vm.valueInterval = vm.valueInterval || [60, 90];
      $timeout(function () {
        plotChart();
      }, 100);
    };

    vm.$onDestroy = function () {
      if (vm.chart) {
        echarts.dispose(vm.chart);
      }
    };

    function plotChart() {
      var max = vm.valueInterval[1];
      var min = vm.valueInterval[0];
      var now = new Date();
      now.setDate(now.getDate() - 8);
      var categories = [];

      for (var i = 0; i < 7; i++) {
        now.setDate(now.getDate() + 1);
        categories.push($filter('date')(now, 'dd-MM-yyyy'));
      }

      var data = [];

      for (var _i = 0; _i < categories.length - 1; _i++) {
        data.push(Math.floor(10 * Math.random() * (max - min + 1)) / 10 + min);
      }

      data.push(vm.value);

      if (isNaN(vm.value)) {
        if (vm.chart) {
          echarts.dispose(vm.chart);
        }

        return;
      }

      $timeout(function () {
        var option = {
          tooltip: {},
          grid: {
            left: 30,
            right: 15,
            top: 25,
            bottom: 15
          },
          xAxis: {
            type: 'category',
            data: categories,
            axisTick: {
              show: false
            },
            axisLabel: {
              show: false,
              fontSize: 11
            },
            splitLine: {
              show: false
            },
            boundaryGap: false
          },
          yAxis: {
            type: 'value',
            axisTick: {
              show: false
            },
            axisLabel: {
              show: true,
              fontSize: 11
            },
            max: 100,
            min: min - min * .5,
            splitLine: {
              show: false
            }
          },
          series: [{
            color: vm.color,
            name: vm.chartTitle,
            type: 'line',
            data: data,
            smooth: false,
            symbolSize: 8,
            markPoint: {
              data: [{
                value: data[data.length - 1] + '%',
                coord: [data.length - 1, data[data.length - 1]],
                name: 'Valor Actual'
              }]
            }
          }]
        };

        if (vm.chart) {
          echarts.dispose(vm.chart);
        }

        if (!vm.chart || vm.chart.isDisposed()) {
          vm.chart = echarts.init(vm.container, 'custom');
        }

        vm.chart.clear();
        vm.chart.setOption(option);
        vm.chart.resize();
      }, 50);
    }
  }
})();
"use strict";

(function () {
  var angular = window.angular;
  Controller.$inject = ['$state'];
  angular.module('app').component('oeeOverviewChart', {
    template: '<div class="panel panel-default ng-cloak"><div class="panel-heading text-center" ng-class="{\'cursor-pointer\': ctrl.target}" ng-click="ctrl.goToTarget()">{{ctrl.chartTitle}}</div><day-oee-chart type="ctrl.type" data="ctrl.data" size="ctrl.size" from="ctrl.from" to="ctrl.to" categories="ctrl.categories" equipments="ctrl.equipments" options="ctrl.options"></day-oee-chart></div>',
    controller: Controller,
    controllerAs: 'ctrl',
    bindings: {
      type: '<',
      target: '<',
      chartTitle: '<',
      data: '<',
      from: '<',
      to: '<',
      categories: '<',
      equipments: '<',
      size: '<'
    }
  });

  function Controller($state) {
    var vm = this;

    vm.$postLink = function () {
      vm.options = {
        lastMarker: true,
        title: {
          show: false
        },
        enableInteraction: false,
        xAxis: {
          name: false,
          labels: true
        },
        yAxis: {
          name: false,
          labels: true
        },
        series: {
          label: false
        }
      };
      vm.goToTarget = goToTarget;
    };

    vm.$onDestroy = function () {};

    function goToTarget() {
      if (!vm.target) {
        return;
      }

      $state.go(vm.target);
    }
  }
})();
"use strict";

(function () {
  var angular = window.angular;
  Controller.$inject = ['OEE'];
  angular.module('app').component('oeeOverview', {
    template: '<div><oee-overview-chart type="\'OEE\'" data="ctrl.filters.data" from="ctrl.filters.from" to="ctrl.filters.to" categories="ctrl.filters.categories" equipments="ctrl.filters.equipments" chart-title="\'OEE\'" size="\'sm\'"></oee-overview-chart><div class="row"><div class="col-md-4"><oee-overview-chart type="\'Utilization\'" data="ctrl.filters.data" from="ctrl.filters.from" to="ctrl.filters.to" categories="ctrl.filters.categories" equipments="ctrl.filters.equipments" chart-title="\'UtilizaciÃ³n\'" size="\'xs\'" target="\'mineOperation.oee.utilization\'"></oee-overview-chart></div><div class="col-md-4"><oee-overview-chart type="\'CapacityPerformance\'" data="ctrl.filters.data" from="ctrl.filters.from" to="ctrl.filters.to" categories="ctrl.filters.categories" equipments="ctrl.filters.equipments" chart-title="\'Performance Capacidad\'" size="\'xs\'" target="\'mineOperation.oee.capacityPerformance\'"></oee-overview-chart></div><div class="col-md-4"><oee-overview-chart type="\'TimePerformance\'" data="ctrl.filters.data" from="ctrl.filters.from" to="ctrl.filters.to" categories="ctrl.filters.categories" equipments="ctrl.filters.equipments" chart-title="\'Performance Tiempo\'" size="\'xs\'" target="\'mineOperation.oee.timePerformance\'"></oee-overview-chart></div></div><spinner show="ctrl.filters.loading"></spinner></div>',
    controller: Controller,
    controllerAs: 'ctrl'
  });

  function Controller(OEE) {
    var vm = this;

    vm.$onInit = function () {
      vm.filters = OEE.listenFilters();
    };

    vm.$onDestroy = function () {
      vm.filters.offFilters();
    };
  }
})();
"use strict";

(function () {
  var angular = window.angular;
  Controller.$inject = ['OEE'];
  angular.module('app').component('oeeTimePerformance', {
    template: '<div style="position: relative"><day-oee-chart type="\'TimePerformance\'" data="ctrl.filters.data" size="ctrl.filters.size" from="ctrl.filters.from" to="ctrl.filters.to" categories="ctrl.filters.categories" equipments="ctrl.filters.equipments"></day-oee-chart><spinner show="ctrl.filters.loading"></spinner></div>',
    controller: Controller,
    controllerAs: 'ctrl'
  });

  function Controller(OEE) {
    var vm = this;

    vm.$onInit = function () {
      vm.filters = OEE.listenFilters();
    };

    vm.$onDestroy = function () {
      vm.filters.offFilters();
    };
  }
})();
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

(function () {
  var angular = window.angular;
  Controller.$inject = ['$rootScope', '$timeout', '$element', 'DateUtils', '$filter', 'OEE', 'Equipment'];
  angular.module('app').component('mainUtilizationChart', {
    template: '<div class="panel panel-light"><div class="panel-heading">UtilizaciÃ³n por dÃ­a</div><div class="chart chart-{{ctrl.size}}" ng-class="{transparent: false}"></div><spinner show="ctrl.loading"></spinner><div ng-if="ctrl.selectedDate" class="marginLR20"><less-productive-equipments-chart from="ctrl.selectedDate" on-chart-click="ctrl.lessProductiveChartClick(params, from, to)" to="ctrl.selectedDate" categories="ctrl.categories"></less-productive-equipments-chart></div><div ng-if="ctrl.selectedDate && ctrl.selectedEquipments" class="marginLR20"><div class="panel panel-light"><div class="panel-heading">Estado de {{ctrl.selectedEquipments[0].name}}</div><operation-seagull-chart equipments="ctrl.selectedEquipments" size="\'sm\'" from="ctrl.selectedDate" on-chart-click="ctrl.statusChartClick(params)" to="ctrl.selectedDate"></operation-seagull-chart></div></div><div ng-if="ctrl.selectedDate && ctrl.selectedEquipments && ctrl.selectedStatus" class="marginLR20"><div class="panel panel-light"><div class="panel-heading">Detalles de {{ctrl.selectedStatus}}</div><equipment-status-details-chart equipments="ctrl.selectedEquipments" from="ctrl.selectedDate" to="ctrl.selectedDate" status="ctrl.selectedStatus"></equipment-status-details-chart></div></div></div>',
    controller: Controller,
    controllerAs: 'ctrl',
    bindings: {}
  });

  function Controller($root, $timeout, $element, DateUtils, $filter, OEE, Equipment) {
    var vm = this;

    vm.$onInit = function () {
      var container = $element.find('.chart');
      vm.options = {
        title: 'UtilizaciÃ³n por dÃ­a',
        yAxisLabel: '% de tiempo',
        color: '#a3a1fb'
      };
      vm.lessProductiveChartClick = lessProductiveChartClick;
      vm.statusChartClick = statusChartClick;
      vm.container = container[0];
      vm.offFilters = $root.$on('filter:update', function (e, filters) {
        vm.filters = angular.copy(filters);

        if (!vm.filters.categories || !vm.filters.categories.length) {
          return;
        }

        vm.from = vm.filters.from;
        vm.to = vm.filters.to;
        vm.categories = vm.filters.categories;
        vm.loading = true;
        vm.selectedDate = null;
        vm.selectedEquipments = null;
        vm.selectedStatus = null;
        var chartData = {};
        OEE.loadDataAsDays(vm.from, vm.to, 'Utilization', vm.filters.categories, vm.filters.equipments).then(function (result) {
          chartData.utilization = result && result[0] ? result[0].data : [];
          return Equipment.statusData(vm.from, vm.to, vm.filters.categories, vm.filters.equipments, 'day');
        }).then(function (result) {
          chartData.status = result;
          vm.loading = false;
          plotChart(chartData);
        })["catch"](function (err) {
          vm.loading = false;
          console.log(err);
        });
      });
    };

    vm.$onChanges = function (changes) {
      if (changes.data && vm.data) {
        $timeout(function () {
          plotChart(vm.data);
        });
      }
    };

    vm.$onDestroy = function () {
      if (vm.chart) {
        echarts.dispose(vm.chart);
      }

      vm.offFilters();
    };

    function plotChart(chartData) {
      var categories = [];

      for (var date = new Date(vm.from.getTime()); date <= vm.to; date.setDate(date.getDate() + 1)) {
        categories.push($filter('date')(date, 'MMM d yyyy'));
      }

      var defaultSeries = {
        data: [],
        type: 'bar',
        stack: 'stack',
        barWidth: '50%',
        label: {
          show: true,
          fontSize: 11,
          formatter: function formatter(params) {
            return params.data[1] + '%';
          }
        }
      };
      var series = {};
      ['Operative', 'Delay', 'Standby', 'Downtime'].forEach(function (current) {
        series[current] = angular.copy(defaultSeries);
        series[current].name = current;
      });
      chartData.status.forEach(function (current) {
        var minute = current.category;
        var total = current.data.reduce(function (sum, current) {
          return current[1] + sum;
        }, 0);

        var _iterator = _createForOfIteratorHelper(current.data),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var pair = _step.value;
            series[pair[0]].data.push([minute, Math.round(10000 * pair[1] / total) / 100]);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      });
      series = Object.values(series);
      var max = null;

      var _iterator2 = _createForOfIteratorHelper(chartData.utilization),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var pair = _step2.value;
          var value = Math.round(1000 * pair[1]) / 10;

          if (value === 0) {
            continue;
          }

          max = max === null || max < value ? value : max;
          pair[1] = value;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      max = !max ? 100 : max + 20 - max % 10;
      max = max < 100 ? 100 : max;
      var option = {
        tooltip: {},
        legend: {},
        grid: {
          left: 80,
          top: 40,
          right: 20,
          bottom: 60
        },
        yAxis: {
          type: 'value',
          axisLabel: {
            fontSize: 11,
            show: true
          },
          name: '% de tiempo',
          nameLocation: 'center',
          nameGap: 50,
          min: 0,
          max: max,
          nameTextStyle: {
            color: '#333333',
            fontSize: 16
          }
        },
        xAxis: {
          type: 'category',
          data: categories,
          axisLabel: {
            fontSize: 11,
            show: true
          },
          name: 'Fecha',
          nameLocation: 'center',
          nameGap: 30,
          nameTextStyle: {
            color: '#333333',
            fontSize: 16
          }
        },
        series: series
      };

      if (vm.chart) {
        echarts.dispose(vm.chart);
      }

      if (!vm.chart || vm.chart.isDisposed()) {
        vm.chart = echarts.init(vm.container, 'custom');
        vm.chart.on('click', onChartClick);
      }

      vm.chart.clear();
      vm.chart.setOption(option);
      vm.chart.resize();
    }

    function onChartClick(params) {
      if (params.componentType !== 'series') {
        return;
      }

      var date = moment(params.value[0], 'MMM D YYYY').toDate();

      if (date === vm.selectedDate) {
        return;
      }

      $timeout(function () {
        vm.selectedEquipments = null;
        vm.selectedDate = date;
      });
    }

    function lessProductiveChartClick(params, from, to) {
      vm.selectedStatus = null;

      if (params.componentType !== 'series') {
        return;
      }

      var equipmentName = params.data[1];
      vm.selectedEquipments = equipmentName ? [{
        name: equipmentName
      }] : null;
    }

    function statusChartClick(params) {
      if (params.componentType !== 'series') {
        return;
      }

      vm.selectedStatus = params.seriesName;
    }
  }
})();
"use strict";

(function () {
  var angular = window.angular;
  Controller.$inject = ['OEE'];
  angular.module('app').component('oeeUtilization', {
    template: '<div style="position: relative"><main-utilization-chart></main-utilization-chart></div>',
    controller: Controller,
    controllerAs: 'ctrl'
  });

  function Controller(OEE) {
    var vm = this;

    vm.$onInit = function () {};

    vm.$onDestroy = function () {};
  }
})();
"use strict";

(function () {
  var angular = window.angular;
  Utilization.$inject = ['$http', 'IrisUtils', 'Utils'];
  angular.module('app').service('Utilization', Utilization);

  function Utilization($http, IrisUtils, Utils) {
    return {
      byDay: byDay
    };

    function byDay(from, to, categories) {
      var cube = 'ASPMINING.ANALYTICS.STATUSEVENTSLICEDCUBE';
      var fromNumber = IrisUtils.getDateNumber(from);
      var toNumber = IrisUtils.getDateNumber(to);
      var columns = [{
        dimension: 'ShiftInfo',
        hierarchy: 'H2',
        hierarchyLevel: 'ShiftType',
        members: "Members",
        children: [{
          dimension: 'StatusType',
          hierarchy: 'H1',
          hierarchyLevel: 'StatusType',
          members: "Members"
        }]
      }];
      var rows = [{
        dimension: 'SliceStartDate',
        hierarchy: 'H1',
        hierarchyLevel: 'SliceStartDateDay',
        members: 'Members'
      }];
      var dates = fromNumber;

      if (fromNumber !== toNumber) {
        dates = [fromNumber, toNumber];
      }

      var filters = [{
        dimension: 'EQUIPMENT',
        hierarchy: 'H1',
        hierarchyLevel: 'CATEGORY',
        values: categories.map(function (current) {
          return current.name;
        })
      }, {
        dimension: 'SLICESTARTDATE',
        hierarchy: 'H1',
        hierarchyLevel: 'SliceStartDateDay',
        values: [dates]
      }];
      var query = IrisUtils.buildQuery(cube, columns, rows, 'PartialDuration', filters);
      return $http.post(window.IRIS_URL, {
        'MDX': query
      }).then(function (response) {
        return IrisUtils.parseTreeDimensionalResponse(response.data);
      })["catch"](function (response) {
        return Promise.reject(Utils.getHTTPError(response));
      });
    }

    function byShift(from, to, category, shiftType) {
      var cube = 'ASPMINING.ANALYTICS.STATUSEVENTSLICEDCUBE';
      var fromNumber = IrisUtils.getDateNumber(from);
      var toNumber = IrisUtils.getDateNumber(to);
      var columns = [{
        dimension: 'ShiftInfo',
        hierarchy: 'H2',
        hierarchyLevel: 'ShiftType',
        members: "Members",
        children: [{
          dimension: 'StatusType',
          hierarchy: 'H1',
          hierarchyLevel: 'StatusType',
          members: "Members"
        }]
      }];
      var rows = [{
        dimension: 'SliceStartDate',
        hierarchy: 'H1',
        hierarchyLevel: 'SliceStartDateDay',
        members: 'Members'
      }];
      var dates = fromNumber;

      if (fromNumber !== toNumber) {
        dates = [fromNumber, toNumber];
      }

      var filters = [{
        dimension: 'EQUIPMENT',
        hierarchy: 'H1',
        hierarchyLevel: 'CATEGORY',
        values: [category.name]
      }, {
        dimension: 'EQUIPMENT',
        hierarchy: 'H1',
        hierarchyLevel: 'CATEGORY',
        values: [shiftType.name]
      }, {
        dimension: 'SLICESTARTDATE',
        hierarchy: 'H1',
        hierarchyLevel: 'SliceStartDateDay',
        values: [dates]
      }];
      var query = IrisUtils.buildQuery(cube, columns, rows, 'PartialDuration', filters);
      return $http.post(window.IRIS_URL, {
        'MDX': query
      }).then(function (response) {
        return IrisUtils.parseTreeDimensionalResponse(response.data);
      })["catch"](function (response) {
        return Promise.reject(Utils.getHTTPError(response));
      });
    }
  }
})();
"use strict";

(function () {
  var angular = window.angular;
  angular.module('app').component('productionCompliance', {
    template: '<equipment-production-status-chart></equipment-production-status-chart>'
  });
})();
"use strict";

(function () {
  Controller.$inject = ['$rootScope', '$element', 'Truck', 'LoadDump'];
  angular.module('app').component('equipmentProductionStatusChart', {
    template: '<div class="panel panel-light"><div class="panel-heading">Status de producciÃ³n</div><div class="chart" style="height: 450px"></div><spinner show="ctrl.loading"></spinner></div>',
    controller: Controller,
    controllerAs: 'ctrl',
    bindings: {}
  });

  function Controller($rootScope, $element, Truck, LoadDump) {
    var vm = this;

    vm.$onInit = function () {
      vm.container = $element.find('.chart')[0];
      vm.filters = {};
      vm.trucks = [];
      vm.offFilters = $rootScope.$on('filter:update', function (e, filters) {
        vm.filters = angular.copy(filters);
        vm.loading = true;
        Truck.getProduction(vm.filters.trucks, vm.filters.date).then(function (production) {
          vm.loading = false;
          plotChart(production);
        })["catch"](function (err) {
          console.log(err);
        });
      });
    };

    vm.$onDestroy = function () {
      if (vm.offFilters) {
        vm.offFilters();
      }
    };

    function plotChart(data) {
      var series = [];
      var categories = data.length ? data[0].categories : [];
      data.forEach(function (current) {
        series.push({
          name: current.equipmentName,
          data: current.values,
          type: 'bar',
          stack: 'stack'
        });
      });
      var option = {
        tooltip: {},
        grid: {
          left: 80,
          top: 60,
          right: 30,
          bottom: 60
        },
        yAxis: {
          type: 'value',
          axisLabel: {
            fontSize: 11
          },
          name: 'Toneladas',
          nameLocation: 'center',
          nameGap: 50,
          nameTextStyle: {
            color: '#333333',
            fontSize: 16
          }
        },
        xAxis: {
          type: 'category',
          data: categories,
          axisLabel: {
            fontSize: 11
          },
          name: 'Horas',
          nameLocation: 'center',
          nameGap: 30,
          nameTextStyle: {
            color: '#333333',
            fontSize: 16
          }
        },
        series: series,
        legend: {
          show: true,
          padding: [20, 0, 0, 0],
          data: series.map(function (current) {
            return current.name;
          })
        }
      };

      if (vm.chart) {
        echarts.dispose(vm.chart);
      }

      if (!vm.chart || vm.chart.isDisposed()) {
        vm.chart = echarts.init(vm.container, 'custom');
      }

      vm.chart.clear();
      vm.chart.setOption(option);
      vm.chart.resize();
    }
  }
})();
"use strict";

(function () {
  var angular = window.angular;
  Controller.$inject = ['$rootScope', 'EquipmentCategory', '$transitions'];
  angular.module('app').component('equipmentRankFilter', {
    template: '<div class="form-group"><label>Desde</label> <input type="text" class="form-control" readonly ng-disabled="ctrl.loading" style="background: #fff" enable-time="false" datetime-picker="dd-MM-yyyy" is-open="ctrl.dates.from.open" datepicker-options="ctrl.dates.options" ng-click="ctrl.dates.from.open = !ctrl.dates.from.open" when-closed="ctrl.dates.onClose(args)" ng-model="ctrl.dates.from.value"></div><div class="form-group"><label>Hasta</label> <input type="text" class="form-control" readonly ng-disabled="ctrl.loading" style="background: #fff" enable-time="false" datetime-picker="dd-MM-yyyy" is-open="ctrl.dates.to.open" datepicker-options="ctrl.dates.options" ng-click="ctrl.dates.to.open = !ctrl.dates.to.open" when-closed="ctrl.dates.onClose(args)" ng-model="ctrl.dates.to.value"></div><div class="form-group clearfix"><label>Categorias</label><ui-select ng-model="ctrl.category" theme="select2"><ui-select-match placeholder="Seleccione una categorÃ­a">{{$select.selected.name}}</ui-select-match><ui-select-choices repeat="category in ctrl.categories | filter: {name: $select.search}"><div ng-bind-html="category.name | highlight: $select.search"></div></ui-select-choices><ui-select-no-choice>No hay elementos disponibles</ui-select-no-choice></ui-select></div><hr><div><button class="btn btn-primary btn-block" ng-click="ctrl.applyFilters()">Filtrar</button></div>',
    controller: Controller,
    controllerAs: 'ctrl'
  });

  function Controller($root, EquipmentCategory, $transitions) {
    var vm = this;

    vm.$onInit = function () {
      vm.applyFilters = applyFilters;
      vm.dates = {
        from: {
          value: new Date('2018/01/01'),
          open: false
        },
        to: {
          value: new Date('2018/01/01'),
          open: false
        },
        options: {
          showWeeks: false,
          showMeridian: false
        },
        onClose: function onClose(args) {
          loadCategories();
        }
      };
      loadCategories().then(function () {
        applyFilters();
      });
      vm.offSuccess = $transitions.onSuccess({}, function (transition) {
        applyFilters();
      });
    };

    vm.$onDestroy = function () {
      vm.offSuccess();
    };

    function loadCategories() {
      if (vm.prevFrom && vm.prevFrom.getTime() === vm.dates.from.value.getTime() && vm.prevTo && vm.prevTo.getTime() === vm.dates.to.value.getTime()) {
        return;
      }

      vm.loading = true;
      vm.prevFrom = vm.dates.from.value;
      vm.prevTo = vm.dates.to.value;
      return EquipmentCategory.find(vm.dates.from.value, vm.dates.to.value).then(function (categories) {
        vm.categories = categories;
        vm.category = vm.categories.find(function (current) {
          return current.name === 'Camion';
        });
        vm.loading = false;
      })["catch"](function (err) {
        console.log(err);
        vm.loading = false;
      });
    }

    function applyFilters() {
      $root.$emit('filter:update', {
        from: vm.dates.from.value,
        to: vm.dates.to.value,
        category: vm.category
      });
    }
  }
})();
"use strict";

;

(function () {
  var angular = window.angular;
  Controller.$inject = ['$rootScope', '$element', 'Equipment'];
  angular.module('app').component('equipmentRanking', {
    template: '<div class="panel panel-light"><div class="panel-heading">Estado de flota - AnÃ¡lisis diario</div><operation-seagull-chart from="ctrl.from" to="ctrl.to" categories="ctrl.categories" is-loading="ctrl.loading"></operation-seagull-chart><div class="centered-message" ng-show="!ctrl.category"><h4 class="no-margin">No se ha seleccionado una categorÃ­a de equipamiento</h4></div><div ng-show="ctrl.category && !ctrl.loading" class="ng-hide marginLR20 marginT20 paddingB5"><equipment-ranking-details from="ctrl.from" to="ctrl.to" categories="ctrl.categories"></equipment-ranking-details></div></div>',
    controller: Controller,
    controllerAs: 'ctrl'
  });

  function Controller($root, $element, Equipment) {
    var vm = this;

    vm.$onInit = function () {
      var container = $element.find('.chart');
      vm.container = container[0];
      vm.category = null;
      vm.filters = {};
      vm.loading = false;
      vm.offFilters = $root.$on('filter:update', function (e, filters) {
        vm.filters = angular.copy(filters);
        vm.from = vm.filters.from;
        vm.to = vm.filters.to;
        vm.category = vm.filters.category;
        vm.categories = vm.category ? [vm.category] : null;
      });
    };

    vm.$onDestroy = function () {
      vm.offFilters();
    };
  }
})();
"use strict";

;

(function () {
  var angular = window.angular;
  Controller.$inject = [];
  angular.module('app').component('equipmentRankingDetails', {
    template: '<div class="panel panel-light"><div class="panel-heading">Detalles por estado</div><div class="panel-body"><ui-select ng-model="ctrl.selectedStatus" theme="select2" search-enabled="false" ng-change="ctrl.onSelectStatus()"><ui-select-match placeholder="Seleccione un estado">{{$select.selected}}</ui-select-match><ui-select-choices repeat="current in ctrl.status"><div ng-bind-html="current"></div></ui-select-choices><ui-select-no-choice>No hay elementos disponibles</ui-select-no-choice></ui-select></div><div style="position: relative"><div ng-class="{transparent: !ctrl.selectedStatus}"><equipment-status-details-chart categories="ctrl.categories" from="ctrl.from" to="ctrl.to" status="ctrl.selectedStatus"></equipment-status-details-chart></div><div class="centered-message" ng-show="!ctrl.selectedStatus"><h4 class="no-margin">No se ha seleccionado un estado</h4></div></div><spinner show="ctrl.loading"></spinner></div>',
    controller: Controller,
    controllerAs: 'ctrl',
    bindings: {
      from: '<',
      to: '<',
      categories: '<'
    }
  });

  function Controller() {
    var vm = this;

    vm.$onInit = function () {
      vm.status = ['Operative', 'Delay', 'Standby', 'Downtime'];
      vm.onSelectStatus = onSelectStatus;
      vm.selectedStatus = null;
    };

    vm.$onChanges = function () {
      vm.selectedStatus = null;
    };

    vm.$onDestroy = function () {};

    function onSelectStatus() {}
  }
})();
"use strict";

(function () {
  var angular = window.angular;
  angular.module('app').component('productionRanking', {
    template: '<div><equipment-ranking></equipment-ranking></div>'
  });
})();
"use strict";

(function () {
  var angular = window.angular;
  Controller.$inject = [];
  angular.module('app').component('productionRealtime', {
    template: '<truck-operation-chart></truck-operation-chart>',
    controller: Controller,
    controllerAs: 'ctrl',
    bindings: {
      trucks: '<'
    }
  });

  function Controller() {
    var vm = this;

    vm.$onInit = function () {
      vm.text = 'Realtime';
    };
  }
})();
"use strict";

(function () {
  Controller.$inject = ['$rootScope', '$element', 'Truck', 'LoadDump'];
  angular.module('app').component('truckOperationChart', {
    template: '<div class="panel panel-light"><div class="panel-heading">Status de producciÃ³n</div><div class="chart" ng-class="{transparent: !ctrl.trucks.length}"></div><div class="centered-message" ng-show="!ctrl.trucks.length"><h4 class="no-margin">No se han seleccionado Camiones</h4></div><spinner show="ctrl.loading"></spinner></div>',
    controller: Controller,
    controllerAs: 'ctrl',
    bindings: {}
  });

  function Controller($root, $element, Truck, LoadDump) {
    var vm = this;
    var CHART_HEIGHT = 550;
    var HEIGHT_RATIO = 0.6;
    var DIM_CATEGORY_INDEX = 0;
    var DIM_TIME_START = 1;
    var DIM_TIME_FINISH = 2;

    vm.$onInit = function () {
      var container = $element.find('.chart');
      container.height(CHART_HEIGHT);
      vm.container = container[0];
      vm.filters = {};
      vm.offFilters = $root.$on('filter:update', function (e, filters) {
        vm.filters = angular.copy(filters);
        vm.trucks = vm.filters.trucks;

        if (!vm.trucks || !vm.trucks.length) {
          return;
        }

        vm.loading = true;
        LoadDump.getGanttData(vm.filters.trucks, vm.filters.date).then(function (data) {
          vm.loading = false;
          plotChart(data);
        })["catch"](function (err) {
          console.log(err);
        });
      });
    };

    vm.$onDestroy = function () {
      if (vm.offFilters) {
        vm.offFilters();
      }

      if (vm.chart) {
        echarts.dispose(vm.chart);
      }
    };

    function plotChart(_rawData) {
      var colors = ['#07a2a4', '#a3a1fb', '#616dd6', '#5fe2a0'];
      var zoomStart = getZoomStart(_rawData.trucks.length);
      var series = Object.keys(_rawData.data).map(function (key, index) {
        return {
          id: key,
          name: _rawData.data[key].name,
          itemStyle: {
            color: colors[index]
          },
          type: 'custom',
          renderItem: renderGanttItem,
          encode: {
            x: [DIM_TIME_START, DIM_TIME_FINISH],
            y: DIM_CATEGORY_INDEX,
            tooltip: [DIM_CATEGORY_INDEX, DIM_TIME_START, DIM_TIME_FINISH]
          },
          dimensions: _rawData.data[key].dimensions,
          data: _rawData.data[key].data
        };
      });
      series.push({
        id: 'names',
        type: 'custom',
        renderItem: renderAxisLabelItem,
        encode: {
          x: -1,
          y: 0
        },
        data: _rawData.trucks.map(function (current, index) {
          return [index, current];
        })
      });
      var options = {
        legend: {},
        tooltip: {
          formatter: function formatter(params) {
            if (params.seriesId === 'names') {
              return;
            }

            var truck = _rawData.trucks[params.value[0]];
            return "".concat(truck, " | ").concat(params.seriesName, "\n            <br/> ").concat(params.marker, " Inicio:  ").concat(moment(params.value[1]).format('YYYY-MM-DD HH:mm:ss'), "\n            <br/> ").concat(params.marker, " Fin:  ").concat(moment(params.value[2]).format('YYYY-MM-DD HH:mm:ss'));
          }
        },
        animation: false,
        dataZoom: [{
          type: 'slider',
          xAxisIndex: 0,
          filterMode: 'weakFilter',
          height: 20,
          bottom: 0,
          start: 0,
          end: 26,
          handleIcon: 'M10.7,11.9H9.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4h1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
          handleSize: '80%',
          showDetail: false
        }, {
          type: 'inside',
          id: 'insideX',
          xAxisIndex: 0,
          filterMode: 'weakFilter',
          start: 0,
          end: 26,
          zoomOnMouseWheel: false,
          moveOnMouseMove: true
        }, {
          type: 'slider',
          yAxisIndex: 0,
          zoomLock: true,
          width: 10,
          right: 10,
          top: 70,
          bottom: 20,
          start: zoomStart,
          end: 100,
          handleSize: 0,
          showDetail: false
        }, {
          type: 'inside',
          id: 'insideY',
          yAxisIndex: 0,
          start: zoomStart,
          end: 100,
          zoomOnMouseWheel: false,
          moveOnMouseMove: true,
          moveOnMouseWheel: true
        }],
        grid: {
          show: true,
          top: 70,
          bottom: 20,
          left: 150,
          right: 20,
          backgroundColor: '#fff',
          borderWidth: 0
        },
        xAxis: {
          type: 'time',
          position: 'top',
          splitLine: {
            lineStyle: {
              color: ['#E9EDFF']
            }
          },
          axisLine: {
            show: false
          },
          axisTick: {
            lineStyle: {
              color: '#929ABA'
            }
          },
          axisLabel: {
            color: '#929ABA',
            inside: false,
            align: 'center'
          }
        },
        yAxis: {
          axisTick: {
            show: false
          },
          splitLine: {
            show: false
          },
          axisLine: {
            show: false
          },
          axisLabel: {
            show: false
          },
          min: 0,
          max: _rawData.trucks.length
        },
        series: series
      };

      if (vm.chart) {
        echarts.dispose(vm.chart);
      }

      if (!vm.chart || vm.chart.isDisposed()) {
        vm.chart = echarts.init(vm.container, 'custom');
      }

      vm.chart.clear();
      vm.chart.setOption(options);
      vm.chart.resize();
    }

    function renderGanttItem(params, api) {
      var categoryIndex = api.value(DIM_CATEGORY_INDEX);
      var startTime = api.coord([api.value(DIM_TIME_START), categoryIndex]);
      var finishTime = api.coord([api.value(DIM_TIME_FINISH), categoryIndex]);
      var barLength = finishTime[0] - startTime[0];
      var barHeight = api.size([0, 1])[1] * HEIGHT_RATIO;
      var x = startTime[0];
      var y = startTime[1] - barHeight;
      var rectNormal = clipRectByRect(params, {
        x: x,
        y: y,
        width: barLength,
        height: barHeight
      });
      return {
        type: 'group',
        children: [{
          type: 'rect',
          ignore: !rectNormal,
          shape: rectNormal,
          style: api.style()
        }]
      };
    }

    function renderAxisLabelItem(params, api) {
      var y = api.coord([0, api.value(0)])[1];

      if (y < params.coordSys.y + 5) {
        return;
      }

      var textWidth = echarts.format.getTextRect(api.value(1)).width;
      var barHeight = api.size([0, 1])[1] * HEIGHT_RATIO / 2;
      return {
        type: 'group',
        position: [textWidth / 2, y - barHeight + 5],
        children: [{
          type: 'text',
          style: {
            x: 10,
            y: 0,
            textVerticalAlign: 'bottom',
            textAlign: 'center',
            text: api.value(1),
            textFill: '#000'
          }
        }]
      };
    }

    function clipRectByRect(params, rect) {
      return echarts.graphic.clipRectByRect(rect, {
        x: params.coordSys.x,
        y: params.coordSys.y,
        width: params.coordSys.width,
        height: params.coordSys.height
      });
    }

    function getZoomStart(trucksLength) {
      var visibleBars = Math.floor((CHART_HEIGHT - 150) / 40);

      if (visibleBars >= trucksLength) {
        return 0;
      }

      return 100 * (1 - visibleBars / trucksLength);
    }
  }
})();
//# sourceMappingURL=maps/app.min.js.map
