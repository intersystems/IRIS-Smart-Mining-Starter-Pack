Include DEMOMACROS

Class SampleDispatch.BO.Event.Operation extends Ens.BusinessOperation {

Parameter INVOCATION = "Queue";

Method StatusChangeEvent(pInput As SampleDispatch.BO.Event.StatusChangeEvent, Output pOutput As Ens.Response) As %Status
{
	#Dim eventChange As OEE.Data.EventChange
	#Dim previousChange As OEE.Data.EventChange
	Set sc=$$$OK
	
	Try
	{
		Set previousChange = ##class(OEE.Data.EventChange).GetLastEventChangeForEquipment(pInput.EquipmentId, pInput.EventTime)
		
		If previousChange'=""
		{
			Set previousChange.EndTime = pInput.EventTime
			Set previousChange.SessionIds=previousChange.SessionIds_","_..%SessionId
			Set sc = previousChange.%Save()
			Quit:$$$ISERR(sc)
			
			// Now that we have an end time, we can fragment it.
			// Later, for 400 events (downtime), we will need to find the endtime using, maybe, the shift downtime
			// We would fix this later.
			Do ..FragmentChangeEvent(previousChange)
		}
		
		//Set eventChange = ##class(OEE.Data.EventChange).%New()
		Set eventChange = ##class(CanonicalModelImported.StatusEvent).%New()
		//Set eventChange.EquipmentId = pInput.EquipmentId
		//Set eventChange.StartTime = pInput.EventTime
		//Set eventChange.EndTime = pInput.EventTime
		//Set eventChange.Duration = pInput.EventTime
		//Set eventChange.SessionIds=eventChange.SessionIds_","_..%SessionId
		
		Set sc = eventChange.%Save()
		Quit:$$$ISERR(sc)		
		
	}
	Catch (oException)
	{
		Set sc = oException.AsStatus()
	}
	
	Quit sc
}

ClassMethod FragmentChangeEvent(pChangeEvent As OEE.Data.EventChange)
{
	// Now we can update the time slice record
	// FRAGMENTATION into Time Slice table
	
	Set tTimeSliceStartTime = pChangeEvent.StartTime
	Set tOriginalEndTime = pChangeEvent.EndTime
	
	Set bFinished=0
	Do 
	{
		// Adding one minute 
		Set tTimeSliceEndTime=$System.SQL.DATEADD("mi", 1, tTimeSliceStartTime)
		
		// Have I gone too far? I mean: Beyond my tOriginalEndTime?
		// Or am I right at it?
		If (tTimeSliceEndTime ]] tOriginalEndTime) || (tTimeSliceEndTime = tOriginalEndTime)
		{
			//Then that is my last end time and it should match my tOriginalEndTime
			Set tTimeSliceEndTime = tOriginalEndTime
			
			//That is my last one...
			Set bFinished = 1
		}
					
		Do ..CreateTimesliceChangeEvent(pChangeEvent, tTimeSliceStartTime, tTimeSliceEndTime)
		
		Set tTimeSliceStartTime=tTimeSliceEndTime
	}
	While 'bFinished
}

ClassMethod CreateTimesliceChangeEvent(pChangeEvent As OEE.Data.EventChange, pTimeSliceStartTime As %TimeStamp, pTimeSliceEndTime As %TimeStamp)
{
	#Dim timesliceChangeEvent As OEE.Data.OEETimeSlice
	
	Set timesliceChangeEvent = ##class(OEE.Data.OEETimeSlice).%New()
	Set timesliceChangeEvent.EventChange = pChangeEvent
	Set timesliceChangeEvent.StartTime = pTimeSliceStartTime
	Set timesliceChangeEvent.EndTime = pTimeSliceEndTime
	
	Set sc = timesliceChangeEvent.%Save()
	$$$ThrowStatusExceptionIfError(sc, "FragmentChangeEventException")
	
}

Method CompletedDumpEvent(pInput As SampleDispatch.BO.Event.CompletedDumpEvent, Output pOutput As Ens.Response) As %Status
{
	#Dim eventChange As OEE.Data.EventChange
	#Dim previousChange As OEE.Data.EventChange
	#Dim timeSlice As OEE.Data.OEETimeSlice
	
	Set sc=$$$OK
	
	Try
	{		
		Set dump = ##class(OEE.Data.Dump).%New()
		Set dump.EquipmentId = pInput.EquipmentId
		Set dump.StartTime = pInput.StartTime
		Set dump.EndTime = pInput.EndTime
		Set dump.Tons = pInput.Tons
		
		Set sc = dump.%Save()
		
		// Now we can update the time slice record. We are assuming that a dump is always inside a single shift
		// hence, no fragmentation is necessary
		
		Set timeSlice = ##class(OEE.Data.OEETimeSlice).%New()
		Set timeSlice.Dump = dump
		Set timeSlice.StartTime = dump.StartTime
		Set timeSlice.EndTime = dump.EndTime
		
		Set sc = timeSlice.%Save()
		
	}
	Catch (oException)
	{
		Set sc = oException.AsStatus()
	}
	
	Quit sc
}

/// Gets the CompleteEvent object and saves it
Method CompleteEvent(pInput As SampleDispatch.BO.Event.CompleteEvent, Output pOutput As Ens.Response) As %Status
{
	#Dim eventChange As OEE.Data.EventChange
	#Dim previousChange As OEE.Data.EventChange
	#Dim timeSlice As OEE.Data.OEETimeSlice
	
	Set sc=$$$OK
	
	Try
	{		
		Set event = ##class(ASPMining.CanonicalModel.Operation.StatusEvent).%New()
		#Dim event As ASPMining.CanonicalModel.Operation.StatusEvent
		
		// Check if equipment exists and open it, if not, make a fake one, which should not be seen if everything works right
		If ##class(ASPMining.CanonicalModel.Equipment.Equipment).EquipmentIndexExists(pInput.EquipmentId){
			Set event.Equipment = ##class(ASPMining.CanonicalModel.Equipment.Equipment).EquipmentIndexOpen(pInput.EquipmentId)
		}else{
			Set event.Equipment = ##class(ASPMining.CanonicalModel.Equipment.Equipment).%New()
			set event.Equipment.Id = pInput.EquipmentId
			set event.Equipment.Name = "GENERATED BY OPERATION"
			// Resolve Category
			if '##class(ASPMining.CanonicalModel.Equipment.EquipmentCategory).EquipmentCategoryIndexExists("GENERATED BY OPERATION") {
				Set event.Equipment.EquipmentCategory = ##class(ASPMining.CanonicalModel.Equipment.EquipmentCategory).%New() 
				Set event.Equipment.EquipmentCategory.Name = "GENERATED BY OPERATION"
			}else{
				Set event.Equipment.EquipmentCategory = ##class(ASPMining.CanonicalModel.Equipment.EquipmentCategory).EquipmentCategoryIndexOpen("GENERATED BY OPERATION")
			}
			
			// Resolve Model
			if '##class(ASPMining.CanonicalModel.Equipment.EquipmentModel).EquipmentModelIndexExists("GENERATED BY OPERATION") {
				Set event.Equipment.EquipmentModel = ##class(ASPMining.CanonicalModel.Equipment.EquipmentModel).%New() 
				Set event.Equipment.EquipmentModel.Model = "GENERATED BY OPERATION"
			}else{
				Set event.Equipment.EquipmentModel = ##class(ASPMining.CanonicalModel.Equipment.EquipmentModel).EquipmentModelIndexOpen("GENERATED BY OPERATION")
			}
		}
		Set event.StartDate = pInput.StartDate
		Set event.EndDate = pInput.EndDate
		Set event.Duration = pInput.Duration
		
		//TODO: Validate status reasons and type jus like with equipment
		If '##class(ASPMining.CanonicalModel.Operation.StatusReason).ReasonIndexExists(pInput.StatusReasonId) {
			Set event.StatusReason = ##class(ASPMining.CanonicalModel.Operation.StatusReason).%New()
			Set event.StatusReason.Reason = pInput.StatusReasonId
			Set event.StatusReason.Description = "GENERATED BY OPERATION"
		}else{
			Set event.StatusReason = ##class(ASPMining.CanonicalModel.Operation.StatusReason).ReasonIndexOpen(pInput.StatusReasonId)
		}
		
		If '##class(ASPMining.CanonicalModel.Operation.StatusType).TypeIndexExists(pInput.StatusTypeId){
			Set event.StatusType = ##class(ASPMining.CanonicalModel.Operation.StatusType).%New()
			Set event.StatusType.Type = pInput.StatusTypeId
			Set event.StatusType.Description = "GENERATED BY OPERATION"
		}else{
			Set event.StatusType = ##class(ASPMining.CanonicalModel.Operation.StatusType).TypeIndexOpen(pInput.StatusTypeId)
		}
		
		If '##class(ASPMining.CanonicalModel.Planning.Shift).ShiftIndexExists(pInput.ShiftId){
			set event.Shift = ##class(ASPMining.CanonicalModel.Planning.Shift).%New()
			set event.Shift.Id = pInput.ShiftId
		}else{
			set event.Shift = ##class(ASPMining.CanonicalModel.Planning.Shift).ShiftIndexOpen(pInput.ShiftId)
		}
		//Set event.StatusReason = ##class(ASPMining.CanonicalModel.Operation.StatusReason).%New() // pInput.StatusReasonId
		//Set event.StatusReason.Reason = pInput.StatusReasonId
		//Set event.StatusType = ##class(ASPMining.CanonicalModel.Operation.StatusType).%New() // pInput.StatusTypeId
		//Set event.StatusType.Type = pInput.StatusTypeId
		
		Set sc = event.%Save()
		
	}
	Catch (oException)
	{
		Set sc = oException.AsStatus()
	}
	
	Quit sc
}

Method NewEquipment(pInput As ASPMining.CanonicalModel.Equipment.Equipment, Output pOutput As Ens.Response) As %Status
{

	Set sc=$$$OK
	
	Try
	{		
		If '##class(ASPMining.CanonicalModel.Equipment.Equipment).EquipmentIndexExists(pInput.Id) {
			Set sc = pInput.%Save()		
		}
	}
	Catch (oException)
	{
		Set sc = oException.AsStatus()
	}
	
	Quit sc
}

Method NewReason(pInput As ASPMining.CanonicalModel.Operation.StatusReason, Output pOutput As Ens.Response) As %Status
{

	Set sc=$$$OK
	
	Try
	{		
		If '##class(ASPMining.CanonicalModel.Operation.StatusReason).ReasonIndexExists(pInput.Reason) {
			Set sc = pInput.%Save()
		}
	}
	Catch (oException)
	{
		Set sc = oException.AsStatus()
	}
	
	Quit sc
}

Method NewShift(pInput As ASPMining.CanonicalModel.Planning.Shift, Output pOutput As Ens.Response) As %Status
{

	Set sc=$$$OK
	
	Try
	{		
		If '##class(ASPMining.CanonicalModel.Planning.Shift).ShiftIndexExists(pInput.Id) {
			Set sc = pInput.%Save()
		}
	}
	Catch (oException)
	{
		Set sc = oException.AsStatus()
	}
	
	Quit sc
}

Method NewDump(pInput As ASPMining.CanonicalModel.Production.DumpEvent, Output pOutput As Ens.Response) As %Status
{

	Set sc=$$$OK
	
	Try
	{		
		If '##class(ASPMining.CanonicalModel.Production.DumpEvent).DumpIndexExists(pInput.DumpId) {
			Set sc = pInput.%Save()
		}
	}
	Catch (oException)
	{
		Set sc = oException.AsStatus()
	}
	
	Quit sc
}

Method NewOEMEvent(pInput As ASPMining.CanonicalModel.HWMonitoring.OEMEvent, Output pOutput As Ens.Response) As %Status
{

	Set sc=$$$OK
	
	Try
	{		
		If '##class(ASPMining.CanonicalModel.HWMonitoring.OEMEvent).OEMEventIndexExists(pInput.Id) {
			Set sc = pInput.%Save()
		}
	}
	Catch (oException)
	{
		Set sc = oException.AsStatus()
	}
	
	Quit sc
}

Method NewSlicedEvent(pInput As SampleDispatch.BO.Event.SlicedEvent, Output pOutput As Ens.Response) As %Status
{
	#Dim eventChange As OEE.Data.EventChange
	#Dim previousChange As OEE.Data.EventChange
	#Dim timeSlice As OEE.Data.OEETimeSlice
	
	Set sc=$$$OK
	
	Try
	{		
		Set event = ##class(ASPMining.CanonicalModel.Operation.StatusEventSliced).%New()
		#Dim event As ASPMining.CanonicalModel.Operation.StatusEventSliced
		
		// Check if equipment exists and open it, if not, make a fake one, which should not be seen if everything works right
		If ##class(ASPMining.CanonicalModel.Equipment.Equipment).EquipmentIndexExists(pInput.EquipmentId){
			Set event.Equipment = ##class(ASPMining.CanonicalModel.Equipment.Equipment).EquipmentIndexOpen(pInput.EquipmentId)
		}else{
			Set event.Equipment = ##class(ASPMining.CanonicalModel.Equipment.Equipment).%New()
			set event.Equipment.Id = pInput.EquipmentId
			set event.Equipment.Name = "GENERATED BY OPERATION"
			// Resolve Category
			if '##class(ASPMining.CanonicalModel.Equipment.EquipmentCategory).EquipmentCategoryIndexExists("GENERATED BY OPERATION") {
				Set event.Equipment.EquipmentCategory = ##class(ASPMining.CanonicalModel.Equipment.EquipmentCategory).%New() 
				Set event.Equipment.EquipmentCategory.Name = "GENERATED BY OPERATION"
			}else{
				Set event.Equipment.EquipmentCategory = ##class(ASPMining.CanonicalModel.Equipment.EquipmentCategory).EquipmentCategoryIndexOpen("GENERATED BY OPERATION")
			}
			
			// Resolve Model
			if '##class(ASPMining.CanonicalModel.Equipment.EquipmentModel).EquipmentModelIndexExists("GENERATED BY OPERATION") {
				Set event.Equipment.EquipmentModel = ##class(ASPMining.CanonicalModel.Equipment.EquipmentModel).%New() 
				Set event.Equipment.EquipmentModel.Model = "GENERATED BY OPERATION"
			}else{
				Set event.Equipment.EquipmentModel = ##class(ASPMining.CanonicalModel.Equipment.EquipmentModel).EquipmentModelIndexOpen("GENERATED BY OPERATION")
			}
		}
		
		//Validate Reasons
		If '##class(ASPMining.CanonicalModel.Operation.StatusReason).ReasonIndexExists(pInput.StatusReasonId) {
			Set event.StatusReason = ##class(ASPMining.CanonicalModel.Operation.StatusReason).%New()
			Set event.StatusReason.Reason = pInput.StatusReasonId
			Set event.StatusReason.Description = "GENERATED BY OPERATION"
		}else{
			Set event.StatusReason = ##class(ASPMining.CanonicalModel.Operation.StatusReason).ReasonIndexOpen(pInput.StatusReasonId)
		}
		
		//Validate Reason Types
		If '##class(ASPMining.CanonicalModel.Operation.StatusType).TypeIndexExists(pInput.StatusTypeId){
			Set event.StatusType = ##class(ASPMining.CanonicalModel.Operation.StatusType).%New()
			Set event.StatusType.Type = pInput.StatusTypeId
			Set event.StatusType.Description = "GENERATED BY OPERATION"
		}else{
			Set event.StatusType = ##class(ASPMining.CanonicalModel.Operation.StatusType).TypeIndexOpen(pInput.StatusTypeId)
		}
		
		//Validate Shift
		If '##class(ASPMining.CanonicalModel.Planning.Shift).ShiftIndexExists(pInput.ShiftId){
			set event.Shift = ##class(ASPMining.CanonicalModel.Planning.Shift).%New()
			set event.Shift.Id = pInput.ShiftId
		}else{
			set event.Shift = ##class(ASPMining.CanonicalModel.Planning.Shift).ShiftIndexOpen(pInput.ShiftId)
		}
		
		Set event.SliceStartDate = pInput.SliceStartDate
		set event.PartialDuration = pInput.PartialDuration
		
		Set sc = event.%Save()
		
	}
	Catch (oException)
	{
		Set sc = oException.AsStatus()
	}
	
	Quit sc
}

XData MessageMap {
<MapItems>
    <MapItem MessageType="SampleDispatch.BO.Event.StatusChangeEvent">
        <Method>StatusChangeEvent</Method>
    </MapItem>
    <MapItem MessageType="SampleDispatch.BO.Event.CompletedDumpEvent">
        <Method>CompletedDumpEvent</Method>
    </MapItem>
    <MapItem MessageType="SampleDispatch.BO.Event.CompleteEvent">
        <Method>CompleteEvent</Method>
    </MapItem>
    <MapItem MessageType="ASPMining.CanonicalModel.Equipment.Equipment">
        <Method>NewEquipment</Method>
    </MapItem>
    <MapItem MessageType="ASPMining.CanonicalModel.Operation.StatusReason">
        <Method>NewReason</Method>
    </MapItem>
    <MapItem MessageType="ASPMining.CanonicalModel.Planning.Shift">
        <Method>NewShift</Method>
    </MapItem>
    <MapItem MessageType="ASPMining.CanonicalModel.Production.DumpEvent">
        <Method>NewDump</Method>
    </MapItem>
    <MapItem MessageType="ASPMining.CanonicalModel.HWMonitoring.OEMEvent">
        <Method>NewOEMEvent</Method>
    </MapItem>
    <MapItem MessageType="SampleDispatch.BO.Event.SlicedEvent">
        <Method>NewSlicedEvent</Method>
    </MapItem>
</MapItems>
}

}