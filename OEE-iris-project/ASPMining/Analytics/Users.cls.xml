<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="MDX2JSON.Users">
<Description><![CDATA[
Class for Setting/Getting User <b>settings</b> for various <b>apps</b>.<br>
Can also export/import dettings to/from <b>files</b>.]]></Description>
<IncludeCode>MDX2JSON.MDX2JSON</IncludeCode>
<TimeCreated>63669,64053.502396</TimeCreated>

<Method name="GetConfig">
<Description><![CDATA[
Get <b>App</b> configuration for <b>User</b>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>App:%String,User:%String=$Username</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set App = $zcvt(App, "U")
	set config = $g($$$Global($$$Settings, User, App))
	set:((config="")||($Roles[$$$DefaultSettingsRole)) config = $g($$$Global($$$Settings, $$$DefaultUser, App))
	return config
]]></Implementation>
</Method>

<Method name="SetConfig">
<Description><![CDATA[
Set <b>App</b> configuration for <b>User</b> equal to <b>Config</b>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>App:%String,Config:%String="",User:%String=$Username</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set App = $zcvt(App, "U")
	if ($Roles[$$$DefaultSettingsRole) {
		set $$$Global($$$Settings, $$$DefaultUser, App) = Config
	} else {
		set $$$Global($$$Settings, User, App) = Config
	}
	return $$$OK
]]></Implementation>
</Method>

<Method name="SetConfigForAllUsers">
<Description><![CDATA[
Set <b>App</b> configuration for all Users equal to <b>Config</b>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>App:%String,Config:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	new $Namespace
	set $Namespace = "%SYS"
	return:'($$$IOwnAllRole) $$$ERROR($$$AccessDenied)

	set rs=##Class(%ResultSet).%New("Security.Users:List")
	set st = rs.Execute()
	while rs.Next() {
		set st=$$$ADDSC(st,..SetConfig(App, Config, rs.Get("Name")))
	}
	kill rs
	return st
]]></Implementation>
</Method>

<Method name="MoveConfig">
<Description><![CDATA[
Move <b>App</b> configuration for all Users from Security.Users:Attributes property to $$$Global($$$Settings, App)]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>App:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ns = $Namespace
	zn "%SYS"
	return:'($$$IOwnAllRole) $$$ERROR($$$AccessDenied)

	set rs = ##Class(%ResultSet).%New("Security.Users:List")
	set st = rs.Execute()
	while rs.Next() {
		set Config = ..OldGetConfig(App, rs.Get("Name"))
		set st = $$$ADDSC(st,..SetConfig(App, Config, rs.Get("Name")))
	}
	
	zn ns
	return st
]]></Implementation>
</Method>

<Method name="MapGlobal">
<Description><![CDATA[
Map <b>Global</b> From <b>Database</b> into <b>Namespace</b>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Namespace:%String,Global:%String,From:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	new $Namespace
	set $Namespace = "%SYS"
	set Namespace=$ZCVT(Namespace,"U")

	if '##Class(Config.MapGlobals).Exists(Namespace,Global) {
		kill p
		set p("Database")=From
		set st = ##Class(Config.MapGlobals).Create(Namespace,Global,.p,,1)
		return:$$$ISERR(st) st
	}
	
	set st = ##Class(Config.CPF).Write()
	return:$$$ISERR(st) st
	set st = ##Class(Config.Map).MoveToActive(Namespace)
	return:$$$ISERR(st) st
 	set st = ##Class(Config.Namespaces).Load(Namespace)
	
	return st
]]></Implementation>
</Method>

<Method name="OldGetConfig">
<Description><![CDATA[
Get <b>App</b> configuration for <b>User</b> from Security.Users:Attributes property]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>App:%String,User:%String=$Username</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set ns = $Namespace
	zn "%SYS"
	set st =##class(Security.Users).Get(User,.Properties)
	zn ns
	return $lg($g(Properties("Attributes",App)))
]]></Implementation>
</Method>

<Method name="ExportConfig">
<Description><![CDATA[
Export <b>App</b> configuration for <b>User</b> to <b>File</b>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>App:%String,User:%String=$Username,FileName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set config = ..GetConfig(App,User)
	set stream=##class(%Stream.FileCharacter).%New()
	set stream.TranslateTable="UTF8"
	set st=stream.LinkToFile(FileName)
	return:$$$ISERR(st) st
	set st=stream.Write(config)
	return:$$$ISERR(st) st
	set st=stream.%Save()
	return st
]]></Implementation>
</Method>

<Method name="ImportConfig">
<Description><![CDATA[
Import <b>App</b> configuration for <b>User</b> from <b>File</b>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>App:%String,User:%String=$Username,FileName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set stream=##class(%Stream.FileCharacter).%New()
	set stream.TranslateTable="UTF8"
	set st=stream.LinkToFile(FileName)
	return:$$$ISERR(st) st
	set config = ""
	while 'stream.AtEnd {
		set config = config _stream.Read()
	}
	set st = ..SetConfig(App,config,User)
	return st
]]></Implementation>
</Method>

<Method name="GetFavorites">
<Description>
Get Current user favorites</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set st = ##class(%DeepSee.UserPortal.Utils).%GetFavoritesForUser(.Favorites)
	return:$$$ISERR(st) st
	set st = ##class(%ZEN.Auxiliary.jsonProvider).%ArrayToJSON($lb("FullName","ShortName","Folder","Tip","Type","Icon","AddDate","URL"),.Favorites)
	return:$$$ISERR(st) st
	return $$$OK
]]></Implementation>
</Method>

<Method name="MoveConfigNS">
<Description>
Move config from old storage schema to a new one</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>TargetNS="MDX2JSON"</FormalSpec>
<Implementation><![CDATA[
	new $Namespace
	#dim mappedlist As %ListOfDataTypes
	#dim userlist As %ListOfDataTypes
	set mappedlist = ##class(MDX2JSON.AbstractREST).GetMappings().GetAt("Mapped")
	set userlist = ..GetUserList()
	for i = 1:1:mappedlist.Count() {
		zn mappedlist.GetAt(i)
		for j=1:1:userlist.Count() {
			if ..GetConfig("DeepSeeWeb",userlist.GetAt(j))'="" {
				set settings($$$Settings, userlist.GetAt(j), $ZCVT($Namespace,"U")) = ..GetConfig("DeepSeeWeb",userlist.GetAt(j))
			}
		}
		m ^MDX2JSONOld = $$$Global
		k $$$Global	
	}
	zn TargetNS
	m $$$Global = settings
]]></Implementation>
</Method>

<Method name="MoveBack">
<Description>
Move config from new storage schema to an old one</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>TargetNS="MDX2JSON"</FormalSpec>
<Implementation><![CDATA[
	new $Namespace
	set mappedlist = ##class(MDX2JSON.AbstractREST).GetMappings().GetAt("Mapped")
	for i = 1:1:mappedlist.Count() {
		zn mappedlist.GetAt(i) 
		m $$$Global = ^MDX2JSONOld
	}
]]></Implementation>
</Method>

<Method name="GetUserList">
<Description>
Get list of all users</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%ListOfDataTypes</ReturnType>
<Implementation><![CDATA[
	new $Namespace
	set $Namespace = "%SYS"
	set userlist = ##class(%ListOfDataTypes).%New()
	set statement = ##class(%SQL.Statement).%New()
    set status = statement.%PrepareClassQuery("Security.Users","List")
    if $$$ISERR(status) { do $system.OBJ.DisplayError(status) }
    set resultset = statement.%Execute()
    while resultset.%Next() {
        do userlist.Insert(resultset.%Get("Name"))
	}
	return userlist
]]></Implementation>
</Method>
</Class>
</Export>
