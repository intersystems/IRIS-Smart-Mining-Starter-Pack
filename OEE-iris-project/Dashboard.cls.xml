<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="MDX2JSON.Dashboard">
<Description>
Class with methods related to DeepSee Dashboard and Widget processing.</Description>
<IncludeCode>MDX2JSON.MDX2JSON</IncludeCode>
<TimeCreated>63568,54242.448605</TimeCreated>

<Parameter name="folderName">
<Description>
Folder, from which we get Dashboards.</Description>
<Type>%String</Type>
<Default>Mobile</Default>
</Parameter>

<Method name="GetDashboardListSQL">
<Description>
Get SQL for folder, from which we get Dashboards. </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>folderName:%String=..#folderName</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set basesql = "SELECT MDX2JSON.ResolveText(title) AS title, fullName AS path, MDX2JSON.GetDashCover(bookCover) AS Cover FROM %DeepSee_Dashboard.Definition "
	set basefilter = "WHERE ((NOT (foldername %STARTSWITH '$TRASH' or foldername %STARTSWITH 'HIDDEN')) OR foldername IS NULL) AND (MDX2JSON.IsItemVisible(fullName) = 1) "
	return:folderName="" basesql _ basefilter
	set filter = "AND folderName %STARTSWITH '" _ folderName _"'"
	return basesql _ basefilter _ filter
]]></Implementation>
</Method>

<Method name="GetDashCover">
<Description><![CDATA[
Extracts dashboard cover from %DeepSee.Dashboard.Definition class bookCover property.<br>
Usage: Select MDX2JSON.Dashboard_GetDashCover(bookCover) FROM %DeepSee_Dashboard.Definition]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>bookCover:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<SqlName>GetDashCover</SqlName>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	do ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(bookCover,,.obj,1)
	return:$isobject(obj) obj.background.src
	return ""
]]></Implementation>
</Method>

<Method name="IsItemVisible">
<Description><![CDATA[
Check visibility of folder item to current user.<br>
Usage: Select fullname, MDX2JSON.IsItemVisible(fullname) FROM %DeepSee_Dashboard.Definition]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fullName:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<SqlName>IsItemVisible</SqlName>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	set visible = ##class(%DeepSee.UserLibrary.Utils).%FolderItemExists(fullName)
	return:visible=1 1
	return 0
]]></Implementation>
</Method>

<Method name="ResolveText">
<Description><![CDATA[
Resolve a localized text string at run time.<br>
A localized string can take the following forms:<br>
"String" -- not localized.<br>
"$$$String" -- equivalent to $$$Text("String","DeepSeeUser")<br>
"$$$String/Domain" -- equivalent to $$$Text("String","Domain")<br>
Equivalent to ##class(%DeepSee.UserPortal.Utils).%ResolveText(), but in SQL context<br>
Usage: Select MDX2JSON.Dashboard_ResolveText(title) FROM %DeepSee_Dashboard.Definition]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Text:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<SqlName>ResolveText</SqlName>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[	return ##class(%DeepSee.UserPortal.Utils).%ResolveText(Text)
]]></Implementation>
</Method>

<Method name="OpenDashboardByName">
<Description><![CDATA[
Opens DeepSee dashboard by it's name. Returns status of aatempt to locate and open dashboard.
<b>DashName</b> - fullName property of %DeepSee.Dashboard.Definition class.<br>
<b>Dashboard</b> - OREF to opened dashboard would be passed here upon successfull execution.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>DashName:%Integer,*Dashboard:%DeepSee.Dashboard.Definition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	 kill Dashboard
	 
	 set id = ""
	 set global = ##class(MDX2JSON.DashboardRS).#global
	 set dashclass = ##class(MDX2JSON.DashboardRS).#dashclass
	 for {
	 	set id = $order(@global@(id))
	 	quit:id=""
	 		
	 	/// first we check that it's a dashboard (not a pivot, etc.)
		set oid = ##class(%DeepSee.UserLibrary.FolderItem).%ComposeOid(id)
	    do ##class(%DeepSee.UserLibrary.FolderItem).%OnDetermineClass(oid, .class)
	    CONTINUE:class'=dashclass
	    
	    /// second we check that it's the one we need
	    quit:$ZCVT(##class(MDX2JSON.DashboardRS).GetDashFullName(id),"L")=$ZCVT(DashName,"L")
	 }
	 return:id="" $$$ERROR($$$GeneralError,"Dashboard " _ DashName _ " does not exist")
	 set Dashboard = ##class(%DeepSee.Dashboard.Definition).%OpenId(id,,.st)
	 return st
]]></Implementation>
</Method>

<Method name="WidgetsToProxyObject">
<Description>
Converts %DeepSee.Dashboard.Definition widgets into %ZEN.proxyObject.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Dashboard:%DeepSee.Dashboard.Definition,*Widgetlist:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#Dim widget As %DeepSee.Dashboard.Widget
	
	set Widgetlist = $$$NewDynObj
	set Widgetlist.children = $$$NewDynObjList
	set Widgetlist.displayInfo = ..GetDashboardDisplayInfo(Dashboard)
	set Widgetlist.info = ..GetDashboardInfo(Dashboard)

	set st = $$$OK
	try {
		for i=1:1:Dashboard.widgets.Count() {
			$$$Insert(Widgetlist.children,..WidgetToProxyObject(Dashboard.widgets.GetAt(i), ..GetWidgetCube(Dashboard, i)))
		}
	} catch ex {
		set st = ex.AsStatus()
		do ex.Log()
	}
	return st
]]></Implementation>
</Method>

<Method name="WidgetToProxyObject">
<Description>
Converts relevant parts of %DeepSee.Dashboard.Widget object into %ZEN.proxyObject.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>Widget:%DeepSee.Dashboard.Widget,CubeName:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set obj = $$$NewDynObj

	if (Widget.dataSource '= "") {
		set st = ..GetMdx(Widget.dataSource, .mdx, .basemdx)
		set obj.dataSource = Widget.dataSource
	} elseif (Widget.dataLink '= "") {
		// Linked widgets processing
		set mdx = ""
		set basemdx = ""
		set obj.Link = Widget.dataLink
	}
	
	// datasource is a kpi
	if $piece(Widget.dataSource, ".", *) = "kpi" {
		set kpiClass = ##class(%DeepSee.Utils).%GetKPIClass(Widget.dataSource)
		set obj.kpitype = $classmethod(kpiClass, "%GetSourceType")
	}
	
	// Widget is a portlet
	if Widget.type = "portlet" {
		set portletClass = Widget.subtypeClass
		set:portletClass="" portletClass = Widget.subtype
		set obj.settings = ..PortletSettongsToArray(portletClass)
	}

	set obj.mdx = $g(mdx)
	set obj.name = Widget.name
	set obj.basemdx = $g(basemdx)
	set obj.type =Widget.subtype
	set obj.title = ##class(%DeepSee.UserPortal.Utils).%ResolveText(Widget.title) /// $$$ support
	set obj.key =  Widget.key
	set obj.drillDownDataSource = Widget.drillDownDataSource
	set obj.cube = CubeName
	set obj.displayInfo = ..GetWidgetDisplayInfo(Widget)
	set obj.controls = $$$NewDynObjList

	for i=1:1:Widget.controls.Count()
	{
		set control = ..WidgetControlToProxyObject(Widget, i, CubeName)
		if $IsObject(control) {
			$$$Insert(obj.controls,control)
		}
	}

	if ##class(%Dictionary.CompiledMethod).%ExistsId("MDX2JSON.Dashboard||Process"_Widget.subtype) {
		do $ClassMethod("MDX2JSON.Dashboard", "Process"_Widget.subtype, Widget, obj)
	}

	if (Widget.properties.Count()>0) {
		set obj.properties = $$$NewDynObj //##class(%ArrayOfDataTypes).%New()
		do {
			set property = Widget.properties.GetNext(.key)
			//do:(key'="") obj.properties.SetAt(property,key)
			do:(key'="") obj.properties.%DispatchSetProperty(key,property)
		} while key'=""
	}

	return obj
]]></Implementation>
</Method>

<Method name="ProcesscomboChart">
<ClassMethod>1</ClassMethod>
<FormalSpec>Widget:%DeepSee.Dashboard.Widget,Obj:%ZEN.proxyObject</FormalSpec>
<Implementation><![CDATA[

	set Obj.seriesTypes = $$$NewDynDTList
	for i=1:1:Widget.dataSeries.Count()
	{
		$$$Insert(Obj.seriesTypes,Widget.dataSeries.GetAt(i).type)
	}

	set Obj.overrides = $$$NewDynObjList
	do {
		set overridestr = Widget.overrides.GetNext(.key) // we take DeepSee widget override string (in "json" format)
		return:key=""


		do ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(overridestr,,.override,1) // convert it into %ZEN.proxyObject

		#if ($$$IsNewJSON)&&($$$JSONEnabled) // if we are on new versions
			set overridestr = ##class(MDX2JSON.AbstractREST).OutputToStr(override,"%ToJSON") // convert it into valid json
			set override = ##class(%Object).$fromJSON(overridestr) // and into %Object
		#endif

		if $IsObject(override) {
			$$$Insert(Obj.overrides,override)
		}

	} while key'=""
]]></Implementation>
</Method>

<Method name="ProcesstreeMapChart">
<ClassMethod>1</ClassMethod>
<FormalSpec>Widget:%DeepSee.Dashboard.Widget,Obj:%ZEN.proxyObject</FormalSpec>
<Implementation><![CDATA[	do ..ProcesscomboChart(Widget, Obj)
]]></Implementation>
</Method>

<Method name="ProcesstextMeter">
<ClassMethod>1</ClassMethod>
<FormalSpec>Widget:%DeepSee.Dashboard.Widget,Obj:%ZEN.proxyObject</FormalSpec>
<Implementation><![CDATA[
	set Obj.dataProperties = $$$NewDynDTList
	for i=1:1:Widget.dataProperties.Count()
	{
		set dataProperty = $$$NewDynObj
		do Widget.dataProperties.GetAt(i).%CopyTo(dataProperty)
		$$$Insert(Obj.dataProperties,dataProperty)
	}
]]></Implementation>
</Method>

<Method name="WidgetControlToProxyObject">
<Description>
Converts %DeepSee.Dashboard.Control object into %ZEN.proxyObject, handles run-time DeepSee variables.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>Widget:%DeepSee.Dashboard.Widget,Number:%Integer,CubeName:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set obj = $$$NewDynObj
	set st = Widget.controls.GetAt(Number).%CopyTo(obj) // copy widget control properties to proxyObj

	set obj.label = ##class(%DeepSee.UserPortal.Utils).%ResolveText(obj.label)
	set obj.source = Widget.name

	set:(obj.target="") obj.target = Widget.name

	if ($e(obj.value)="@") {
		set name = $e(obj.value,2,*)
		set value = ##class(%DeepSee.UserPortal.Utils).%GetUserSetting(name,.st)
		if $e(value,1,2)="&[" {
			set obj.value = value
		} else {
			set obj.value = "&[" _ value _ "]"
		}
	}

	set:((obj.action="applyFilter") || (obj.action="setFilter")) obj.values = ..GetMembersForFilter(CubeName,obj.targetProperty)
	return obj
]]></Implementation>
</Method>

<Method name="GetMdx">
<Description><![CDATA[
Returns MDX string used to create pivot.<br>
<b>pPivotName</b> - fullname of pivot. Eg: "KPIs & Plugins/HoleFoods.pivot". Case insensitive.<br>
<b>pStatus</b> - Status of query execution.<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPivotName:%String,*MDX,*BaseMDX</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tPivot As %DeepSee.Dashboard.Pivot
	#dim tPivotTable As %DeepSee.Component.pivotTable
	set MDX = ""
	set BaseMDX = ""

	set tPivot = ##class(%DeepSee.UserLibrary.Utils).%OpenFolderItem(pPivotName,.pStatus)
	return:'$IsObject(tPivot) $$$OK
	return:$$$ISERR(pStatus) pStatus

	set tPivotTable = ##class(%DeepSee.Component.pivotTable).%New()
	set pStatus = tPivot.%CopyToComponent(tPivotTable)
	return:$$$ISERR(pStatus) pStatus

	set rs = tPivotTable.%CreateResultSet(.pStatus,.tParms,.tFilterInfo,.tAdvancedFilters,.BaseMDX) // returns tQueryText - mdx without filters
	return:$$$ISERR(pStatus) pStatus

	set pStatus = tPivotTable.%GetFilterInfo(.tFilterInfo,.tAdvancedFilters)
	//return:$$$ISERR(pStatus) pStatus

	if (($d(tFilterInfo)=0) &&($d(tAdvancedFilters)=0)) {
		set MDX = BaseMDX // no filters, so we're good
	} else {
		set rs = tPivotTable.%CreateResultSet(.pStatus,.tParms,.tFilterInfo,.tAdvancedFilters,.MDX) // returns tQueryText - mdx with filters
		return:$$$ISERR(pStatus) pStatus
	}

	// Remove \n
	set MDX = $TR(MDX,$C(10),"")
	set BaseMDX = $TR(BaseMDX,$C(10),"")

	return pStatus
]]></Implementation>
</Method>

<Method name="GetMembersForFilter">
<Description><![CDATA[
Return list of possible filter member values for a given dashboard data source and filter.
Returns list of %ZEN.proxyObject:<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>DataSource:%String,Filter:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set st = ##class(%DeepSee.Dashboard.Utils).%GetMembersForFilter(DataSource,Filter,.tMembers,.tDefaultFilterValue,,.tRelatedFilters,0,,.tValueList)
	set members = $$$NewDynObjList

	set key = $order(tMembers(""))
	while (key '= "") {
		set member = $$$NewDynObj
		set member.name = $lg(tMembers(key),1)
		set member.path = $lg(tMembers(key),2)
		set member.info = $lg(tMembers(key),3)
		set key = $order(tMembers(key))
		$$$Insert(members,member)
	}
	return members
]]></Implementation>
</Method>

<Method name="GetDashboardDisplayInfo">
<Description>
Converts %DeepSee.Dashboard.Definition display information into %ZEN.proxyObject.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Dashboard:%DeepSee.Dashboard.Definition</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set DisplayInfo = $$$NewDynObj
	set DisplayInfo.snapToGrid = Dashboard.snapTo // Dashboard is in "snap to grid" mode.
	set DisplayInfo.gridMode = Dashboard.snapGrid // Dashboard uses the new snapGrid layout mode.
	set DisplayInfo.gridRows = Dashboard.gridRows
	set DisplayInfo.gridCols = Dashboard.gridCols
	return DisplayInfo
]]></Implementation>
</Method>

<Method name="GetWidgetDisplayInfo">
<Description>
Converts %DeepSee.Dashboard.Widget display information into %ZEN.proxyObject.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Widget:%DeepSee.Dashboard.Widget</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set DisplayInfo = $$$NewDynObj

	set DisplayInfo.top = Widget.top
	set DisplayInfo.left = Widget.left
	set DisplayInfo.width = Widget.width
	set DisplayInfo.height = Widget.height
	set DisplayInfo.topCol = Widget.homeColL
	set DisplayInfo.leftRow = Widget.homeRowL
	set DisplayInfo.colWidth = Widget.colSpanL
	set DisplayInfo.rowHeight = Widget.rowSpanL

	return DisplayInfo
]]></Implementation>
</Method>

<Method name="GetDashboardInfo">
<Description>
Converts %DeepSee.Dashboard.Definition display information into %ZEN.proxyObject.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Dashboard:%DeepSee.Dashboard.Definition</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set Info = $$$NewDynObj
	set Info.title = ##class(%DeepSee.UserPortal.Utils).%ResolveText(Dashboard.title)

	return Info
]]></Implementation>
</Method>

<Method name="GetWidgetCube">
<Description>
Returns name of widget's pivot source cube.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Dashboard:%DeepSee.Dashboard.Definition,WidgetNumber:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set datasource = ..DetermineWidgetDataSource(Dashboard, WidgetNumber)
	
	if ##class(%DeepSee.UserLibrary.Utils).%FolderItemExists(datasource,.id) {
		set cube = ##class(%DeepSee.Dashboard.Pivot).cubeNameGetStored(id)
	} else {
		// KPIs and Worksheets
		set cube = ""
	}
	return cube
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>

<Method name="DetermineWidgetDataSource">
<Description>
Return datasource if one exists, if it's a linked widget then follow the link and get that datasource.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Dashboard:%DeepSee.Dashboard.Definition,WidgetNumber:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set datasource = Dashboard.widgets.GetAt(WidgetNumber).dataSource
	return:datasource'="" datasource
	
	set datalink =  Dashboard.widgets.GetAt(WidgetNumber).dataLink
	return:datalink="" ""
	set WidgetNumber = ..GetWidgetNumberByName(Dashboard, datalink)
	return ..DetermineWidgetDataSource(Dashboard, WidgetNumber)
]]></Implementation>
</Method>

<Method name="GetWidgetNumberByName">
<Description>
Determines position of a widget in dashboard's widget list. </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Dashboard:%DeepSee.Dashboard.Definition,WidgetName:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	for i=1:1:Dashboard.widgets.Count() {
		return:(Dashboard.widgets.GetAt(i).name = WidgetName) i
	}
	return ""
]]></Implementation>
</Method>

<Method name="PortletSettongsToArray">
<Description><![CDATA[
On return, <var>pInfo</var> can contain a list of settings in the form:<br/>
pInfo(n) = $LB(name,value,type,caption,title)<br/>
<var>name</var> is the logical name of the setting.<br/>
<var>value</var> is the default value of the setting.<br/>
<var>type</var> indicates the type of the setting. This determines the control
displayed to get the value of the setting. If omitted the type is assumed to be a string.
The type can be: "%Integer", "%Boolean", or "ENUM^caption1:value1,caption2:value2".<br/>
<var>caption</var> is the localized caption of the setting.<br/>
<var>title</var> is an optional tooltip displayed for the setting.<br/>
Custom portlet settings can be controlled using the SETTINGS=PORTLET parameter in the 
dashboard URL 
set list = ##class(MDX2JSON.Dashboard).KPISettongsToArray("DeepSee.Model.PortletDemo.ClockPortlet")]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Class:%Dictionary.CacheClassname</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	do $classmethod(Class, "%OnGetPortletSettings", .info)
	set list = $$$NewDynObjList
	
	set key = $o(info(""))
	while key'="" {
		set settingInfo = info(key)
		
		set setting = $$$NewDynObj
		set setting.name = $lg(settingInfo, 1)
		set setting.value = $lg(settingInfo, 2)
		set setting.type = $lg(settingInfo, 3)
		set setting.caption = $lg(settingInfo, 4)
		set setting.title = $lg(settingInfo, 5)
		
		$$$Insert(list, setting)	
		set key = $o(info(key))	
	}
	
	return list
]]></Implementation>
</Method>
</Class>
</Export>
