<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="MDX2JSON.REST">
<Description><![CDATA[
Class for REST-like web api for MDX2JSON transformation (and XML/A).<br>
Example: send HTTP POST request to web application with Dispatch class <b>MDX2JSON.REST</b>
with body: { "MDX":"QUERY" }, where QUERY is a correct MDX statement, ex:  <br>
{<br>
		"MDX": "SELECT NON EMPTY [Product].[P1].[Product Category].Members ON 0,NON EMPTY [Outlet].[H1].[Region].Members ON 1 FROM [HoleFoods]"<br>
} <br>
You can send requests to:<br> <ul>
	<li>webapplication/Test - to get test info, %request, %response and %session</li>
	<li>webapplication/MDX - to get result in JSON format for MDX query</li>
	<li>webapplication/MDXDrillthrough - to get resulting listing in JSON format for MDX Drillthrough query</li>
	<li>webapplication/MDX2XMLA - to get result in XML/A format for MDX query</li>
</ul>

Dashboard related requests are:
 <ul>
	<li>webapplication/Dashboards - get all dashboards in a namespace (GET request).</li>
	<li>webapplication/Dashboards - get folder specific (recursively) dashboards in a namespace (POST request with {Folder:"FolderName"} body) ).</li>
	<li>webapplication/Dashboard - get all dashboard widgets (POST request with {Dashboard:"DashboardName"} body) with filters as part of dashboard.</li>
	<li>webapplication/Widgets - get all dashboard widgets (POST request with {Dashboard:"DashboardName"} body) with filters as part of widgets.</li>
</ul>
To get information about possible datasource (cube, pivot, kpi, metric) filters and filters' values:<br><ul>
	<li>webapplication/Filters - Same but with POST { "DataSource":"DataSourceName.ext","Values":0, Search:"SearchTerm"} body. If values = 1, then filters' values would also be provided. If Search is not empty only filter values, containing search term would be returned.</li>
</ul>

To get information about pivot:<br><ul>
		<li>webapplication/DataSource- to get info about pivot (POST {DataSource:"Name of DS"})</li> </ul>

To get information about system-wide defaults (format):<br><ul>
		<li>webapplication/Format - to get info about system-wide defaults (format). GET request </li> </ul>

You can add a param Namespace to request to execute MDX in desired namespace (MDX2JSON package must be mapped to that namespace):<br>
webapplication/MDX?Namespace=Samples<br>

Example: send HTTP GET request to web application with Dispatch class <b>MDX2JSON.REST</b> and URL:<br>
/FilterValues/HoleFoods/[DateOfSale].[Actual].[MonthSold] -  to get information about possible values of [DateOfSale].[Actual].[MonthSold] in HoleFoods Cube.<br>
]]></Description>
<IncludeCode>MDX2JSON.MDX2JSON</IncludeCode>
<Super>MDX2JSON.AbstractREST</Super>
<TimeCreated>63165,65257.8179</TimeCreated>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
	<!-- Send objects in this format: {"MDX":"QUERY"} HTTP method: POST -->

   <Route Url="/MDX" Method="POST" Call="WriteJSONfromMDX"/>
   <Route Url="/CancelQuery/:CubeKey/:QueryKey" Method="GET" Call="%DeepSee.ResultSet:%CancelQuery"/>
   <Route Url="/MDX2JSONP" Method="POST" Call="WriteJSONPfromMDX" Body="MDX"/>
   <Route Url="/MDXDrillthrough" Method="POST" Call="WriteDrillthroughJSON" Body="MDX"/>
   <Route Url="/MDX2XMLA" Method="POST" Call="WriteXMLAfromMDX" Body="MDX"/>

   <!-- Get info about availible filters and their values -->
   <Route Url="/Filters" Method="POST" Call="WriteFiltersForDataSource"/>

   <!-- Get info about widgets-->
   <Route Url="/Dashboards" Method="GET" Call="GetDashboardList"/>
   <Route Url="/Dashboards" Method="POST" Call="GetDashboardList" Body="Folder"/>
   <Route Url="/Dashboard" Method="POST" Call="GetDashboard" Body="Dashboard"/>
   <Route Url="/Widgets" Method="POST" Call="GetWidgetsList" Body="Dashboard"/>
   <Route Url="/Action/:Cube/:Action" Method="POST" Call="ExecuteAction"/>

   <!-- Get info about system format and locale-->
   <Route Url="/Format" Method="GET" Call="GetFormat"/>

   <!-- Get info about pivot-->
   <Route Url="/DataSource" Method="POST" Call="GetDataSource" Body="DataSource"/>

   <!-- Get info about pivot-->
   <Route Url="/TermList" Method="POST" Call="GetTermList" Body="TermList"/>
   
   <!-- Get info about pivot variables-->
   <Route Url="/PivotVariables/:Cube" Method="GET" Call="WritePivotVariablesForCube"/>

   <!-- Get info about user config-->
   <Route Url="/Config" Method="POST" Call="SetConfig" Body="Application"/>
   <Route Url="/Config/:Application" Method="GET" Call="GetConfig" />

   <!-- Get info about user favorites-->
   <Route Url="/Favorites" Method="GET" Call="GetFavorites"/>
   <Route Url="/Favorites/:Item" Method="POST" Call="AddFavorite" />
   <Route Url="/Favorites/:Item" Method="DELETE" Call="RemoveFavorite" />

   <!-- Valid but illicit, do not use-->
   <Route Url="/MDX/:query" Method="GET" Call="WriteJSONfromMDXURL"/>
   <Route Url="/MDXfilters/:query" Method="GET" Call="WriteFiltersForMDX"/>
   
    <Route Url="/KPI" Method="POST" Call="WriteJSONfromKPI"/>

   <!-- Test methods-->
   <Route Url="/Test" Method="GET" Call="Test"/>
   <Route Url="/Logout" Method="GET" Call="Logout"/>
   
   <!-- DSW specific methods-->
   <Route Url="/Addons" Method="GET" Call="WriteAddons"/>
   <Route Url="/Themes" Method="GET" Call="WriteThemes"/>
 </Routes>
]]></Data>
</XData>

<Method name="Logout">
<Description>
End user session by force.
Returns status.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim %session As %CSP.Session
	set st = %session.Logout(1)
	set %session.EndSession = 1
	return st
]]></Implementation>
</Method>

<Method name="Test">
<Description><![CDATA[
Test method, outputs <b>%request</b>, <b>%response</b> and <b>%session</b> objects. ]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set obj = ##class(%ZEN.proxyObject).%New()
	set obj.Status = "OK"
	set obj.User = $Username
	set obj.Version = "2.2"
	set obj.Parent = ##class(MDX2JSON.Tests).#LastCommit
	set obj.ParentTS = ##class(MDX2JSON.Tests).#LastCommitTS
	set obj.DefaultApp = $System.CSP.GetDefaultApp($Namespace)
	set obj.Mappings = ..GetMappings()
	if $$$Debug {
		set obj.Roles = $Roles
		set obj.Namespace = $Namespace
		set obj.Cache = $ZVersion
		set obj.SessionId = %session.SessionId
		set obj.Request = %request
		set obj.Response = %response
		//set obj.Session = %session
	}
	do obj.%ToJSON()
	return $$$OK
]]></Implementation>
</Method>

<Method name="GetDataSource">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	return ##class(MDX2JSON.Utils).GetDataSource($$$R("DataSource"))
]]></Implementation>
</Method>

<Method name="GetTermList">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	return ##class(MDX2JSON.Utils).GetTermList($$$R("TermList"))
]]></Implementation>
</Method>

<Method name="GetWidgetsList">
<Description><![CDATA[
Wrapper for ##class(MDX2JSON.Utils).GetWidgetsList()<br>
Converts incoming request object (JSON: {Dashboard:"Dashboard Full Name"} and calls abovementioned method.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	return ##class(MDX2JSON.Utils).GetWidgetsList($$$R("Dashboard"))
]]></Implementation>
</Method>

<Method name="GetDashboard">
<Description><![CDATA[
Wrapper for ##class(MDX2JSON.Utils).GetDashboard()<br>
Converts incoming request object (JSON: {Dashboard:"Dashboard Full Name"} and calls abovementioned method.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	return ##class(MDX2JSON.Utils).GetDashboard($$$R("Dashboard"))
]]></Implementation>
</Method>

<Method name="GetDashboardList">
<Description>
Returns JSON array of (title, path) for all dashboards in namespace (accessible to current user).</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	if %request.Method = "POST" {
		set folderName = $$$R("Folder")
	} else {
		set folderName = ##class(MDX2JSON.Dashboard).#folderName
	}

	try {
		do ##class(MDX2JSON.DashboardRS).WriteJSON(folderName)
	} catch ex {
		set st = ex.AsStatus()
	}
	return st
]]></Implementation>
</Method>

<Method name="WriteDrillthroughJSON">
<Description><![CDATA[
Wrapper for ##class(MDX2JSON.Utils).WriteDrillthroughJSON(pMDX).<br>
Converts incoming request object and calls abovementioned method.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	return ##class(MDX2JSON.Utils).WriteDrillthroughJSON($$$R("MDX"))
]]></Implementation>
</Method>

<Method name="WriteJSONfromMDXURL">
<Description>
Wrapper for ##class(MDX2JSON.Utils).WriteJSONPfromMDX(pMDX)
Do not use.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>MDX:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set MDX = $ZCONVERT($ZCONVERT(MDX ,"I","URL") ,"I","UTF8")
  	set st = ##class(MDX2JSON.Utils).WriteJSONfromMDX(MDX)
  	return st
]]></Implementation>
</Method>

<Method name="WriteFiltersForMDX">
<Description>
Wrapper for ##class(MDX2JSON.Utils).WriteFiltersForMDX(pMDX)
Do not use.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>MDX:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set MDX = $ZCONVERT($ZCONVERT(MDX ,"I","URL") ,"I","UTF8")
	set st = ##class(MDX2JSON.Utils).WriteFiltersForMDX(MDX)
	return st
]]></Implementation>
</Method>

<Method name="WriteFiltersForDataSource">
<Description>
Wrapper for ##class(MDX2JSON.Utils).WriteFiltersForDataSource(pDataSource, pValues, pSearchKey)</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set DataSource = $$$R("DataSource")
	set Values = $$$R("Values")
	set Search = $$$R("Search")
	
	#dim RequestedFilters As %ListOfDataTypes = $$$R("RequestedFilters")
	
	#dim RelatedFiltersList As %ListOfObjects = $$$R("RelatedFilters")
	if $IsObject(RelatedFiltersList) {
		for i=1:1:RelatedFiltersList.Count() {
			set RelatedFilter = RelatedFiltersList.GetAt(i)
			set RelatedFilters(RelatedFilter.Filter) = RelatedFilter.Value
		}
	}

   	set st = ##class(MDX2JSON.Utils).WriteFiltersForDataSource(DataSource, Values, Search, .RelatedFilters, RequestedFilters)
  	return st
]]></Implementation>
</Method>

<Method name="WriteJSONfromMDX">
<Description><![CDATA[
Wrapper for ##class(MDX2JSON.Utils).WriteJSONPfromMDX(pMDX)<br>
Converts incoming request object and calls abovementioned method.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try {
		set mdx = $$$R("MDX")
		set timeout = $$$R("Timeout")
		set engine = $$$R("Engine")
		set cubeKey = $$$R("CubeKey")
		set queryKey = $$$R("QueryKey")
		
		if engine = "DeepSeeREST" {
			// DeepSeeREST engine for MDX->JSON transformation. Only in 15.3+
			set st = ##class(MDX2JSON.Utils).WriteJSONfromMDXNew(mdx)
		} else {
			// Default MDX2JSON engine. 14.1+
			if mdx'="" {
				set st = ##class(MDX2JSON.Utils).WriteJSONfromMDX(mdx, timeout)
			} else {
				set st = ##class(MDX2JSON.Utils).WriteJSONfromQuery(cubeKey, queryKey, timeout)				
			}
		}
	} catch ex {
		set st=ex.AsStatus()
	}

	return st
]]></Implementation>
</Method>

<Method name="WriteJSONPfromMDX">
<Description><![CDATA[
Wrapper for ##class(MDX2JSON.Utils).WriteJSONPfromMDX(pMDX)<br>
Converts incoming request object and calls abovementioned method.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	return ##class(MDX2JSON.Utils).WriteJSONPfromMDX($$$R("MDX"))
]]></Implementation>
</Method>

<Method name="WriteXMLAfromMDX">
<Description><![CDATA[
Wrapper for ##class(MDX2JSON.Utils).WriteXMLAfromMDX(pMDX)<br>
Converts incoming request object and calls abovementioned method.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	return ##class(MDX2JSON.Utils).WriteXMLAfromMDX($$$R("MDX"))
]]></Implementation>
</Method>

<Method name="GetFormat">
<Description>
Wrapper for ##class(MDX2JSON.Utils).GetFormat()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	return ##class(MDX2JSON.Utils).GetFormat()
]]></Implementation>
</Method>

<Method name="GetConfig">
<Description>
Wrapper for ##class(MDX2JSON.Users).GetConfig()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Application</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	w "{"_$$$ZENJSPAIR("Config",##class(MDX2JSON.Users).GetConfig(Application))_"}"
	return $$$OK
]]></Implementation>
</Method>

<Method name="SetConfig">
<Description>
Wrapper for ##class(MDX2JSON.Users).SetConfig()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set config = $$$R("Config")
	if (($IsObject(config)) && (config.%IsA("%ZEN.proxyObject"))) {
		set config = ..OutputToStr(config,"%ToJSON")
	}
	return ##class(MDX2JSON.Users).SetConfig($$$R("Application"),config)
]]></Implementation>
</Method>

<Method name="GetFavorites">
<Description>
Get a list of favorites for a current user</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = ##class(MDX2JSON.Users).GetFavorites()
	return st
]]></Implementation>
</Method>

<Method name="AddFavorite">
<ClassMethod>1</ClassMethod>
<FormalSpec>Name:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set Name = $ZCONVERT($ZCONVERT(Name ,"I","URL") ,"I","UTF8")
	return ##class(%DeepSee.UserLibrary.Utils).%AddFavorite(Name)
]]></Implementation>
</Method>

<Method name="RemoveFavorite">
<ClassMethod>1</ClassMethod>
<FormalSpec>Name:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set Name = $ZCONVERT($ZCONVERT(Name ,"I","URL") ,"I","UTF8")
	return ##class(%DeepSee.UserLibrary.Utils).%RemoveFavorite(Name)
]]></Implementation>
</Method>

<Method name="ExecuteAction">
<ClassMethod>1</ClassMethod>
<FormalSpec>Cube:%String,Action:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set Cube = $ZCONVERT($ZCONVERT(Cube ,"I","URL") ,"I","UTF8")
	set Action = $ZCONVERT($ZCONVERT(Action ,"I","URL") ,"I","UTF8")
	return ##class(MDX2JSON.Utils).ExecuteAction(Cube,Action,%request.Content)
]]></Implementation>
</Method>

<Method name="WritePivotVariablesForCube">
<Description><![CDATA[
Return a list of available pivot variables for <var>Cupe</var>.
See correspontding method from DeepSee.REST.v1.InfoServer ]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Cube:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set Cube = $ZCONVERT($ZCONVERT(Cube,"I","URL") ,"I","UTF8")
	return ##class(MDX2JSON.Utils).WritePivotVariablesForCube(Cube)
]]></Implementation>
</Method>

<Method name="WriteAddons">
<Description>
DSW specific method, returns available addons</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	
	set app = "/dsw"
	set path = $system.CSP.GetFileName(app _ "/")
	set path = ##class(%File).NormalizeDirectory(path)
	set path = ##class(%File).SubDirectoryName(path, "addons", $$$YES)	
	set url = app _ "/addons/"
	
	#dim rs As %SQL.ClassQueryResultSet = ##class(%File).FileSetFunc(path, "*.js")
	
	set list = $$$NewDynDTList
	while rs.%Next() {
		$$$Insert(list, url _ rs.ItemName)
	}
	set sc = ##class(MDX2JSON.Utils).CreateAddons(list)
	
	if $$$ISOK(sc) {
		$$$ListToJSON(list)
	}
    quit sc
]]></Implementation>
</Method>

<Method name="WriteThemes">
<Description>
DSW specific method, returns available themes</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	
	set app = "/dsw"
	set path = $system.CSP.GetFileName(app _ "/")
	set path = ##class(%File).NormalizeDirectory(path)
	set path = ##class(%File).SubDirectoryName(path, "themes", $$$YES)	
	set url = app _ "/themes/"
	
	#dim rs As %SQL.ClassQueryResultSet = ##class(%File).FileSetFunc(path, "*.css")
	
	set list = $$$NewDynDTList
	while rs.%Next() {
		$$$Insert(list, url _ rs.ItemName)
	}
	$$$ListToJSON(list)
	
    quit sc
]]></Implementation>
</Method>

<Method name="WriteJSONfromKPI">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set class = "%DeepSee.REST.v1.DataServer"
	set codeFind  = "Set tKpiSC"
	set base = ##class(%Dictionary.MethodDefinition).IDKEYOpen(class, "WriteJSONfromKPI").Implementation.Read($$$MaxStringLength)
	set base = $replace(base, codeFind, "Set:'$LF(tKpiPropList, ""%series"") tKpiPropList = tKpiPropList _ $LB(""%series"")" _ $c(13, 10, 9, 9) _ codeFind)
	set base = $replace(base, "..", "##class(" _class _ ").")
	do %code.Write(base)
]]></Implementation>
</Method>
</Class>
</Export>
